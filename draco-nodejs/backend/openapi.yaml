openapi: 3.0.0
info:
  title: Draco API
  version: 1.0.0
servers:
  - url: https://localhost:3001
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RosterMember:
      type: object
      properties:
        id:
          type: string
          pattern: ^d+$
        playerNumber:
          type: number
          minimum: 0
          maximum: 99
        inactive:
          type: boolean
          default: false
        submittedWaiver:
          type: boolean
        dateAdded:
          type: string
          nullable: true
          format: date
          default: null
        player:
          type: object
          properties:
            id:
              type: string
              pattern: ^d+$
            submittedDriversLicense:
              type: boolean
              default: false
            firstYear:
              type: number
              minimum: 1900
              maximum: 2025
            contact:
              type: object
              properties:
                id:
                  type: string
                  pattern: ^d+$
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 50
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 50
                middleName:
                  type: string
                  maxLength: 50
                email:
                  type: string
                  maxLength: 100
                  format: email
                userId:
                  type: string
                  maxLength: 50
                photoUrl:
                  type: string
                  format: uri
                contactDetails:
                  type: object
                  properties:
                    phone1:
                      type: string
                      nullable: true
                      default: ""
                    phone2:
                      type: string
                      nullable: true
                      default: ""
                    phone3:
                      type: string
                      nullable: true
                      default: ""
                    streetAddress:
                      type: string
                      nullable: true
                      maxLength: 100
                      default: ""
                    city:
                      type: string
                      nullable: true
                      maxLength: 50
                      default: ""
                    state:
                      type: string
                      nullable: true
                      maxLength: 50
                      default: ""
                    zip:
                      type: string
                      nullable: true
                      maxLength: 10
                      default: ""
                    dateOfBirth:
                      type: string
                      nullable: true
                      default: ""
              required:
                - id
                - firstName
                - lastName
          required:
            - id
            - firstYear
            - contact
          description: Schema for a player who is or was on a team roster. This contains
            details that only ever need to be supplied once
      required:
        - id
        - player
      description: Schema for a roster member including player details
    RosterPlayer:
      type: object
      properties:
        id:
          type: string
          pattern: ^d+$
        submittedDriversLicense:
          type: boolean
          default: false
        firstYear:
          type: number
          minimum: 1900
          maximum: 2025
        contact:
          type: object
          properties:
            id:
              type: string
              pattern: ^d+$
            firstName:
              type: string
              minLength: 1
              maxLength: 50
            lastName:
              type: string
              minLength: 1
              maxLength: 50
            middleName:
              type: string
              maxLength: 50
            email:
              type: string
              maxLength: 100
              format: email
            userId:
              type: string
              maxLength: 50
            photoUrl:
              type: string
              format: uri
            contactDetails:
              type: object
              properties:
                phone1:
                  type: string
                  nullable: true
                  default: ""
                phone2:
                  type: string
                  nullable: true
                  default: ""
                phone3:
                  type: string
                  nullable: true
                  default: ""
                streetAddress:
                  type: string
                  nullable: true
                  maxLength: 100
                  default: ""
                city:
                  type: string
                  nullable: true
                  maxLength: 50
                  default: ""
                state:
                  type: string
                  nullable: true
                  maxLength: 50
                  default: ""
                zip:
                  type: string
                  nullable: true
                  maxLength: 10
                  default: ""
                dateOfBirth:
                  type: string
                  nullable: true
                  default: ""
          required:
            - id
            - firstName
            - lastName
      required:
        - id
        - firstYear
        - contact
      description: Schema for a player who is or was on a team roster. This contains
        details that only ever need to be supplied once
    SignRosterMember:
      type: object
      properties:
        playerNumber:
          type: number
          minimum: 0
          maximum: 99
        submittedWaiver:
          type: boolean
        player:
          type: object
          properties:
            submittedDriversLicense:
              type: boolean
            firstYear:
              type: number
              minimum: 1900
              maximum: 2025
            contact:
              anyOf:
                - type: object
                  properties:
                    id:
                      type: string
                  required:
                    - id
                - type: object
                  properties:
                    firstName:
                      type: string
                      minLength: 1
                      maxLength: 50
                    lastName:
                      type: string
                      minLength: 1
                      maxLength: 50
                    middleName:
                      type: string
                      maxLength: 50
                    email:
                      type: string
                      maxLength: 100
                      format: email
                    userId:
                      type: string
                      maxLength: 50
                    photoUrl:
                      type: string
                      format: uri
                    contactDetails:
                      type: object
                      properties:
                        phone1:
                          type: string
                          nullable: true
                          default: ""
                        phone2:
                          type: string
                          nullable: true
                          default: ""
                        phone3:
                          type: string
                          nullable: true
                          default: ""
                        streetAddress:
                          type: string
                          nullable: true
                          maxLength: 100
                          default: ""
                        city:
                          type: string
                          nullable: true
                          maxLength: 50
                          default: ""
                        state:
                          type: string
                          nullable: true
                          maxLength: 50
                          default: ""
                        zip:
                          type: string
                          nullable: true
                          maxLength: 10
                          default: ""
                        dateOfBirth:
                          type: string
                          nullable: true
                          default: ""
          required:
            - submittedDriversLicense
            - firstYear
            - contact
      required:
        - player
      description: Schema for signing a contact to a roster and providing player details
    Contact:
      type: object
      properties:
        id:
          type: string
          pattern: ^d+$
        firstName:
          type: string
          minLength: 1
          maxLength: 50
        lastName:
          type: string
          minLength: 1
          maxLength: 50
        middleName:
          type: string
          maxLength: 50
        email:
          type: string
          maxLength: 100
          format: email
        userId:
          type: string
          maxLength: 50
        photoUrl:
          type: string
          format: uri
        contactDetails:
          type: object
          properties:
            phone1:
              type: string
              nullable: true
              default: ""
            phone2:
              type: string
              nullable: true
              default: ""
            phone3:
              type: string
              nullable: true
              default: ""
            streetAddress:
              type: string
              nullable: true
              maxLength: 100
              default: ""
            city:
              type: string
              nullable: true
              maxLength: 50
              default: ""
            state:
              type: string
              nullable: true
              maxLength: 50
              default: ""
            zip:
              type: string
              nullable: true
              maxLength: 10
              default: ""
            dateOfBirth:
              type: string
              nullable: true
              default: ""
        contactroles:
          type: array
          items:
            type: object
            properties:
              roleId:
                type: string
                maxLength: 50
              roleName:
                type: string
                maxLength: 50
              roleData:
                type: string
                pattern: ^d+$
              contextName:
                type: string
                maxLength: 50
              id:
                type: string
                pattern: ^d+$
            required:
              - roleId
              - roleData
              - id
        creatoraccountid:
          type: string
          pattern: ^d+$
      required:
        - id
        - firstName
        - lastName
    CreateContact:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
        lastName:
          type: string
          minLength: 1
          maxLength: 50
        middleName:
          type: string
          maxLength: 50
        email:
          type: string
          maxLength: 100
          format: email
        contactDetails:
          type: object
          properties:
            phone1:
              type: string
              nullable: true
              default: ""
            phone2:
              type: string
              nullable: true
              default: ""
            phone3:
              type: string
              nullable: true
              default: ""
            streetAddress:
              type: string
              nullable: true
              maxLength: 100
              default: ""
            city:
              type: string
              nullable: true
              maxLength: 50
              default: ""
            state:
              type: string
              nullable: true
              maxLength: 50
              default: ""
            zip:
              type: string
              nullable: true
              maxLength: 10
              default: ""
            dateOfBirth:
              type: string
              nullable: true
              default: ""
        photo:
          type: string
          format: binary
          description: Contact photo file
      required:
        - firstName
        - lastName
    Account:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        accountLogoUrl:
          type: string
        configuration:
          type: object
          properties:
            accountType:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
              required:
                - id
                - name
            firstYear:
              type: integer
              nullable: true
            timezoneId:
              type: string
              nullable: true
            affiliation:
              type: object
              nullable: true
              properties:
                id:
                  type: string
                name:
                  type: string
                url:
                  type: string
                  nullable: true
              required:
                - id
                - name
        urls:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              url:
                type: string
                minLength: 1
            required:
              - id
              - url
          default: []
        accountOwner:
          type: object
          properties:
            user:
              type: object
              properties:
                id:
                  type: string
                userName:
                  type: string
                  maxLength: 100
                  format: email
                token:
                  type: string
                contact:
                  type: object
                  properties:
                    id:
                      type: string
                      pattern: ^d+$
                    firstName:
                      type: string
                      minLength: 1
                      maxLength: 50
                    lastName:
                      type: string
                      minLength: 1
                      maxLength: 50
                    middleName:
                      type: string
                      maxLength: 50
                    email:
                      type: string
                      maxLength: 100
                      format: email
                    userId:
                      type: string
                      maxLength: 50
                    photoUrl:
                      type: string
                      format: uri
                    contactDetails:
                      type: object
                      properties:
                        phone1:
                          type: string
                          nullable: true
                          default: ""
                        phone2:
                          type: string
                          nullable: true
                          default: ""
                        phone3:
                          type: string
                          nullable: true
                          default: ""
                        streetAddress:
                          type: string
                          nullable: true
                          maxLength: 100
                          default: ""
                        city:
                          type: string
                          nullable: true
                          maxLength: 50
                          default: ""
                        state:
                          type: string
                          nullable: true
                          maxLength: 50
                          default: ""
                        zip:
                          type: string
                          nullable: true
                          maxLength: 10
                          default: ""
                        dateOfBirth:
                          type: string
                          nullable: true
                          default: ""
                  required:
                    - id
                    - firstName
                    - lastName
              required:
                - id
                - userName
            contact:
              type: object
              properties:
                id:
                  type: string
                  pattern: ^d+$
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 50
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 50
                middleName:
                  type: string
                  maxLength: 50
              required:
                - id
                - firstName
                - lastName
        socials:
          type: object
          properties:
            twitterAccountName:
              type: string
            facebookFanPage:
              type: string
            youtubeUserId:
              type: string
              nullable: true
            defaultVideo:
              type: string
              nullable: true
            autoPlayVideo:
              type: boolean
              default: false
      required:
        - id
        - name
        - accountLogoUrl
    AccountSearchQuery:
      type: object
      properties:
        q:
          type: string
          minLength: 1
          maxLength: 100
      required:
        - q
    AccountDomainLookupHeaders:
      type: object
      properties:
        host:
          type: string
          minLength: 1
      required:
        - host
    AccountWithSeasons:
      type: object
      properties:
        account:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            accountLogoUrl:
              type: string
            configuration:
              type: object
              properties:
                accountType:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                  required:
                    - id
                    - name
                firstYear:
                  type: integer
                  nullable: true
                timezoneId:
                  type: string
                  nullable: true
                affiliation:
                  type: object
                  nullable: true
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    url:
                      type: string
                      nullable: true
                  required:
                    - id
                    - name
            urls:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  url:
                    type: string
                    minLength: 1
                required:
                  - id
                  - url
              default: []
            accountOwner:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    id:
                      type: string
                    userName:
                      type: string
                      maxLength: 100
                      format: email
                    token:
                      type: string
                    contact:
                      type: object
                      properties:
                        id:
                          type: string
                          pattern: ^d+$
                        firstName:
                          type: string
                          minLength: 1
                          maxLength: 50
                        lastName:
                          type: string
                          minLength: 1
                          maxLength: 50
                        middleName:
                          type: string
                          maxLength: 50
                        email:
                          type: string
                          maxLength: 100
                          format: email
                        userId:
                          type: string
                          maxLength: 50
                        photoUrl:
                          type: string
                          format: uri
                        contactDetails:
                          type: object
                          properties:
                            phone1:
                              type: string
                              nullable: true
                              default: ""
                            phone2:
                              type: string
                              nullable: true
                              default: ""
                            phone3:
                              type: string
                              nullable: true
                              default: ""
                            streetAddress:
                              type: string
                              nullable: true
                              maxLength: 100
                              default: ""
                            city:
                              type: string
                              nullable: true
                              maxLength: 50
                              default: ""
                            state:
                              type: string
                              nullable: true
                              maxLength: 50
                              default: ""
                            zip:
                              type: string
                              nullable: true
                              maxLength: 10
                              default: ""
                            dateOfBirth:
                              type: string
                              nullable: true
                              default: ""
                      required:
                        - id
                        - firstName
                        - lastName
                  required:
                    - id
                    - userName
                contact:
                  type: object
                  properties:
                    id:
                      type: string
                      pattern: ^d+$
                    firstName:
                      type: string
                      minLength: 1
                      maxLength: 50
                    lastName:
                      type: string
                      minLength: 1
                      maxLength: 50
                    middleName:
                      type: string
                      maxLength: 50
                  required:
                    - id
                    - firstName
                    - lastName
            socials:
              type: object
              properties:
                twitterAccountName:
                  type: string
                facebookFanPage:
                  type: string
                youtubeUserId:
                  type: string
                  nullable: true
                defaultVideo:
                  type: string
                  nullable: true
                autoPlayVideo:
                  type: boolean
                  default: false
          required:
            - id
            - name
            - accountLogoUrl
        currentSeason:
          type: object
          nullable: true
          properties:
            id:
              type: string
            name:
              type: string
          required:
            - id
            - name
        seasons:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              isCurrent:
                type: boolean
            required:
              - id
              - name
              - isCurrent
      required:
        - account
        - currentSeason
        - seasons
    AccountDetailsQuery:
      type: object
      properties:
        includeCurrentSeason:
          type: boolean
          nullable: true
          default: false
    CreateAccount:
      type: object
      properties:
        name:
          type: string
        accountLogoUrl:
          type: string
        configuration:
          type: object
          properties:
            accountType:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
              required:
                - id
                - name
            firstYear:
              type: integer
              nullable: true
            timezoneId:
              type: string
              nullable: true
            affiliation:
              type: object
              nullable: true
              properties:
                id:
                  type: string
                name:
                  type: string
                url:
                  type: string
                  nullable: true
              required:
                - id
                - name
        urls:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              url:
                type: string
                minLength: 1
            required:
              - url
          default: []
        socials:
          type: object
          properties:
            twitterAccountName:
              type: string
            facebookFanPage:
              type: string
            youtubeUserId:
              type: string
              nullable: true
            defaultVideo:
              type: string
              nullable: true
            autoPlayVideo:
              type: boolean
              default: false
      required:
        - name
        - accountLogoUrl
    AccountName:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
    AccountHeader:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        accountLogoUrl:
          type: string
      required:
        - id
        - name
        - accountLogoUrl
    AccountAffiliation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        url:
          type: string
          nullable: true
      required:
        - id
        - name
    Sponsor:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        streetAddress:
          type: string
          maxLength: 255
        cityStateZip:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 4000
        email:
          type: string
          maxLength: 100
        phone:
          type: string
          maxLength: 255
        fax:
          type: string
          maxLength: 255
        website:
          type: string
          maxLength: 255
        teamId:
          type: string
        id:
          type: string
        accountId:
          type: string
        photoUrl:
          type: string
          format: uri
          description: Public URL for the sponsor photo
      required:
        - name
        - id
        - accountId
    SponsorList:
      type: object
      properties:
        sponsors:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                minLength: 1
                maxLength: 50
              streetAddress:
                type: string
                maxLength: 255
              cityStateZip:
                type: string
                maxLength: 255
              description:
                type: string
                maxLength: 4000
              email:
                type: string
                maxLength: 100
              phone:
                type: string
                maxLength: 255
              fax:
                type: string
                maxLength: 255
              website:
                type: string
                maxLength: 255
              teamId:
                type: string
              id:
                type: string
              accountId:
                type: string
              photoUrl:
                type: string
                format: uri
                description: Public URL for the sponsor photo
            required:
              - name
              - id
              - accountId
      required:
        - sponsors
      title: SponsorListResponse
      description: List response for sponsors
    SponsorPayload:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        streetAddress:
          type: string
          maxLength: 255
        cityStateZip:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 4000
        email:
          type: string
          maxLength: 100
        phone:
          type: string
          maxLength: 255
        fax:
          type: string
          maxLength: 255
        website:
          type: string
          maxLength: 255
      required:
        - name
    ValidationError:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: number
          enum:
            - 400
        isRetryable:
          type: boolean
          enum:
            - false
      required:
        - message
        - statusCode
        - isRetryable
      description: Validation error (400)
      example:
        message: Validation failed
        statusCode: 400
        isRetryable: false
    AuthenticationError:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: number
          enum:
            - 401
        isRetryable:
          type: boolean
          enum:
            - false
      required:
        - message
        - statusCode
        - isRetryable
      description: Authentication error (401)
      example:
        message: Authentication required
        statusCode: 401
        isRetryable: false
    AuthorizationError:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: number
          enum:
            - 403
        isRetryable:
          type: boolean
          enum:
            - false
      required:
        - message
        - statusCode
        - isRetryable
      description: Authorization error (403)
      example:
        message: Access denied
        statusCode: 403
        isRetryable: false
    NotFoundError:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: number
          enum:
            - 404
        isRetryable:
          type: boolean
          enum:
            - false
      required:
        - message
        - statusCode
        - isRetryable
      description: Resource not found error (404)
      example:
        message: Resource not found
        statusCode: 404
        isRetryable: false
    ConflictError:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: number
          enum:
            - 409
        isRetryable:
          type: boolean
          enum:
            - false
      required:
        - message
        - statusCode
        - isRetryable
      description: Resource conflict error (409)
      example:
        message: Resource conflict
        statusCode: 409
        isRetryable: false
    InternalServerError:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: number
          enum:
            - 500
        isRetryable:
          type: boolean
          enum:
            - true
      required:
        - message
        - statusCode
        - isRetryable
      description: Internal server error (500)
      example:
        message: Internal server error
        statusCode: 500
        isRetryable: true
  parameters: {}
paths:
  /api/accounts/search:
    get:
      operationId: searchAccounts
      summary: Search accounts
      description: Public search for accounts by name or type
      tags:
        - Accounts
      parameters:
        - schema:
            type: string
            minLength: 1
            maxLength: 100
          required: true
          name: q
          in: query
      responses:
        "200":
          description: Accounts matching the search query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/by-domain:
    get:
      operationId: getAccountByDomain
      summary: Get account by domain
      description: Public lookup of an account by inbound request host domain.
      tags:
        - Accounts
      parameters:
        - schema:
            type: string
            minLength: 1
          required: true
          name: host
          in: header
      responses:
        "200":
          description: Account matching the provided domain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "404":
          description: Account not found for the provided domain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}:
    get:
      operationId: getAccountById
      summary: Get account by ID
      description: Retrieve account details and optional current season information.
      tags:
        - Accounts
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - schema:
            type: boolean
            nullable: true
            default: false
          required: false
          name: includeCurrentSeason
          in: query
      responses:
        "200":
          description: Account details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountWithSeasons"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    put:
      operationId: updateAccount
      summary: Update account
      description: Update account details. Account administrators or global
        administrators only.
      tags:
        - Accounts
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                accountLogoUrl:
                  type: string
                configuration:
                  type: object
                  properties:
                    accountType:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                      required:
                        - id
                        - name
                    firstYear:
                      type: integer
                      nullable: true
                    timezoneId:
                      type: string
                      nullable: true
                    affiliation:
                      type: object
                      nullable: true
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        url:
                          type: string
                          nullable: true
                      required:
                        - id
                        - name
                urls:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                      url:
                        type: string
                        minLength: 1
                    required:
                      - url
                  default: []
                socials:
                  type: object
                  properties:
                    twitterAccountName:
                      type: string
                    facebookFanPage:
                      type: string
                    youtubeUserId:
                      type: string
                      nullable: true
                    defaultVideo:
                      type: string
                      nullable: true
                    autoPlayVideo:
                      type: boolean
                      default: false
      responses:
        "200":
          description: Account updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    delete:
      operationId: deleteAccount
      summary: Delete account
      description: Delete an account. Administrator access required.
      tags:
        - Accounts
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "204":
          description: Account deleted
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts:
    post:
      operationId: createAccount
      summary: Create account
      description: Create a new account. Administrator access required.
      tags:
        - Accounts
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAccount"
      responses:
        "201":
          description: Account created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/name:
    get:
      operationId: getAccountName
      summary: Get account name
      description: Retrieve the display name for an account.
      tags:
        - Accounts
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "200":
          description: Account name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountName"
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/header:
    get:
      operationId: getAccountHeader
      summary: Get account header
      description: Retrieve account name and branding assets.
      tags:
        - Accounts
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "200":
          description: Account header information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountHeader"
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/types:
    get:
      operationId: getAccountTypes
      summary: List account types
      description: Retrieve the list of available account types.
      tags:
        - Accounts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Account types list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/affiliations:
    get:
      operationId: getAccountAffiliations
      summary: List account affiliations
      description: Retrieve the list of available account affiliations.
      tags:
        - Accounts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Account affiliations list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountAffiliation"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/my-accounts:
    get:
      operationId: getMyAccounts
      summary: Get the authenticated user's accounts
      description: Returns the accounts associated with the logged-in user via account
        membership.
      tags:
        - Accounts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Accounts accessible to the authenticated user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/managed:
    get:
      operationId: getManagedAccounts
      summary: Get accounts managed by the authenticated user
      description: Returns accounts where the user holds AccountAdmin privileges or is
        a global Administrator.
      tags:
        - Accounts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Accounts managed by the authenticated user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/contacts:
    post:
      description: Create a new contact
      operationId: createContact
      security:
        - bearerAuth: []
      tags:
        - Contacts
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 50
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 50
                middleName:
                  type: string
                  maxLength: 50
                email:
                  type: string
                  maxLength: 100
                  format: email
                contactDetails:
                  type: object
                  properties:
                    phone1:
                      type: string
                      nullable: true
                      default: ""
                    phone2:
                      type: string
                      nullable: true
                      default: ""
                    phone3:
                      type: string
                      nullable: true
                      default: ""
                    streetAddress:
                      type: string
                      nullable: true
                      maxLength: 100
                      default: ""
                    city:
                      type: string
                      nullable: true
                      maxLength: 50
                      default: ""
                    state:
                      type: string
                      nullable: true
                      maxLength: 50
                      default: ""
                    zip:
                      type: string
                      nullable: true
                      maxLength: 10
                      default: ""
                    dateOfBirth:
                      type: string
                      nullable: true
                      default: ""
                photo:
                  type: string
                  format: binary
                  description: Contact photo file
          multipart/form-data:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 50
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 50
                middleName:
                  type: string
                  maxLength: 50
                email:
                  type: string
                  maxLength: 100
                  format: email
                contactDetails:
                  type: object
                  properties:
                    phone1:
                      type: string
                      nullable: true
                      default: ""
                    phone2:
                      type: string
                      nullable: true
                      default: ""
                    phone3:
                      type: string
                      nullable: true
                      default: ""
                    streetAddress:
                      type: string
                      nullable: true
                      maxLength: 100
                      default: ""
                    city:
                      type: string
                      nullable: true
                      maxLength: 50
                      default: ""
                    state:
                      type: string
                      nullable: true
                      maxLength: 50
                      default: ""
                    zip:
                      type: string
                      nullable: true
                      maxLength: 10
                      default: ""
                    dateOfBirth:
                      type: string
                      nullable: true
                      default: ""
                photo:
                  type: string
                  format: binary
                  description: Contact photo file
            encoding:
              photo:
                contentType: image/*
      responses:
        "200":
          description: Contact created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied - Account admin required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Contact not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "409":
          description: Conflict error - e.g. duplicate email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/contacts/{contactId}:
    put:
      description: Update an account contact
      operationId: updateContact
      summary: Update Contact
      security:
        - bearerAuth: []
      tags:
        - Contacts
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: contactId
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 50
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 50
                middleName:
                  type: string
                  maxLength: 50
                email:
                  type: string
                  maxLength: 100
                  format: email
                contactDetails:
                  type: object
                  properties:
                    phone1:
                      type: string
                      nullable: true
                      default: ""
                    phone2:
                      type: string
                      nullable: true
                      default: ""
                    phone3:
                      type: string
                      nullable: true
                      default: ""
                    streetAddress:
                      type: string
                      nullable: true
                      maxLength: 100
                      default: ""
                    city:
                      type: string
                      nullable: true
                      maxLength: 50
                      default: ""
                    state:
                      type: string
                      nullable: true
                      maxLength: 50
                      default: ""
                    zip:
                      type: string
                      nullable: true
                      maxLength: 10
                      default: ""
                    dateOfBirth:
                      type: string
                      nullable: true
                      default: ""
                photo:
                  type: string
                  format: binary
                  description: Contact photo file
          multipart/form-data:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 50
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 50
                middleName:
                  type: string
                  maxLength: 50
                email:
                  type: string
                  maxLength: 100
                  format: email
                contactDetails:
                  type: object
                  properties:
                    phone1:
                      type: string
                      nullable: true
                      default: ""
                    phone2:
                      type: string
                      nullable: true
                      default: ""
                    phone3:
                      type: string
                      nullable: true
                      default: ""
                    streetAddress:
                      type: string
                      nullable: true
                      maxLength: 100
                      default: ""
                    city:
                      type: string
                      nullable: true
                      maxLength: 50
                      default: ""
                    state:
                      type: string
                      nullable: true
                      maxLength: 50
                      default: ""
                    zip:
                      type: string
                      nullable: true
                      maxLength: 10
                      default: ""
                    dateOfBirth:
                      type: string
                      nullable: true
                      default: ""
                photo:
                  type: string
                  format: binary
                  description: Contact photo file
            encoding:
              photo:
                contentType: image/*
      responses:
        "200":
          description: Contact updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied - Account admin required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Contact not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "409":
          description: Conflict error - e.g. duplicate email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/contacts/{contactId}/photo:
    delete:
      description: Delete a contact photo
      operationId: deleteContactPhoto
      security:
        - bearerAuth: []
      tags:
        - Contacts
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: contactId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "200":
          description: Contact photo deleted
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied - Account admin required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Contact not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/contacts/{contactId}/roster:
    get:
      description: Get a roster entry for a contact. This is information that is
        global to a player once they are on a team, it is not season specfic
      operationId: getContactRoster
      tags:
        - Contacts
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: contactId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "200":
          description: Roster entry found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RosterPlayer"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "404":
          description: Roster member or team not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/sponsors:
    get:
      description: List sponsors configured for an account
      operationId: listAccountSponsors
      summary: List account sponsors
      tags:
        - Sponsors
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "200":
          description: Sponsors for the account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SponsorList"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    post:
      description: Create an account sponsor
      operationId: createAccountSponsor
      summary: Create account sponsor
      tags:
        - Sponsors
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: "#/components/schemas/SponsorPayload"
                - type: object
                  properties:
                    photo:
                      type: string
                      format: binary
                      description: Sponsor photo file
            encoding:
              photo:
                contentType: image/*
      responses:
        "201":
          description: Sponsor created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sponsor"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied - sponsor management permission required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/sponsors/{sponsorId}:
    get:
      description: Retrieve a single account-level sponsor
      operationId: getAccountSponsor
      summary: Get account sponsor
      tags:
        - Sponsors
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: sponsorId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "200":
          description: Sponsor details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sponsor"
        "404":
          description: Sponsor not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    put:
      description: Update an account sponsor
      operationId: updateAccountSponsor
      summary: Update account sponsor
      tags:
        - Sponsors
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: sponsorId
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 50
                streetAddress:
                  type: string
                  maxLength: 255
                cityStateZip:
                  type: string
                  maxLength: 255
                description:
                  type: string
                  maxLength: 4000
                email:
                  type: string
                  maxLength: 100
                phone:
                  type: string
                  maxLength: 255
                fax:
                  type: string
                  maxLength: 255
                website:
                  type: string
                  maxLength: 255
                photo:
                  type: string
                  format: binary
                  description: Sponsor photo file
            encoding:
              photo:
                contentType: image/*
      responses:
        "200":
          description: Sponsor updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sponsor"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied - sponsor management permission required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Sponsor not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    delete:
      description: Delete an account sponsor
      operationId: deleteAccountSponsor
      summary: Delete account sponsor
      tags:
        - Sponsors
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: sponsorId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "204":
          description: Sponsor deleted
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied - sponsor management permission required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Sponsor not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/sponsors:
    get:
      description: List sponsors configured for a team season
      operationId: listTeamSponsors
      summary: List team sponsors
      tags:
        - Sponsors
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: seasonId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: teamSeasonId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "200":
          description: Sponsors for the team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SponsorList"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    post:
      description: Create a team sponsor
      operationId: createTeamSponsor
      summary: Create team sponsor
      tags:
        - Sponsors
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: seasonId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: teamSeasonId
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          multipart/form-data:
            schema:
              allOf:
                - $ref: "#/components/schemas/SponsorPayload"
                - type: object
                  properties:
                    photo:
                      type: string
                      format: binary
                      description: Sponsor photo file
            encoding:
              photo:
                contentType: image/*
      responses:
        "201":
          description: Sponsor created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sponsor"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied - team sponsor management permission required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/sponsors/{sponsorId}:
    put:
      description: Update a team sponsor
      operationId: updateTeamSponsor
      summary: Update team sponsor
      tags:
        - Sponsors
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: seasonId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: teamSeasonId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: sponsorId
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 50
                streetAddress:
                  type: string
                  maxLength: 255
                cityStateZip:
                  type: string
                  maxLength: 255
                description:
                  type: string
                  maxLength: 4000
                email:
                  type: string
                  maxLength: 100
                phone:
                  type: string
                  maxLength: 255
                fax:
                  type: string
                  maxLength: 255
                website:
                  type: string
                  maxLength: 255
                photo:
                  type: string
                  format: binary
                  description: Sponsor photo file
            encoding:
              photo:
                contentType: image/*
      responses:
        "200":
          description: Sponsor updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sponsor"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied - team sponsor management permission required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Sponsor not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    delete:
      description: Delete a team sponsor
      operationId: deleteTeamSponsor
      summary: Delete team sponsor
      tags:
        - Sponsors
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: seasonId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: teamSeasonId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: sponsorId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "204":
          description: Sponsor deleted
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied - team sponsor management permission required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Sponsor not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
