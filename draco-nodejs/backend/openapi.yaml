openapi: 3.0.0
info:
  title: Draco API
  version: 1.0.0
servers:
  - url: https://localhost:3001
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RosterMember:
      type: object
      properties:
        id:
          type: string
          pattern: ^d+$
        playerNumber:
          type: number
          minimum: 0
          maximum: 99
        inactive:
          type: boolean
          default: false
        submittedWaiver:
          type: boolean
        dateAdded:
          type: string
          nullable: true
          format: date
          default: null
        player:
          type: object
          properties:
            id:
              type: string
              pattern: ^d+$
            submittedDriversLicense:
              type: boolean
              default: false
            firstYear:
              type: number
              minimum: 1900
              maximum: 2025
            contact:
              type: object
              properties:
                id:
                  type: string
                  pattern: ^d+$
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 50
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 50
                middleName:
                  type: string
                  maxLength: 50
                email:
                  type: string
                  maxLength: 100
                  format: email
                userId:
                  type: string
                  maxLength: 50
                photoUrl:
                  type: string
                  format: uri
                contactDetails:
                  type: object
                  properties:
                    phone1:
                      type: string
                      nullable: true
                      default: ""
                    phone2:
                      type: string
                      nullable: true
                      default: ""
                    phone3:
                      type: string
                      nullable: true
                      default: ""
                    streetAddress:
                      type: string
                      nullable: true
                      maxLength: 100
                      default: ""
                    city:
                      type: string
                      nullable: true
                      maxLength: 50
                      default: ""
                    state:
                      type: string
                      nullable: true
                      maxLength: 50
                      default: ""
                    zip:
                      type: string
                      nullable: true
                      maxLength: 10
                      default: ""
                    dateOfBirth:
                      type: string
                      nullable: true
                      default: ""
              required:
                - id
                - firstName
                - lastName
          required:
            - id
            - firstYear
            - contact
          description: Schema for a player who is or was on a team roster. This contains
            details that only ever need to be supplied once
      required:
        - id
        - player
      description: Schema for a roster member including player details
    RosterPlayer:
      type: object
      properties:
        id:
          type: string
          pattern: ^d+$
        submittedDriversLicense:
          type: boolean
          default: false
        firstYear:
          type: number
          minimum: 1900
          maximum: 2025
        contact:
          type: object
          properties:
            id:
              type: string
              pattern: ^d+$
            firstName:
              type: string
              minLength: 1
              maxLength: 50
            lastName:
              type: string
              minLength: 1
              maxLength: 50
            middleName:
              type: string
              maxLength: 50
            email:
              type: string
              maxLength: 100
              format: email
            userId:
              type: string
              maxLength: 50
            photoUrl:
              type: string
              format: uri
            contactDetails:
              type: object
              properties:
                phone1:
                  type: string
                  nullable: true
                  default: ""
                phone2:
                  type: string
                  nullable: true
                  default: ""
                phone3:
                  type: string
                  nullable: true
                  default: ""
                streetAddress:
                  type: string
                  nullable: true
                  maxLength: 100
                  default: ""
                city:
                  type: string
                  nullable: true
                  maxLength: 50
                  default: ""
                state:
                  type: string
                  nullable: true
                  maxLength: 50
                  default: ""
                zip:
                  type: string
                  nullable: true
                  maxLength: 10
                  default: ""
                dateOfBirth:
                  type: string
                  nullable: true
                  default: ""
          required:
            - id
            - firstName
            - lastName
      required:
        - id
        - firstYear
        - contact
      description: Schema for a player who is or was on a team roster. This contains
        details that only ever need to be supplied once
    SignRosterMember:
      type: object
      properties:
        playerNumber:
          type: number
          minimum: 0
          maximum: 99
        submittedWaiver:
          type: boolean
        player:
          type: object
          properties:
            submittedDriversLicense:
              type: boolean
            firstYear:
              type: number
              minimum: 1900
              maximum: 2025
            contact:
              anyOf:
                - type: object
                  properties:
                    id:
                      type: string
                  required:
                    - id
                - type: object
                  properties:
                    firstName:
                      type: string
                      minLength: 1
                      maxLength: 50
                    lastName:
                      type: string
                      minLength: 1
                      maxLength: 50
                    middleName:
                      type: string
                      maxLength: 50
                    email:
                      type: string
                      maxLength: 100
                      format: email
                    userId:
                      type: string
                      maxLength: 50
                    photoUrl:
                      type: string
                      format: uri
                    contactDetails:
                      type: object
                      properties:
                        phone1:
                          type: string
                          nullable: true
                          default: ""
                        phone2:
                          type: string
                          nullable: true
                          default: ""
                        phone3:
                          type: string
                          nullable: true
                          default: ""
                        streetAddress:
                          type: string
                          nullable: true
                          maxLength: 100
                          default: ""
                        city:
                          type: string
                          nullable: true
                          maxLength: 50
                          default: ""
                        state:
                          type: string
                          nullable: true
                          maxLength: 50
                          default: ""
                        zip:
                          type: string
                          nullable: true
                          maxLength: 10
                          default: ""
                        dateOfBirth:
                          type: string
                          nullable: true
                          default: ""
          required:
            - submittedDriversLicense
            - firstYear
            - contact
      required:
        - player
      description: Schema for signing a contact to a roster and providing player details
    Contact:
      type: object
      properties:
        id:
          type: string
          pattern: ^d+$
        firstName:
          type: string
          minLength: 1
          maxLength: 50
        lastName:
          type: string
          minLength: 1
          maxLength: 50
        middleName:
          type: string
          maxLength: 50
        email:
          type: string
          maxLength: 100
          format: email
        userId:
          type: string
          maxLength: 50
        photoUrl:
          type: string
          format: uri
        contactDetails:
          type: object
          properties:
            phone1:
              type: string
              nullable: true
              default: ""
            phone2:
              type: string
              nullable: true
              default: ""
            phone3:
              type: string
              nullable: true
              default: ""
            streetAddress:
              type: string
              nullable: true
              maxLength: 100
              default: ""
            city:
              type: string
              nullable: true
              maxLength: 50
              default: ""
            state:
              type: string
              nullable: true
              maxLength: 50
              default: ""
            zip:
              type: string
              nullable: true
              maxLength: 10
              default: ""
            dateOfBirth:
              type: string
              nullable: true
              default: ""
        contactroles:
          type: array
          items:
            type: object
            properties:
              roleId:
                type: string
                maxLength: 50
              roleName:
                type: string
                maxLength: 50
              roleData:
                type: string
                pattern: ^d+$
              contextName:
                type: string
                maxLength: 50
              id:
                type: string
                pattern: ^d+$
            required:
              - roleId
              - roleData
              - id
        creatoraccountid:
          type: string
          pattern: ^d+$
      required:
        - id
        - firstName
        - lastName
    TeamManager:
      type: object
      properties:
        id:
          type: string
          pattern: ^d+$
        teamSeasonId:
          type: string
          pattern: ^d+$
        contact:
          type: object
          properties:
            id:
              type: string
              pattern: ^d+$
            firstName:
              type: string
              minLength: 1
              maxLength: 50
            lastName:
              type: string
              minLength: 1
              maxLength: 50
            middleName:
              type: string
              maxLength: 50
            email:
              type: string
              maxLength: 100
              format: email
            userId:
              type: string
              maxLength: 50
            photoUrl:
              type: string
              format: uri
            contactDetails:
              type: object
              properties:
                phone1:
                  type: string
                  nullable: true
                  default: ""
                phone2:
                  type: string
                  nullable: true
                  default: ""
                phone3:
                  type: string
                  nullable: true
                  default: ""
                streetAddress:
                  type: string
                  nullable: true
                  maxLength: 100
                  default: ""
                city:
                  type: string
                  nullable: true
                  maxLength: 50
                  default: ""
                state:
                  type: string
                  nullable: true
                  maxLength: 50
                  default: ""
                zip:
                  type: string
                  nullable: true
                  maxLength: 10
                  default: ""
                dateOfBirth:
                  type: string
                  nullable: true
                  default: ""
          required:
            - id
            - firstName
            - lastName
      required:
        - id
        - teamSeasonId
        - contact
      description: Schema for a manager of a team for a given season
    CreateTeamManager:
      type: object
      properties:
        contact:
          type: object
          properties:
            id:
              type: string
              pattern: ^d+$
          required:
            - id
      required:
        - contact
      description: Schema for creating a manager
    CreateContact:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
        lastName:
          type: string
          minLength: 1
          maxLength: 50
        middleName:
          type: string
          maxLength: 50
        email:
          type: string
          maxLength: 100
          format: email
        contactDetails:
          type: object
          properties:
            phone1:
              type: string
              nullable: true
              default: ""
            phone2:
              type: string
              nullable: true
              default: ""
            phone3:
              type: string
              nullable: true
              default: ""
            streetAddress:
              type: string
              nullable: true
              maxLength: 100
              default: ""
            city:
              type: string
              nullable: true
              maxLength: 50
              default: ""
            state:
              type: string
              nullable: true
              maxLength: 50
              default: ""
            zip:
              type: string
              nullable: true
              maxLength: 10
              default: ""
            dateOfBirth:
              type: string
              nullable: true
              default: ""
        photo:
          type: string
          format: binary
          description: Contact photo file
      required:
        - firstName
        - lastName
    Account:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        accountLogoUrl:
          type: string
        configuration:
          type: object
          properties:
            accountType:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
              required:
                - id
                - name
            firstYear:
              type: integer
              nullable: true
            timezoneId:
              type: string
              nullable: true
            affiliation:
              type: object
              nullable: true
              properties:
                id:
                  type: string
                name:
                  type: string
                url:
                  type: string
                  nullable: true
              required:
                - id
                - name
        urls:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              url:
                type: string
                minLength: 1
            required:
              - id
              - url
          default: []
        accountOwner:
          type: object
          properties:
            user:
              type: object
              properties:
                id:
                  type: string
                userName:
                  type: string
                  maxLength: 100
                  format: email
                token:
                  type: string
                contact:
                  type: object
                  properties:
                    id:
                      type: string
                      pattern: ^d+$
                    firstName:
                      type: string
                      minLength: 1
                      maxLength: 50
                    lastName:
                      type: string
                      minLength: 1
                      maxLength: 50
                    middleName:
                      type: string
                      maxLength: 50
                    email:
                      type: string
                      maxLength: 100
                      format: email
                    userId:
                      type: string
                      maxLength: 50
                    photoUrl:
                      type: string
                      format: uri
                    contactDetails:
                      type: object
                      properties:
                        phone1:
                          type: string
                          nullable: true
                          default: ""
                        phone2:
                          type: string
                          nullable: true
                          default: ""
                        phone3:
                          type: string
                          nullable: true
                          default: ""
                        streetAddress:
                          type: string
                          nullable: true
                          maxLength: 100
                          default: ""
                        city:
                          type: string
                          nullable: true
                          maxLength: 50
                          default: ""
                        state:
                          type: string
                          nullable: true
                          maxLength: 50
                          default: ""
                        zip:
                          type: string
                          nullable: true
                          maxLength: 10
                          default: ""
                        dateOfBirth:
                          type: string
                          nullable: true
                          default: ""
                  required:
                    - id
                    - firstName
                    - lastName
              required:
                - id
                - userName
            contact:
              type: object
              properties:
                id:
                  type: string
                  pattern: ^d+$
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 50
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 50
                middleName:
                  type: string
                  maxLength: 50
              required:
                - id
                - firstName
                - lastName
        socials:
          type: object
          properties:
            twitterAccountName:
              type: string
            facebookFanPage:
              type: string
            youtubeUserId:
              type: string
              nullable: true
            defaultVideo:
              type: string
              nullable: true
            autoPlayVideo:
              type: boolean
              default: false
      required:
        - id
        - name
        - accountLogoUrl
    AccountSearchQuery:
      type: object
      properties:
        q:
          type: string
          minLength: 1
          maxLength: 100
      required:
        - q
    AccountDomainLookupHeaders:
      type: object
      properties:
        host:
          type: string
          minLength: 1
      required:
        - host
    AccountWithSeasons:
      type: object
      properties:
        account:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            accountLogoUrl:
              type: string
            configuration:
              type: object
              properties:
                accountType:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                  required:
                    - id
                    - name
                firstYear:
                  type: integer
                  nullable: true
                timezoneId:
                  type: string
                  nullable: true
                affiliation:
                  type: object
                  nullable: true
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    url:
                      type: string
                      nullable: true
                  required:
                    - id
                    - name
            urls:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  url:
                    type: string
                    minLength: 1
                required:
                  - id
                  - url
              default: []
            accountOwner:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    id:
                      type: string
                    userName:
                      type: string
                      maxLength: 100
                      format: email
                    token:
                      type: string
                    contact:
                      type: object
                      properties:
                        id:
                          type: string
                          pattern: ^d+$
                        firstName:
                          type: string
                          minLength: 1
                          maxLength: 50
                        lastName:
                          type: string
                          minLength: 1
                          maxLength: 50
                        middleName:
                          type: string
                          maxLength: 50
                        email:
                          type: string
                          maxLength: 100
                          format: email
                        userId:
                          type: string
                          maxLength: 50
                        photoUrl:
                          type: string
                          format: uri
                        contactDetails:
                          type: object
                          properties:
                            phone1:
                              type: string
                              nullable: true
                              default: ""
                            phone2:
                              type: string
                              nullable: true
                              default: ""
                            phone3:
                              type: string
                              nullable: true
                              default: ""
                            streetAddress:
                              type: string
                              nullable: true
                              maxLength: 100
                              default: ""
                            city:
                              type: string
                              nullable: true
                              maxLength: 50
                              default: ""
                            state:
                              type: string
                              nullable: true
                              maxLength: 50
                              default: ""
                            zip:
                              type: string
                              nullable: true
                              maxLength: 10
                              default: ""
                            dateOfBirth:
                              type: string
                              nullable: true
                              default: ""
                      required:
                        - id
                        - firstName
                        - lastName
                  required:
                    - id
                    - userName
                contact:
                  type: object
                  properties:
                    id:
                      type: string
                      pattern: ^d+$
                    firstName:
                      type: string
                      minLength: 1
                      maxLength: 50
                    lastName:
                      type: string
                      minLength: 1
                      maxLength: 50
                    middleName:
                      type: string
                      maxLength: 50
                  required:
                    - id
                    - firstName
                    - lastName
            socials:
              type: object
              properties:
                twitterAccountName:
                  type: string
                facebookFanPage:
                  type: string
                youtubeUserId:
                  type: string
                  nullable: true
                defaultVideo:
                  type: string
                  nullable: true
                autoPlayVideo:
                  type: boolean
                  default: false
          required:
            - id
            - name
            - accountLogoUrl
        currentSeason:
          type: object
          nullable: true
          properties:
            id:
              type: string
            name:
              type: string
          required:
            - id
            - name
        seasons:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              isCurrent:
                type: boolean
            required:
              - id
              - name
              - isCurrent
      required:
        - account
        - currentSeason
        - seasons
    AccountDetailsQuery:
      type: object
      properties:
        includeCurrentSeason:
          type: boolean
          nullable: true
          default: false
    CreateAccount:
      type: object
      properties:
        name:
          type: string
        accountLogoUrl:
          type: string
        configuration:
          type: object
          properties:
            accountType:
              type: object
              properties:
                id:
                  type: string
                name:
                  type: string
              required:
                - id
                - name
            firstYear:
              type: integer
              nullable: true
            timezoneId:
              type: string
              nullable: true
            affiliation:
              type: object
              nullable: true
              properties:
                id:
                  type: string
                name:
                  type: string
                url:
                  type: string
                  nullable: true
              required:
                - id
                - name
        urls:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              url:
                type: string
                minLength: 1
            required:
              - url
          default: []
        socials:
          type: object
          properties:
            twitterAccountName:
              type: string
            facebookFanPage:
              type: string
            youtubeUserId:
              type: string
              nullable: true
            defaultVideo:
              type: string
              nullable: true
            autoPlayVideo:
              type: boolean
              default: false
      required:
        - name
        - accountLogoUrl
    AccountName:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
    AccountHeader:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        accountLogoUrl:
          type: string
      required:
        - id
        - name
        - accountLogoUrl
    AccountAffiliation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        url:
          type: string
          nullable: true
      required:
        - id
        - name
    PlayersWantedClassified:
      type: object
      properties:
        id:
          type: string
        accountId:
          type: string
        dateCreated:
          type: string
          nullable: true
        createdByContactId:
          type: string
        teamEventName:
          type: string
        description:
          type: string
        positionsNeeded:
          type: string
        creator:
          type: object
          properties:
            id:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            photoUrl:
              type: string
          required:
            - id
            - firstName
            - lastName
            - photoUrl
        account:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
          required:
            - id
            - name
      required:
        - id
        - accountId
        - dateCreated
        - createdByContactId
        - teamEventName
        - description
        - positionsNeeded
        - creator
        - account
      title: PlayersWantedClassified
      description: Players Wanted classified listing
    PlayersWantedClassifiedPaged:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              accountId:
                type: string
              dateCreated:
                type: string
                nullable: true
              createdByContactId:
                type: string
              teamEventName:
                type: string
              description:
                type: string
              positionsNeeded:
                type: string
              creator:
                type: object
                properties:
                  id:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  photoUrl:
                    type: string
                required:
                  - id
                  - firstName
                  - lastName
                  - photoUrl
              account:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                required:
                  - id
                  - name
            required:
              - id
              - accountId
              - dateCreated
              - createdByContactId
              - teamEventName
              - description
              - positionsNeeded
              - creator
              - account
            title: PlayersWantedClassified
            description: Players Wanted classified listing
        total:
          type: number
        pagination:
          type: object
          properties:
            page:
              type: number
            limit:
              type: number
            hasNext:
              type: boolean
            hasPrev:
              type: boolean
            totalPages:
              type: number
          required:
            - page
            - limit
            - hasNext
            - hasPrev
            - totalPages
          title: PlayerClassifiedPagination
          description: Pagination metadata for player classified listings
        filters:
          type: object
          properties:
            type:
              type: string
              enum:
                - players
                - teams
                - all
            positions:
              type: array
              items:
                type: string
            experience:
              type: array
              items:
                type: string
            dateRange:
              type: object
              properties:
                from:
                  type: string
                  nullable: true
                to:
                  type: string
                  nullable: true
              required:
                - from
                - to
            searchQuery:
              type: string
              nullable: true
          required:
            - type
            - positions
            - experience
            - dateRange
            - searchQuery
          title: PlayerClassifiedFilters
          description: Filters applied to a player classified search request
      required:
        - data
        - total
        - pagination
        - filters
      title: PlayersWantedClassifiedList
      description: Paginated Players Wanted classified listings
    CreatePlayersWantedClassified:
      type: object
      properties:
        teamEventName:
          type: string
          minLength: 1
          maxLength: 50
        description:
          type: string
          minLength: 1
          maxLength: 2000
        positionsNeeded:
          type: string
          minLength: 1
          maxLength: 255
      required:
        - teamEventName
        - description
        - positionsNeeded
      title: CreatePlayersWantedClassifiedRequest
      description: Request body for creating a Players Wanted classified
    PlayerClassifiedSearchQuery:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          default: 1
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
        sortBy:
          type: string
          enum:
            - dateCreated
            - relevance
          default: dateCreated
        sortOrder:
          type: string
          enum:
            - asc
            - desc
          default: desc
        searchQuery:
          type: string
          maxLength: 200
      title: PlayerClassifiedSearchQuery
      description: Query parameters used to paginate and filter player classified listings
    TeamsWantedPublicClassifiedPaged:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              accountId:
                type: string
              dateCreated:
                type: string
                nullable: true
              name:
                type: string
              experience:
                type: string
              positionsPlayed:
                type: string
              age:
                type: number
                nullable: true
              account:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                required:
                  - id
                  - name
            required:
              - id
              - accountId
              - dateCreated
              - name
              - experience
              - positionsPlayed
              - age
              - account
            title: TeamsWantedPublicClassified
            description: Teams Wanted classified listing for public display without contact
              information
        total:
          type: number
        pagination:
          type: object
          properties:
            page:
              type: number
            limit:
              type: number
            hasNext:
              type: boolean
            hasPrev:
              type: boolean
            totalPages:
              type: number
          required:
            - page
            - limit
            - hasNext
            - hasPrev
            - totalPages
          title: PlayerClassifiedPagination
          description: Pagination metadata for player classified listings
        filters:
          type: object
          properties:
            type:
              type: string
              enum:
                - players
                - teams
                - all
            positions:
              type: array
              items:
                type: string
            experience:
              type: array
              items:
                type: string
            dateRange:
              type: object
              properties:
                from:
                  type: string
                  nullable: true
                to:
                  type: string
                  nullable: true
              required:
                - from
                - to
            searchQuery:
              type: string
              nullable: true
          required:
            - type
            - positions
            - experience
            - dateRange
            - searchQuery
          title: PlayerClassifiedFilters
          description: Filters applied to a player classified search request
      required:
        - data
        - total
        - pagination
        - filters
      title: TeamsWantedPublicClassifiedPaged
      description: Paginated Teams Wanted classified listings for public display
    TeamsWantedOwnerClassified:
      type: object
      properties:
        id:
          type: string
        accountId:
          type: string
        dateCreated:
          type: string
          nullable: true
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        experience:
          type: string
        positionsPlayed:
          type: string
        birthDate:
          type: string
          nullable: true
        account:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
          required:
            - id
            - name
      required:
        - id
        - accountId
        - dateCreated
        - name
        - email
        - phone
        - experience
        - positionsPlayed
        - birthDate
        - account
      title: TeamsWantedOwnerClassified
      description: Teams Wanted classified listing for the owner including contact
        information
    CreateTeamsWantedClassified:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        email:
          type: string
          maxLength: 320
          format: email
        phone:
          type: string
          minLength: 1
          maxLength: 50
        experience:
          type: string
          minLength: 1
          maxLength: 255
        positionsPlayed:
          type: string
          minLength: 1
          maxLength: 255
        birthDate:
          type: string
          default: ""
      required:
        - name
        - email
        - phone
        - experience
        - positionsPlayed
      title: CreateTeamsWantedClassifiedRequest
      description: Request body for creating a Teams Wanted classified
    UpdatePlayersWantedClassified:
      type: object
      properties:
        teamEventName:
          type: string
          minLength: 1
          maxLength: 50
        description:
          type: string
          minLength: 1
          maxLength: 2000
        positionsNeeded:
          type: string
          minLength: 1
          maxLength: 255
      title: UpdatePlayersWantedClassifiedRequest
      description: Request body for updating a Players Wanted classified
    UpdateTeamsWantedClassified:
      type: object
      properties:
        accessCode:
          type: string
          minLength: 10
          maxLength: 1000
        name:
          type: string
          minLength: 1
          maxLength: 50
        email:
          type: string
          maxLength: 320
          format: email
        phone:
          type: string
          minLength: 1
          maxLength: 50
        experience:
          type: string
          minLength: 1
          maxLength: 255
        positionsPlayed:
          type: string
          minLength: 1
          maxLength: 255
        birthDate:
          type: string
      title: UpdateTeamsWantedClassifiedRequest
      description: Request body for updating a Teams Wanted classified
    TeamsWantedAccessCode:
      type: object
      properties:
        accessCode:
          type: string
          minLength: 10
          maxLength: 1000
      required:
        - accessCode
      title: TeamsWantedAccessCode
      description: Access code used to authenticate Teams Wanted classified actions
    TeamsWantedContactInfo:
      type: object
      properties:
        email:
          type: string
        phone:
          type: string
        birthDate:
          type: string
          nullable: true
      required:
        - email
        - phone
        - birthDate
      title: TeamsWantedContactInfo
      description: Contact information for a Teams Wanted classified
    TeamsWantedContactQuery:
      type: object
      properties:
        accessCode:
          type: string
          minLength: 10
          maxLength: 1000
      title: TeamsWantedContactQuery
      description: Query parameters used to request Teams Wanted contact information
    ContactPlayersWantedCreator:
      type: object
      properties:
        senderName:
          type: string
          minLength: 1
          maxLength: 100
        senderEmail:
          type: string
          maxLength: 320
          format: email
        message:
          type: string
          minLength: 1
          maxLength: 5000
      required:
        - senderName
        - senderEmail
        - message
      title: ContactPlayersWantedCreatorRequest
      description: Request body for contacting a Players Wanted classified creator
    BaseballPosition:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        category:
          type: string
          enum:
            - pitching
            - infield
            - outfield
            - catching
            - utility
        abbreviation:
          type: string
      required:
        - id
        - name
        - category
        - abbreviation
      title: BaseballPosition
      description: Baseball position metadata used in player classifieds
    ExperienceLevel:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        yearsRequired:
          type: number
        skillLevel:
          type: string
          enum:
            - beginner
            - intermediate
            - advanced
            - expert
      required:
        - id
        - name
        - description
        - yearsRequired
        - skillLevel
      title: ExperienceLevel
      description: Experience level metadata used in player classifieds
    ValidationError:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: number
          enum:
            - 400
        isRetryable:
          type: boolean
          enum:
            - false
      required:
        - message
        - statusCode
        - isRetryable
      description: Validation error (400)
      example:
        message: Validation failed
        statusCode: 400
        isRetryable: false
    AuthenticationError:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: number
          enum:
            - 401
        isRetryable:
          type: boolean
          enum:
            - false
      required:
        - message
        - statusCode
        - isRetryable
      description: Authentication error (401)
      example:
        message: Authentication required
        statusCode: 401
        isRetryable: false
    AuthorizationError:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: number
          enum:
            - 403
        isRetryable:
          type: boolean
          enum:
            - false
      required:
        - message
        - statusCode
        - isRetryable
      description: Authorization error (403)
      example:
        message: Access denied
        statusCode: 403
        isRetryable: false
    NotFoundError:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: number
          enum:
            - 404
        isRetryable:
          type: boolean
          enum:
            - false
      required:
        - message
        - statusCode
        - isRetryable
      description: Resource not found error (404)
      example:
        message: Resource not found
        statusCode: 404
        isRetryable: false
    ConflictError:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: number
          enum:
            - 409
        isRetryable:
          type: boolean
          enum:
            - false
      required:
        - message
        - statusCode
        - isRetryable
      description: Resource conflict error (409)
      example:
        message: Resource conflict
        statusCode: 409
        isRetryable: false
    InternalServerError:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: number
          enum:
            - 500
        isRetryable:
          type: boolean
          enum:
            - true
      required:
        - message
        - statusCode
        - isRetryable
      description: Internal server error (500)
      example:
        message: Internal server error
        statusCode: 500
        isRetryable: true
  parameters: {}
paths:
  /api/accounts/search:
    get:
      operationId: searchAccounts
      summary: Search accounts
      description: Public search for accounts by name or type
      tags:
        - Accounts
      parameters:
        - schema:
            type: string
            minLength: 1
            maxLength: 100
          required: true
          name: q
          in: query
      responses:
        "200":
          description: Accounts matching the search query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/by-domain:
    get:
      operationId: getAccountByDomain
      summary: Get account by domain
      description: Public lookup of an account by inbound request host domain.
      tags:
        - Accounts
      parameters:
        - schema:
            type: string
            minLength: 1
          required: true
          name: host
          in: header
      responses:
        "200":
          description: Account matching the provided domain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "404":
          description: Account not found for the provided domain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}:
    get:
      operationId: getAccountById
      summary: Get account by ID
      description: Retrieve account details and optional current season information.
      tags:
        - Accounts
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - schema:
            type: boolean
            nullable: true
            default: false
          required: false
          name: includeCurrentSeason
          in: query
      responses:
        "200":
          description: Account details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountWithSeasons"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    put:
      operationId: updateAccount
      summary: Update account
      description: Update account details. Account administrators or global
        administrators only.
      tags:
        - Accounts
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                accountLogoUrl:
                  type: string
                configuration:
                  type: object
                  properties:
                    accountType:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                      required:
                        - id
                        - name
                    firstYear:
                      type: integer
                      nullable: true
                    timezoneId:
                      type: string
                      nullable: true
                    affiliation:
                      type: object
                      nullable: true
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        url:
                          type: string
                          nullable: true
                      required:
                        - id
                        - name
                urls:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                      url:
                        type: string
                        minLength: 1
                    required:
                      - url
                  default: []
                socials:
                  type: object
                  properties:
                    twitterAccountName:
                      type: string
                    facebookFanPage:
                      type: string
                    youtubeUserId:
                      type: string
                      nullable: true
                    defaultVideo:
                      type: string
                      nullable: true
                    autoPlayVideo:
                      type: boolean
                      default: false
      responses:
        "200":
          description: Account updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    delete:
      operationId: deleteAccount
      summary: Delete account
      description: Delete an account. Administrator access required.
      tags:
        - Accounts
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "204":
          description: Account deleted
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts:
    post:
      operationId: createAccount
      summary: Create account
      description: Create a new account. Administrator access required.
      tags:
        - Accounts
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAccount"
      responses:
        "201":
          description: Account created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/name:
    get:
      operationId: getAccountName
      summary: Get account name
      description: Retrieve the display name for an account.
      tags:
        - Accounts
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "200":
          description: Account name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountName"
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/header:
    get:
      operationId: getAccountHeader
      summary: Get account header
      description: Retrieve account name and branding assets.
      tags:
        - Accounts
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "200":
          description: Account header information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountHeader"
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/types:
    get:
      operationId: getAccountTypes
      summary: List account types
      description: Retrieve the list of available account types.
      tags:
        - Accounts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Account types list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/affiliations:
    get:
      operationId: getAccountAffiliations
      summary: List account affiliations
      description: Retrieve the list of available account affiliations.
      tags:
        - Accounts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Account affiliations list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountAffiliation"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/my-accounts:
    get:
      operationId: getMyAccounts
      summary: Get the authenticated user's accounts
      description: Returns the accounts associated with the logged-in user via account
        membership.
      tags:
        - Accounts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Accounts accessible to the authenticated user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/managed:
    get:
      operationId: getManagedAccounts
      summary: Get accounts managed by the authenticated user
      description: Returns accounts where the user holds AccountAdmin privileges or is
        a global Administrator.
      tags:
        - Accounts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Accounts managed by the authenticated user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/contacts:
    post:
      description: Create a new contact
      operationId: createContact
      security:
        - bearerAuth: []
      tags:
        - Contacts
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 50
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 50
                middleName:
                  type: string
                  maxLength: 50
                email:
                  type: string
                  maxLength: 100
                  format: email
                contactDetails:
                  type: object
                  properties:
                    phone1:
                      type: string
                      nullable: true
                      default: ""
                    phone2:
                      type: string
                      nullable: true
                      default: ""
                    phone3:
                      type: string
                      nullable: true
                      default: ""
                    streetAddress:
                      type: string
                      nullable: true
                      maxLength: 100
                      default: ""
                    city:
                      type: string
                      nullable: true
                      maxLength: 50
                      default: ""
                    state:
                      type: string
                      nullable: true
                      maxLength: 50
                      default: ""
                    zip:
                      type: string
                      nullable: true
                      maxLength: 10
                      default: ""
                    dateOfBirth:
                      type: string
                      nullable: true
                      default: ""
                photo:
                  type: string
                  format: binary
                  description: Contact photo file
          multipart/form-data:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 50
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 50
                middleName:
                  type: string
                  maxLength: 50
                email:
                  type: string
                  maxLength: 100
                  format: email
                contactDetails:
                  type: object
                  properties:
                    phone1:
                      type: string
                      nullable: true
                      default: ""
                    phone2:
                      type: string
                      nullable: true
                      default: ""
                    phone3:
                      type: string
                      nullable: true
                      default: ""
                    streetAddress:
                      type: string
                      nullable: true
                      maxLength: 100
                      default: ""
                    city:
                      type: string
                      nullable: true
                      maxLength: 50
                      default: ""
                    state:
                      type: string
                      nullable: true
                      maxLength: 50
                      default: ""
                    zip:
                      type: string
                      nullable: true
                      maxLength: 10
                      default: ""
                    dateOfBirth:
                      type: string
                      nullable: true
                      default: ""
                photo:
                  type: string
                  format: binary
                  description: Contact photo file
            encoding:
              photo:
                contentType: image/*
      responses:
        "200":
          description: Contact created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied - Account admin required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Contact not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "409":
          description: Conflict error - e.g. duplicate email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/contacts/{contactId}:
    put:
      description: Update an account contact
      operationId: updateContact
      summary: Update Contact
      security:
        - bearerAuth: []
      tags:
        - Contacts
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: contactId
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 50
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 50
                middleName:
                  type: string
                  maxLength: 50
                email:
                  type: string
                  maxLength: 100
                  format: email
                contactDetails:
                  type: object
                  properties:
                    phone1:
                      type: string
                      nullable: true
                      default: ""
                    phone2:
                      type: string
                      nullable: true
                      default: ""
                    phone3:
                      type: string
                      nullable: true
                      default: ""
                    streetAddress:
                      type: string
                      nullable: true
                      maxLength: 100
                      default: ""
                    city:
                      type: string
                      nullable: true
                      maxLength: 50
                      default: ""
                    state:
                      type: string
                      nullable: true
                      maxLength: 50
                      default: ""
                    zip:
                      type: string
                      nullable: true
                      maxLength: 10
                      default: ""
                    dateOfBirth:
                      type: string
                      nullable: true
                      default: ""
                photo:
                  type: string
                  format: binary
                  description: Contact photo file
          multipart/form-data:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 50
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 50
                middleName:
                  type: string
                  maxLength: 50
                email:
                  type: string
                  maxLength: 100
                  format: email
                contactDetails:
                  type: object
                  properties:
                    phone1:
                      type: string
                      nullable: true
                      default: ""
                    phone2:
                      type: string
                      nullable: true
                      default: ""
                    phone3:
                      type: string
                      nullable: true
                      default: ""
                    streetAddress:
                      type: string
                      nullable: true
                      maxLength: 100
                      default: ""
                    city:
                      type: string
                      nullable: true
                      maxLength: 50
                      default: ""
                    state:
                      type: string
                      nullable: true
                      maxLength: 50
                      default: ""
                    zip:
                      type: string
                      nullable: true
                      maxLength: 10
                      default: ""
                    dateOfBirth:
                      type: string
                      nullable: true
                      default: ""
                photo:
                  type: string
                  format: binary
                  description: Contact photo file
            encoding:
              photo:
                contentType: image/*
      responses:
        "200":
          description: Contact updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contact"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied - Account admin required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Contact not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "409":
          description: Conflict error - e.g. duplicate email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/contacts/{contactId}/photo:
    delete:
      description: Delete a contact photo
      operationId: deleteContactPhoto
      security:
        - bearerAuth: []
      tags:
        - Contacts
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: contactId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "200":
          description: Contact photo deleted
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied - Account admin required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Contact not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/contacts/{contactId}/roster:
    get:
      description: Get a roster entry for a contact. This is information that is
        global to a player once they are on a team, it is not season specfic
      operationId: getContactRoster
      tags:
        - Contacts
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: contactId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "200":
          description: Roster entry found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RosterPlayer"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "404":
          description: Roster member or team not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/roster/{rosterMemberId}:
    put:
      description: Update a roster entry for a team season
      operationId: updateRosterMember
      summary: Update roster entry
      security:
        - bearerAuth: []
      tags:
        - Rosters
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: seasonId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: teamSeasonId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: rosterMemberId
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  pattern: ^d+$
                playerNumber:
                  type: number
                  minimum: 0
                  maximum: 99
                inactive:
                  type: boolean
                  default: false
                submittedWaiver:
                  type: boolean
                dateAdded:
                  type: string
                  nullable: true
                  format: date
                  default: null
                player:
                  type: object
                  properties:
                    id:
                      type: string
                      pattern: ^d+$
                    submittedDriversLicense:
                      type: boolean
                      default: false
                    firstYear:
                      type: number
                      minimum: 1900
                      maximum: 2025
                    contact:
                      type: object
                      properties:
                        id:
                          type: string
                          pattern: ^d+$
                        firstName:
                          type: string
                          minLength: 1
                          maxLength: 50
                        lastName:
                          type: string
                          minLength: 1
                          maxLength: 50
                        middleName:
                          type: string
                          maxLength: 50
                        email:
                          type: string
                          maxLength: 100
                          format: email
                        userId:
                          type: string
                          maxLength: 50
                        photoUrl:
                          type: string
                          format: uri
                        contactDetails:
                          type: object
                          properties:
                            phone1:
                              type: string
                              nullable: true
                              default: ""
                            phone2:
                              type: string
                              nullable: true
                              default: ""
                            phone3:
                              type: string
                              nullable: true
                              default: ""
                            streetAddress:
                              type: string
                              nullable: true
                              maxLength: 100
                              default: ""
                            city:
                              type: string
                              nullable: true
                              maxLength: 50
                              default: ""
                            state:
                              type: string
                              nullable: true
                              maxLength: 50
                              default: ""
                            zip:
                              type: string
                              nullable: true
                              maxLength: 10
                              default: ""
                            dateOfBirth:
                              type: string
                              nullable: true
                              default: ""
                      required:
                        - id
                        - firstName
                        - lastName
                  required:
                    - id
                    - firstYear
                    - contact
                  description: Schema for a player who is or was on a team roster. This contains
                    details that only ever need to be supplied once
      responses:
        "200":
          description: Roster entry updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RosterMember"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied - Account admin required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Roster member or team not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    delete:
      description: Delete a player from the team for the given season. This is a
        permanent action and cannot be undone. Use releasePlayer if you want to
        keep the player stats for the given team season.
      operationId: deletePlayer
      security:
        - bearerAuth: []
      tags:
        - Roster
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: seasonId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: teamSeasonId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: rosterMemberId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "200":
          description: Player deleted
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied - Account admin required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Player not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/roster:
    post:
      description: Sign a player to the team roster
      operationId: signPlayer
      summary: Sing player to roster
      security:
        - bearerAuth: []
      tags:
        - Roster
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: seasonId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: teamSeasonId
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignRosterMember"
      responses:
        "201":
          description: Player signed to roster
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RosterMember"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied - Account admin required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Contact not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/roster/{rosterMemberId}/release:
    put:
      description: Release a player from the team for the given season
      operationId: releasePlayer
      security:
        - bearerAuth: []
      tags:
        - Roster
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: seasonId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: teamSeasonId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: rosterMemberId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "200":
          description: Player released
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RosterMember"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied - Account admin required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Player not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/roster/{rosterMemberId}/activate:
    put:
      description: Activate a released player from the team for the given season
      operationId: activatePlayer
      security:
        - bearerAuth: []
      tags:
        - Roster
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: seasonId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: teamSeasonId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: rosterMemberId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "200":
          description: Player activated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RosterMember"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied - Account admin required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Player not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/managers:
    post:
      description: Add a manager to the team for the given season
      operationId: addManager
      security:
        - bearerAuth: []
      tags:
        - Managers
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: seasonId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: teamSeasonId
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTeamManager"
      responses:
        "200":
          description: Manager added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamManager"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied - Account admin required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Manager not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/managers/{managerId}:
    delete:
      description: Remove a manager from the team for the given season
      operationId: removeManager
      security:
        - bearerAuth: []
      tags:
        - Managers
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: seasonId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: teamSeasonId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: managerId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "200":
          description: Manager removed
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied - Account admin required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Manager not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/player-classifieds/players-wanted:
    post:
      operationId: createPlayersWantedClassified
      summary: Create Players Wanted classified
      description: Create a Players Wanted classified for an authenticated account member.
      tags:
        - Player Classifieds
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePlayersWantedClassified"
      responses:
        "201":
          description: Players Wanted classified created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayersWantedClassified"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Account or contact not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    get:
      operationId: listPlayersWantedClassifieds
      summary: List Players Wanted classifieds
      description: Retrieve paginated Players Wanted classifieds for the specified account.
      tags:
        - Player Classifieds
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          name: page
          in: query
        - schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          required: false
          name: limit
          in: query
        - schema:
            type: string
            enum:
              - dateCreated
              - relevance
            default: dateCreated
          required: false
          name: sortBy
          in: query
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          required: false
          name: sortOrder
          in: query
        - schema:
            type: string
            maxLength: 200
          required: false
          name: searchQuery
          in: query
      responses:
        "200":
          description: Players Wanted classifieds
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayersWantedClassifiedPaged"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/player-classifieds/teams-wanted:
    post:
      operationId: createTeamsWantedClassified
      summary: Create Teams Wanted classified
      description: Create a Teams Wanted classified for a public user using an access
        code workflow.
      tags:
        - Player Classifieds
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTeamsWantedClassified"
      responses:
        "201":
          description: Teams Wanted classified created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamsWantedOwnerClassified"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    get:
      operationId: listTeamsWantedClassifieds
      summary: List Teams Wanted classifieds
      description: Retrieve paginated Teams Wanted classifieds for authenticated
        account members.
      tags:
        - Player Classifieds
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          name: page
          in: query
        - schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          required: false
          name: limit
          in: query
        - schema:
            type: string
            enum:
              - dateCreated
              - relevance
            default: dateCreated
          required: false
          name: sortBy
          in: query
        - schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          required: false
          name: sortOrder
          in: query
        - schema:
            type: string
            maxLength: 200
          required: false
          name: searchQuery
          in: query
      responses:
        "200":
          description: Teams Wanted classifieds
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamsWantedPublicClassifiedPaged"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/player-classifieds/teams-wanted/{classifiedId}/verify:
    post:
      operationId: verifyTeamsWantedAccess
      summary: Verify Teams Wanted access code
      description: Verify an access code and return the Teams Wanted classified owner view.
      tags:
        - Player Classifieds
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: classifiedId
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamsWantedAccessCode"
      responses:
        "200":
          description: Verified Teams Wanted classified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamsWantedOwnerClassified"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "404":
          description: Classified not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/player-classifieds/teams-wanted/access-code:
    post:
      operationId: getTeamsWantedByAccessCode
      summary: Get Teams Wanted classified by access code
      description: Retrieve a Teams Wanted classified owner view using an access code.
      tags:
        - Player Classifieds
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamsWantedAccessCode"
      responses:
        "200":
          description: Teams Wanted classified owner view
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamsWantedOwnerClassified"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "404":
          description: Classified not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/player-classifieds/teams-wanted/{classifiedId}:
    put:
      operationId: updateTeamsWantedClassified
      summary: Update Teams Wanted classified
      description: Update a Teams Wanted classified using either account
        authentication or access code.
      tags:
        - Player Classifieds
      security:
        - bearerAuth: []
        - {}
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: classifiedId
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTeamsWantedClassified"
      responses:
        "200":
          description: Updated Teams Wanted classified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamsWantedOwnerClassified"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "404":
          description: Classified not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    delete:
      operationId: deleteTeamsWantedClassified
      summary: Delete Teams Wanted classified
      description: Delete a Teams Wanted classified using either authentication or
        access code.
      tags:
        - Player Classifieds
      security:
        - bearerAuth: []
        - {}
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: classifiedId
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamsWantedAccessCode"
      responses:
        "204":
          description: Teams Wanted classified deleted
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "404":
          description: Classified not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/player-classifieds/players-wanted/{classifiedId}:
    put:
      operationId: updatePlayersWantedClassified
      summary: Update Players Wanted classified
      description: Update a Players Wanted classified for an authenticated account member.
      tags:
        - Player Classifieds
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: classifiedId
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePlayersWantedClassified"
      responses:
        "200":
          description: Updated Players Wanted classified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayersWantedClassified"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Classified not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    delete:
      operationId: deletePlayersWantedClassified
      summary: Delete Players Wanted classified
      description: Delete a Players Wanted classified for an authenticated account member.
      tags:
        - Player Classifieds
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: classifiedId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "204":
          description: Players Wanted classified deleted
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationError"
        "404":
          description: Classified not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/player-classifieds/teams-wanted/{classifiedId}/contact:
    get:
      operationId: getTeamsWantedContactInfo
      summary: Get Teams Wanted contact info
      description: Retrieve Teams Wanted classified contact information using either
        account authentication or a valid access code.
      tags:
        - Player Classifieds
      security:
        - bearerAuth: []
        - {}
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: classifiedId
          in: path
          required: true
          schema:
            type: string
            format: number
        - schema:
            type: string
            minLength: 10
            maxLength: 1000
          required: false
          name: accessCode
          in: query
      responses:
        "200":
          description: Teams Wanted contact information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamsWantedContactInfo"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationError"
        "404":
          description: Classified not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/player-classifieds/players-wanted/{classifiedId}/contact:
    post:
      operationId: contactPlayersWantedCreator
      summary: Contact Players Wanted creator
      description: Send a message to the creator of a Players Wanted classified.
      tags:
        - Player Classifieds
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
        - name: classifiedId
          in: path
          required: true
          schema:
            type: string
            format: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactPlayersWantedCreator"
      responses:
        "204":
          description: Contact request sent
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "404":
          description: Classified not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/player-classifieds/positions:
    get:
      operationId: listPlayerClassifiedPositions
      summary: List baseball positions
      description: Retrieve supported baseball positions for classifieds.
      tags:
        - Player Classifieds
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "200":
          description: Baseball positions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseballPosition"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/accounts/{accountId}/player-classifieds/experience-levels:
    get:
      operationId: listPlayerClassifiedExperienceLevels
      summary: List experience levels
      description: Retrieve supported experience levels for classifieds.
      tags:
        - Player Classifieds
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            type: string
            format: number
      responses:
        "200":
          description: Experience levels
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExperienceLevel"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
