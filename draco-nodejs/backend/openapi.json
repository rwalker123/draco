{
  "openapi": "3.0.0",
  "info": {
    "title": "Draco API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://localhost:3001"
    }
  ],
  "components": {
    "schemas": {
      "SeasonStandingsResponse": {
        "oneOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandingsLeague"
            }
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandingsTeam"
            }
          }
        ]
      },
      "RosterMember": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "playerNumber": {
            "type": "number",
            "minimum": 0,
            "maximum": 99
          },
          "inactive": {
            "type": "boolean",
            "default": false
          },
          "submittedWaiver": {
            "type": "boolean"
          },
          "dateAdded": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "default": null
          },
          "player": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "submittedDriversLicense": {
                "type": "boolean",
                "default": false
              },
              "firstYear": {
                "type": "number",
                "minimum": 1900,
                "maximum": 2025
              },
              "contact": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "pattern": "^d+$"
                  },
                  "firstName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "lastName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "middleName": {
                    "type": "string",
                    "maxLength": 50
                  },
                  "email": {
                    "type": "string",
                    "maxLength": 100,
                    "format": "email"
                  },
                  "userId": {
                    "type": "string",
                    "maxLength": 50
                  },
                  "photoUrl": {
                    "type": "string",
                    "format": "uri"
                  },
                  "contactDetails": {
                    "type": "object",
                    "properties": {
                      "phone1": {
                        "type": "string",
                        "nullable": true,
                        "default": ""
                      },
                      "phone2": {
                        "type": "string",
                        "nullable": true,
                        "default": ""
                      },
                      "phone3": {
                        "type": "string",
                        "nullable": true,
                        "default": ""
                      },
                      "streetAddress": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 100,
                        "default": ""
                      },
                      "city": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 50,
                        "default": ""
                      },
                      "state": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 50,
                        "default": ""
                      },
                      "zip": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 10,
                        "default": ""
                      },
                      "dateOfBirth": {
                        "type": "string",
                        "nullable": true,
                        "default": ""
                      }
                    }
                  }
                },
                "required": [
                  "id",
                  "firstName",
                  "lastName"
                ]
              }
            },
            "required": [
              "id",
              "firstYear",
              "contact"
            ],
            "description": "Schema for a player who is or was on a team roster. This contains details that only ever need to be supplied once"
          }
        },
        "required": [
          "id",
          "player"
        ],
        "description": "Schema for a roster member including player details"
      },
      "RosterPlayer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "submittedDriversLicense": {
            "type": "boolean",
            "default": false
          },
          "firstYear": {
            "type": "number",
            "minimum": 1900,
            "maximum": 2025
          },
          "contact": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "firstName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "lastName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "middleName": {
                "type": "string",
                "maxLength": 50
              },
              "email": {
                "type": "string",
                "maxLength": 100,
                "format": "email"
              },
              "userId": {
                "type": "string",
                "maxLength": 50
              },
              "photoUrl": {
                "type": "string",
                "format": "uri"
              },
              "contactDetails": {
                "type": "object",
                "properties": {
                  "phone1": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "phone2": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "phone3": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "streetAddress": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 100,
                    "default": ""
                  },
                  "city": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 50,
                    "default": ""
                  },
                  "state": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 50,
                    "default": ""
                  },
                  "zip": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 10,
                    "default": ""
                  },
                  "dateOfBirth": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  }
                }
              }
            },
            "required": [
              "id",
              "firstName",
              "lastName"
            ]
          }
        },
        "required": [
          "id",
          "firstYear",
          "contact"
        ],
        "description": "Schema for a player who is or was on a team roster. This contains details that only ever need to be supplied once"
      },
      "SignRosterMember": {
        "type": "object",
        "properties": {
          "playerNumber": {
            "type": "number",
            "minimum": 0,
            "maximum": 99
          },
          "submittedWaiver": {
            "type": "boolean"
          },
          "player": {
            "type": "object",
            "properties": {
              "submittedDriversLicense": {
                "type": "boolean"
              },
              "firstYear": {
                "type": "number",
                "minimum": 1900,
                "maximum": 2025
              },
              "contact": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "firstName": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                      },
                      "lastName": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                      },
                      "middleName": {
                        "type": "string",
                        "maxLength": 50
                      },
                      "email": {
                        "type": "string",
                        "maxLength": 100,
                        "format": "email"
                      },
                      "contactDetails": {
                        "type": "object",
                        "properties": {
                          "phone1": {
                            "type": "string",
                            "nullable": true,
                            "default": ""
                          },
                          "phone2": {
                            "type": "string",
                            "nullable": true,
                            "default": ""
                          },
                          "phone3": {
                            "type": "string",
                            "nullable": true,
                            "default": ""
                          },
                          "streetAddress": {
                            "type": "string",
                            "nullable": true,
                            "maxLength": 100,
                            "default": ""
                          },
                          "city": {
                            "type": "string",
                            "nullable": true,
                            "maxLength": 50,
                            "default": ""
                          },
                          "state": {
                            "type": "string",
                            "nullable": true,
                            "maxLength": 50,
                            "default": ""
                          },
                          "zip": {
                            "type": "string",
                            "nullable": true,
                            "maxLength": 10,
                            "default": ""
                          },
                          "dateOfBirth": {
                            "type": "string",
                            "nullable": true,
                            "default": ""
                          }
                        }
                      },
                      "photo": {
                        "type": "string",
                        "format": "binary",
                        "description": "Contact photo file"
                      }
                    },
                    "required": [
                      "firstName",
                      "lastName"
                    ]
                  }
                ]
              }
            },
            "required": [
              "submittedDriversLicense",
              "firstYear",
              "contact"
            ]
          }
        },
        "required": [
          "player"
        ],
        "description": "Schema for signing a contact to a roster and providing player details"
      },
      "UpdateRosterMember": {
        "type": "object",
        "properties": {
          "playerNumber": {
            "type": "number",
            "minimum": 0,
            "maximum": 99
          },
          "submittedWaiver": {
            "type": "boolean"
          },
          "player": {
            "type": "object",
            "properties": {
              "submittedDriversLicense": {
                "type": "boolean"
              },
              "firstYear": {
                "type": "number",
                "minimum": 1900,
                "maximum": 2025
              }
            }
          }
        },
        "additionalProperties": false,
        "description": "Schema for updating a roster member"
      },
      "Contact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "firstName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "lastName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "middleName": {
            "type": "string",
            "maxLength": 50
          },
          "email": {
            "type": "string",
            "maxLength": 100,
            "format": "email"
          },
          "userId": {
            "type": "string",
            "maxLength": 50
          },
          "photoUrl": {
            "type": "string",
            "format": "uri"
          },
          "contactDetails": {
            "type": "object",
            "properties": {
              "phone1": {
                "type": "string",
                "nullable": true,
                "default": ""
              },
              "phone2": {
                "type": "string",
                "nullable": true,
                "default": ""
              },
              "phone3": {
                "type": "string",
                "nullable": true,
                "default": ""
              },
              "streetAddress": {
                "type": "string",
                "nullable": true,
                "maxLength": 100,
                "default": ""
              },
              "city": {
                "type": "string",
                "nullable": true,
                "maxLength": 50,
                "default": ""
              },
              "state": {
                "type": "string",
                "nullable": true,
                "maxLength": 50,
                "default": ""
              },
              "zip": {
                "type": "string",
                "nullable": true,
                "maxLength": 10,
                "default": ""
              },
              "dateOfBirth": {
                "type": "string",
                "nullable": true,
                "default": ""
              }
            }
          },
          "contactroles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "roleId": {
                  "type": "string",
                  "maxLength": 50
                },
                "roleName": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 100
                },
                "roleData": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "contextName": {
                  "type": "string",
                  "maxLength": 50
                },
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                }
              },
              "required": [
                "roleId",
                "roleData",
                "id"
              ]
            }
          },
          "creatoraccountid": {
            "type": "string",
            "pattern": "^d+$"
          }
        },
        "required": [
          "id",
          "firstName",
          "lastName"
        ]
      },
      "BaseContact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "firstName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "lastName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "middleName": {
            "type": "string",
            "maxLength": 50
          },
          "email": {
            "type": "string",
            "maxLength": 100,
            "format": "email"
          },
          "userId": {
            "type": "string",
            "maxLength": 50
          },
          "photoUrl": {
            "type": "string",
            "format": "uri"
          },
          "contactDetails": {
            "type": "object",
            "properties": {
              "phone1": {
                "type": "string",
                "nullable": true,
                "default": ""
              },
              "phone2": {
                "type": "string",
                "nullable": true,
                "default": ""
              },
              "phone3": {
                "type": "string",
                "nullable": true,
                "default": ""
              },
              "streetAddress": {
                "type": "string",
                "nullable": true,
                "maxLength": 100,
                "default": ""
              },
              "city": {
                "type": "string",
                "nullable": true,
                "maxLength": 50,
                "default": ""
              },
              "state": {
                "type": "string",
                "nullable": true,
                "maxLength": 50,
                "default": ""
              },
              "zip": {
                "type": "string",
                "nullable": true,
                "maxLength": 10,
                "default": ""
              },
              "dateOfBirth": {
                "type": "string",
                "nullable": true,
                "default": ""
              }
            }
          }
        },
        "required": [
          "id",
          "firstName",
          "lastName"
        ]
      },
      "NamedContact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "firstName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "lastName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "middleName": {
            "type": "string",
            "maxLength": 50
          }
        },
        "required": [
          "id",
          "firstName",
          "lastName"
        ]
      },
      "ContactWithContactRoles": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "firstName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "lastName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "middleName": {
            "type": "string",
            "maxLength": 50
          },
          "email": {
            "type": "string",
            "maxLength": 100,
            "format": "email"
          },
          "userId": {
            "type": "string",
            "maxLength": 50
          },
          "photoUrl": {
            "type": "string",
            "format": "uri"
          },
          "contactDetails": {
            "type": "object",
            "properties": {
              "phone1": {
                "type": "string",
                "nullable": true,
                "default": ""
              },
              "phone2": {
                "type": "string",
                "nullable": true,
                "default": ""
              },
              "phone3": {
                "type": "string",
                "nullable": true,
                "default": ""
              },
              "streetAddress": {
                "type": "string",
                "nullable": true,
                "maxLength": 100,
                "default": ""
              },
              "city": {
                "type": "string",
                "nullable": true,
                "maxLength": 50,
                "default": ""
              },
              "state": {
                "type": "string",
                "nullable": true,
                "maxLength": 50,
                "default": ""
              },
              "zip": {
                "type": "string",
                "nullable": true,
                "maxLength": 10,
                "default": ""
              },
              "dateOfBirth": {
                "type": "string",
                "nullable": true,
                "default": ""
              }
            }
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "roleId": {
                  "type": "string",
                  "maxLength": 50
                },
                "roleName": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 100
                },
                "roleData": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "contextName": {
                  "type": "string",
                  "maxLength": 50
                },
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                }
              },
              "required": [
                "roleId",
                "roleData",
                "id"
              ]
            }
          }
        },
        "required": [
          "id",
          "firstName",
          "lastName",
          "roles"
        ]
      },
      "Field": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "shortName": {
            "type": "string",
            "maxLength": 5
          },
          "address": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "city": {
            "type": "string",
            "nullable": true,
            "maxLength": 25
          },
          "state": {
            "type": "string",
            "nullable": true,
            "maxLength": 25
          },
          "zip": {
            "type": "string",
            "nullable": true,
            "maxLength": 10
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "directions": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "rainoutNumber": {
            "type": "string",
            "nullable": true,
            "maxLength": 15
          },
          "latitude": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 25
              },
              {
                "nullable": true
              },
              {
                "nullable": true
              }
            ]
          },
          "longitude": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 25
              },
              {
                "nullable": true
              },
              {
                "nullable": true
              }
            ]
          }
        },
        "required": [
          "id",
          "name",
          "shortName"
        ]
      },
      "Fields": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 100
                },
                "shortName": {
                  "type": "string",
                  "maxLength": 5
                },
                "address": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 255
                },
                "city": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 25
                },
                "state": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 25
                },
                "zip": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 10
                },
                "comment": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 255
                },
                "directions": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 255
                },
                "rainoutNumber": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 15
                },
                "latitude": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 25
                    },
                    {
                      "nullable": true
                    },
                    {
                      "nullable": true
                    }
                  ]
                },
                "longitude": {
                  "anyOf": [
                    {
                      "type": "string",
                      "maxLength": 25
                    },
                    {
                      "nullable": true
                    },
                    {
                      "nullable": true
                    }
                  ]
                }
              },
              "required": [
                "id",
                "name",
                "shortName"
              ]
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "page": {
                "type": "number"
              },
              "limit": {
                "type": "number"
              },
              "hasNext": {
                "type": "boolean"
              },
              "hasPrev": {
                "type": "boolean"
              },
              "total": {
                "type": "number"
              }
            },
            "required": [
              "page",
              "limit",
              "hasNext",
              "hasPrev",
              "total"
            ],
            "title": "PaginationWithTotal",
            "description": "Pagination metadata that includes the total number of items"
          }
        },
        "required": [
          "fields"
        ]
      },
      "UpsertField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "shortName": {
            "type": "string",
            "maxLength": 5
          },
          "address": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "city": {
            "type": "string",
            "nullable": true,
            "maxLength": 25
          },
          "state": {
            "type": "string",
            "nullable": true,
            "maxLength": 25
          },
          "zip": {
            "type": "string",
            "nullable": true,
            "maxLength": 10
          },
          "comment": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "directions": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "rainoutNumber": {
            "type": "string",
            "nullable": true,
            "maxLength": 15
          },
          "latitude": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 25
              },
              {
                "nullable": true
              },
              {
                "nullable": true
              }
            ]
          },
          "longitude": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 25
              },
              {
                "nullable": true
              },
              {
                "nullable": true
              }
            ]
          }
        },
        "required": [
          "name",
          "shortName"
        ]
      },
      "ContactValidationWithSignIn": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "lastName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "middleName": {
            "type": "string",
            "maxLength": 50
          },
          "email": {
            "type": "string",
            "maxLength": 100,
            "format": "email"
          },
          "contactDetails": {
            "type": "object",
            "properties": {
              "phone1": {
                "type": "string",
                "nullable": true,
                "default": ""
              },
              "phone2": {
                "type": "string",
                "nullable": true,
                "default": ""
              },
              "phone3": {
                "type": "string",
                "nullable": true,
                "default": ""
              },
              "streetAddress": {
                "type": "string",
                "nullable": true,
                "maxLength": 100,
                "default": ""
              },
              "city": {
                "type": "string",
                "nullable": true,
                "maxLength": 50,
                "default": ""
              },
              "state": {
                "type": "string",
                "nullable": true,
                "maxLength": 50,
                "default": ""
              },
              "zip": {
                "type": "string",
                "nullable": true,
                "maxLength": 10,
                "default": ""
              },
              "dateOfBirth": {
                "type": "string",
                "nullable": true,
                "default": ""
              }
            }
          },
          "photo": {
            "type": "string",
            "format": "binary",
            "description": "Contact photo file"
          },
          "validationType": {
            "type": "string",
            "enum": [
              "streetAddress",
              "dateOfBirth"
            ]
          },
          "userName": {
            "type": "string",
            "maxLength": 100,
            "format": "email"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "maxLength": 100
          },
          "accountId": {
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "validationType",
          "userName",
          "password"
        ]
      },
      "RegisteredUserWithRoles": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "userName": {
            "type": "string",
            "maxLength": 100,
            "format": "email"
          },
          "token": {
            "type": "string"
          },
          "contact": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "firstName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "lastName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "middleName": {
                "type": "string",
                "maxLength": 50
              },
              "email": {
                "type": "string",
                "maxLength": 100,
                "format": "email"
              },
              "userId": {
                "type": "string",
                "maxLength": 50
              },
              "photoUrl": {
                "type": "string",
                "format": "uri"
              },
              "contactDetails": {
                "type": "object",
                "properties": {
                  "phone1": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "phone2": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "phone3": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "streetAddress": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 100,
                    "default": ""
                  },
                  "city": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 50,
                    "default": ""
                  },
                  "state": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 50,
                    "default": ""
                  },
                  "zip": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 10,
                    "default": ""
                  },
                  "dateOfBirth": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  }
                }
              }
            },
            "required": [
              "id",
              "firstName",
              "lastName"
            ]
          },
          "globalRoles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contactRoles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "roleId": {
                  "type": "string",
                  "maxLength": 50
                },
                "roleName": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 100
                },
                "roleData": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "contextName": {
                  "type": "string",
                  "maxLength": 50
                },
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "accountId": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "contact": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              },
              "required": [
                "roleId",
                "roleData",
                "id",
                "accountId",
                "contact"
              ]
            }
          }
        },
        "required": [
          "userId",
          "userName",
          "globalRoles",
          "contactRoles"
        ]
      },
      "RegisteredUser": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "userName": {
            "type": "string",
            "maxLength": 100,
            "format": "email"
          },
          "token": {
            "type": "string"
          },
          "contact": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "firstName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "lastName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "middleName": {
                "type": "string",
                "maxLength": 50
              },
              "email": {
                "type": "string",
                "maxLength": 100,
                "format": "email"
              },
              "userId": {
                "type": "string",
                "maxLength": 50
              },
              "photoUrl": {
                "type": "string",
                "format": "uri"
              },
              "contactDetails": {
                "type": "object",
                "properties": {
                  "phone1": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "phone2": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "phone3": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "streetAddress": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 100,
                    "default": ""
                  },
                  "city": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 50,
                    "default": ""
                  },
                  "state": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 50,
                    "default": ""
                  },
                  "zip": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 10,
                    "default": ""
                  },
                  "dateOfBirth": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  }
                }
              }
            },
            "required": [
              "id",
              "firstName",
              "lastName"
            ]
          }
        },
        "required": [
          "userId",
          "userName"
        ]
      },
      "SignInCredentials": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "maxLength": 100,
            "format": "email"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "maxLength": 100
          },
          "accountId": {
            "type": "string"
          }
        },
        "required": [
          "userName",
          "password"
        ]
      },
      "SeasonManager": {
        "type": "object",
        "properties": {
          "contact": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "firstName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "lastName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "email": {
                "type": "string",
                "maxLength": 100,
                "format": "email"
              },
              "contactDetails": {
                "type": "object",
                "properties": {
                  "phone1": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "phone2": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "phone3": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  }
                }
              }
            },
            "required": [
              "id",
              "firstName",
              "lastName"
            ]
          },
          "hasValidEmail": {
            "type": "boolean"
          },
          "allTeams": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "league": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                },
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 100
                }
              },
              "required": [
                "id"
              ]
            }
          }
        },
        "required": [
          "contact",
          "hasValidEmail",
          "allTeams"
        ],
        "description": "Aggregated view of a season manager and the teams they manage"
      },
      "SeasonManagerList": {
        "type": "object",
        "properties": {
          "managers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "contact": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "firstName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    },
                    "lastName": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    },
                    "email": {
                      "type": "string",
                      "maxLength": 100,
                      "format": "email"
                    },
                    "contactDetails": {
                      "type": "object",
                      "properties": {
                        "phone1": {
                          "type": "string",
                          "nullable": true,
                          "default": ""
                        },
                        "phone2": {
                          "type": "string",
                          "nullable": true,
                          "default": ""
                        },
                        "phone3": {
                          "type": "string",
                          "nullable": true,
                          "default": ""
                        }
                      }
                    }
                  },
                  "required": [
                    "id",
                    "firstName",
                    "lastName"
                  ]
                },
                "hasValidEmail": {
                  "type": "boolean"
                },
                "allTeams": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "league": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "pattern": "^d+$"
                          },
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 100
                          }
                        },
                        "required": [
                          "id",
                          "name"
                        ]
                      },
                      "id": {
                        "type": "string",
                        "pattern": "^d+$"
                      },
                      "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                      }
                    },
                    "required": [
                      "id"
                    ]
                  }
                }
              },
              "required": [
                "contact",
                "hasValidEmail",
                "allTeams"
              ],
              "description": "Aggregated view of a season manager and the teams they manage"
            }
          },
          "leagueNames": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 100
                }
              },
              "required": [
                "id",
                "name"
              ]
            }
          },
          "teamNames": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 100
                }
              },
              "required": [
                "id"
              ]
            }
          }
        },
        "required": [
          "managers",
          "leagueNames",
          "teamNames"
        ],
        "description": "Payload returned when listing season managers for an account season"
      },
      "SeasonManagerWithLeague": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "team": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id"
            ]
          },
          "contact": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "firstName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "lastName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "middleName": {
                "type": "string",
                "maxLength": 50
              },
              "email": {
                "type": "string",
                "maxLength": 100,
                "format": "email"
              },
              "userId": {
                "type": "string",
                "maxLength": 50
              },
              "photoUrl": {
                "type": "string",
                "format": "uri"
              },
              "contactDetails": {
                "type": "object",
                "properties": {
                  "phone1": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "phone2": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "phone3": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "streetAddress": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 100,
                    "default": ""
                  },
                  "city": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 50,
                    "default": ""
                  },
                  "state": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 50,
                    "default": ""
                  },
                  "zip": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 10,
                    "default": ""
                  },
                  "dateOfBirth": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  }
                }
              }
            },
            "required": [
              "id",
              "firstName",
              "lastName"
            ]
          },
          "league": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "league": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "pattern": "^d+$"
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              },
              "season": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "pattern": "^d+$"
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              }
            },
            "required": [
              "id",
              "league"
            ]
          }
        },
        "required": [
          "id",
          "team",
          "contact",
          "league"
        ],
        "description": "Team assignment for a season manager with league and team context"
      },
      "Season": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "accountId": {
            "type": "string",
            "pattern": "^d+$"
          },
          "isCurrent": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "accountId"
        ]
      },
      "SeasonParticipantCountData": {
        "type": "object",
        "properties": {
          "seasonId": {
            "type": "string",
            "pattern": "^d+$"
          },
          "participantCount": {
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [
          "seasonId",
          "participantCount"
        ]
      },
      "TeamManager": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "team": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id"
            ]
          },
          "contact": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "firstName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "lastName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "middleName": {
                "type": "string",
                "maxLength": 50
              },
              "email": {
                "type": "string",
                "maxLength": 100,
                "format": "email"
              },
              "userId": {
                "type": "string",
                "maxLength": 50
              },
              "photoUrl": {
                "type": "string",
                "format": "uri"
              },
              "contactDetails": {
                "type": "object",
                "properties": {
                  "phone1": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "phone2": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "phone3": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "streetAddress": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 100,
                    "default": ""
                  },
                  "city": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 50,
                    "default": ""
                  },
                  "state": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 50,
                    "default": ""
                  },
                  "zip": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 10,
                    "default": ""
                  },
                  "dateOfBirth": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  }
                }
              }
            },
            "required": [
              "id",
              "firstName",
              "lastName"
            ]
          }
        },
        "required": [
          "id",
          "team",
          "contact"
        ],
        "description": "Schema for a manager of a team for a given season"
      },
      "TeamRosterMembers": {
        "type": "object",
        "properties": {
          "teamSeason": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "rosterMembers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "playerNumber": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 99
                },
                "inactive": {
                  "type": "boolean",
                  "default": false
                },
                "submittedWaiver": {
                  "type": "boolean"
                },
                "dateAdded": {
                  "type": "string",
                  "nullable": true,
                  "format": "date-time",
                  "default": null
                },
                "player": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "submittedDriversLicense": {
                      "type": "boolean",
                      "default": false
                    },
                    "firstYear": {
                      "type": "number",
                      "minimum": 1900,
                      "maximum": 2025
                    },
                    "contact": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "pattern": "^d+$"
                        },
                        "firstName": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 100
                        },
                        "lastName": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 100
                        },
                        "middleName": {
                          "type": "string",
                          "maxLength": 50
                        },
                        "email": {
                          "type": "string",
                          "maxLength": 100,
                          "format": "email"
                        },
                        "userId": {
                          "type": "string",
                          "maxLength": 50
                        },
                        "photoUrl": {
                          "type": "string",
                          "format": "uri"
                        },
                        "contactDetails": {
                          "type": "object",
                          "properties": {
                            "phone1": {
                              "type": "string",
                              "nullable": true,
                              "default": ""
                            },
                            "phone2": {
                              "type": "string",
                              "nullable": true,
                              "default": ""
                            },
                            "phone3": {
                              "type": "string",
                              "nullable": true,
                              "default": ""
                            },
                            "streetAddress": {
                              "type": "string",
                              "nullable": true,
                              "maxLength": 100,
                              "default": ""
                            },
                            "city": {
                              "type": "string",
                              "nullable": true,
                              "maxLength": 50,
                              "default": ""
                            },
                            "state": {
                              "type": "string",
                              "nullable": true,
                              "maxLength": 50,
                              "default": ""
                            },
                            "zip": {
                              "type": "string",
                              "nullable": true,
                              "maxLength": 10,
                              "default": ""
                            },
                            "dateOfBirth": {
                              "type": "string",
                              "nullable": true,
                              "default": ""
                            }
                          }
                        }
                      },
                      "required": [
                        "id",
                        "firstName",
                        "lastName"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "firstYear",
                    "contact"
                  ],
                  "description": "Schema for a player who is or was on a team roster. This contains details that only ever need to be supplied once"
                }
              },
              "required": [
                "id",
                "player"
              ],
              "description": "Schema for a roster member including player details"
            }
          }
        },
        "required": [
          "teamSeason",
          "rosterMembers"
        ]
      },
      "TeamSeason": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "team": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "webAddress": {
                "type": "string",
                "nullable": true
              },
              "youtubeUserId": {
                "type": "string",
                "nullable": true
              },
              "defaultVideo": {
                "type": "string",
                "nullable": true
              },
              "autoPlayVideo": {
                "type": "boolean"
              },
              "logoUrl": {
                "type": "string",
                "nullable": true,
                "format": "uri"
              }
            },
            "required": [
              "id"
            ]
          },
          "season": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "accountId": {
                "type": "string",
                "pattern": "^d+$"
              },
              "isCurrent": {
                "type": "boolean"
              }
            },
            "required": [
              "id",
              "name",
              "accountId"
            ]
          },
          "league": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "division": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id",
              "name"
            ]
          }
        },
        "required": [
          "id",
          "team"
        ]
      },
      "UpsertTeamManager": {
        "type": "object",
        "properties": {
          "contactId": {
            "type": "string"
          }
        },
        "required": [
          "contactId"
        ]
      },
      "UpsertTeamSeason": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "season": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "accountId": {
                "type": "string",
                "pattern": "^d+$"
              },
              "isCurrent": {
                "type": "boolean"
              }
            },
            "required": [
              "id",
              "name",
              "accountId"
            ]
          },
          "team": {
            "type": "object",
            "properties": {
              "webAddress": {
                "type": "string",
                "nullable": true
              },
              "youtubeUserId": {
                "type": "string",
                "nullable": true
              },
              "defaultVideo": {
                "type": "string",
                "nullable": true
              },
              "autoPlayVideo": {
                "type": "boolean"
              }
            }
          },
          "divisionId": {
            "type": "string",
            "nullable": true
          },
          "leagueId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpsertTeamSeasonWithLogo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "season": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "accountId": {
                "type": "string",
                "pattern": "^d+$"
              },
              "isCurrent": {
                "type": "boolean"
              }
            },
            "required": [
              "id",
              "name",
              "accountId"
            ]
          },
          "team": {
            "type": "object",
            "properties": {
              "webAddress": {
                "type": "string",
                "nullable": true
              },
              "youtubeUserId": {
                "type": "string",
                "nullable": true
              },
              "defaultVideo": {
                "type": "string",
                "nullable": true
              },
              "autoPlayVideo": {
                "type": "boolean"
              }
            }
          },
          "divisionId": {
            "type": "string",
            "nullable": true
          },
          "leagueId": {
            "type": "string",
            "nullable": true
          },
          "logo": {
            "type": "string",
            "format": "binary",
            "description": "Optional team logo image."
          }
        }
      },
      "CreateContact": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "lastName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "middleName": {
            "type": "string",
            "maxLength": 50
          },
          "email": {
            "type": "string",
            "maxLength": 100,
            "format": "email"
          },
          "contactDetails": {
            "type": "object",
            "properties": {
              "phone1": {
                "type": "string",
                "nullable": true,
                "default": ""
              },
              "phone2": {
                "type": "string",
                "nullable": true,
                "default": ""
              },
              "phone3": {
                "type": "string",
                "nullable": true,
                "default": ""
              },
              "streetAddress": {
                "type": "string",
                "nullable": true,
                "maxLength": 100,
                "default": ""
              },
              "city": {
                "type": "string",
                "nullable": true,
                "maxLength": 50,
                "default": ""
              },
              "state": {
                "type": "string",
                "nullable": true,
                "maxLength": 50,
                "default": ""
              },
              "zip": {
                "type": "string",
                "nullable": true,
                "maxLength": 10,
                "default": ""
              },
              "dateOfBirth": {
                "type": "string",
                "nullable": true,
                "default": ""
              }
            }
          },
          "photo": {
            "type": "string",
            "format": "binary",
            "description": "Contact photo file"
          }
        },
        "required": [
          "firstName",
          "lastName"
        ]
      },
      "CreateContactRole": {
        "type": "object",
        "properties": {
          "roleId": {
            "type": "string",
            "maxLength": 50
          },
          "roleData": {
            "type": "string"
          },
          "contextName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          }
        },
        "required": [
          "roleId",
          "roleData"
        ]
      },
      "EmailCompose": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "recipients": {
            "type": "object",
            "properties": {
              "season": {
                "type": "boolean",
                "description": "Includes all contacts associated with the current season."
              },
              "leagues": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Includes all contacts associated with the specified leagues."
              },
              "divisions": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Includes all contacts associated with the specified divisions."
              },
              "teams": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Includes all contacts associated with the specified teams."
              },
              "contacts": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Includes the specified contact IDs."
              },
              "teamManagers": {
                "type": "boolean",
                "description": "Includes only team managers."
              }
            }
          },
          "subject": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "templateId": {
            "type": "string"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scheduledSend": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "scheduled",
              "sending"
            ]
          }
        },
        "required": [
          "id",
          "recipients",
          "subject",
          "body"
        ]
      },
      "EmailSend": {
        "type": "object",
        "properties": {
          "recipients": {
            "type": "object",
            "properties": {
              "season": {
                "type": "boolean",
                "description": "Includes all contacts associated with the current season."
              },
              "leagues": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Includes all contacts associated with the specified leagues."
              },
              "divisions": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Includes all contacts associated with the specified divisions."
              },
              "teams": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Includes all contacts associated with the specified teams."
              },
              "contacts": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Includes the specified contact IDs."
              },
              "teamManagers": {
                "type": "boolean",
                "description": "Includes only team managers."
              }
            }
          },
          "subject": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "templateId": {
            "type": "string"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scheduledSend": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "scheduled",
              "sending"
            ]
          },
          "id": {
            "type": "string"
          },
          "seasonId": {
            "type": "string"
          }
        },
        "required": [
          "recipients",
          "subject",
          "body"
        ]
      },
      "EmailDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "subject": {
            "type": "string"
          },
          "bodyHtml": {
            "type": "string",
            "nullable": true
          },
          "bodyText": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "sentAt": {
            "type": "string",
            "format": "date-time"
          },
          "scheduledSendAt": {
            "type": "string",
            "format": "date-time"
          },
          "totalRecipients": {
            "type": "number"
          },
          "successfulDeliveries": {
            "type": "number"
          },
          "failedDeliveries": {
            "type": "number"
          },
          "bounceCount": {
            "type": "number"
          },
          "openCount": {
            "type": "number"
          },
          "clickCount": {
            "type": "number"
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "template": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "recipients": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "emailAddress": {
                  "type": "string"
                },
                "contactName": {
                  "type": "string"
                },
                "recipientType": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "sentAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "deliveredAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "openedAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "clickedAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "bounceReason": {
                  "type": "string"
                },
                "errorMessage": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "emailAddress",
                "status"
              ]
            }
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "filename": {
                  "type": "string"
                },
                "originalName": {
                  "type": "string"
                },
                "fileSize": {
                  "type": "number"
                },
                "mimeType": {
                  "type": "string"
                },
                "uploadedAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "storagePath": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "filename",
                "originalName",
                "fileSize",
                "mimeType"
              ]
            }
          }
        },
        "required": [
          "id",
          "subject",
          "bodyHtml",
          "bodyText",
          "status",
          "createdAt",
          "totalRecipients",
          "successfulDeliveries",
          "failedDeliveries",
          "openCount",
          "clickCount",
          "createdBy",
          "template",
          "recipients",
          "attachments"
        ]
      },
      "EmailListPaged": {
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "subject": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "string"
                },
                "sentAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "totalRecipients": {
                  "type": "number"
                },
                "successfulDeliveries": {
                  "type": "number"
                },
                "failedDeliveries": {
                  "type": "number"
                },
                "openCount": {
                  "type": "number"
                },
                "clickCount": {
                  "type": "number"
                },
                "createdBy": {
                  "type": "string",
                  "nullable": true
                },
                "templateName": {
                  "type": "string",
                  "nullable": true
                }
              },
              "required": [
                "id",
                "subject",
                "status",
                "createdAt",
                "totalRecipients",
                "successfulDeliveries",
                "failedDeliveries",
                "openCount",
                "clickCount",
                "createdBy",
                "templateName"
              ]
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "page": {
                "type": "number"
              },
              "limit": {
                "type": "number"
              },
              "hasNext": {
                "type": "boolean"
              },
              "hasPrev": {
                "type": "boolean"
              },
              "total": {
                "type": "number"
              }
            },
            "required": [
              "page",
              "limit",
              "hasNext",
              "hasPrev",
              "total"
            ],
            "title": "PaginationWithTotal",
            "description": "Pagination metadata that includes the total number of items"
          }
        },
        "required": [
          "emails",
          "pagination"
        ]
      },
      "EmailTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "accountId": {
            "type": "string",
            "pattern": "^d+$"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "subjectTemplate": {
            "type": "string"
          },
          "bodyTemplate": {
            "type": "string"
          },
          "createdByUserId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "accountId",
          "name",
          "bodyTemplate",
          "createdAt",
          "updatedAt",
          "isActive"
        ]
      },
      "UpsertEmailTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 2,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "minLength": 2,
            "maxLength": 500
          },
          "subjectTemplate": {
            "type": "string",
            "minLength": 2,
            "maxLength": 100
          },
          "bodyTemplate": {
            "type": "string",
            "minLength": 0,
            "maxLength": 10000
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "EmailTemplatesList": {
        "type": "object",
        "properties": {
          "templates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "accountId": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "subjectTemplate": {
                  "type": "string"
                },
                "bodyTemplate": {
                  "type": "string"
                },
                "createdByUserId": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "string"
                },
                "updatedAt": {
                  "type": "string"
                },
                "isActive": {
                  "type": "boolean"
                }
              },
              "required": [
                "id",
                "accountId",
                "name",
                "bodyTemplate",
                "createdAt",
                "updatedAt",
                "isActive"
              ]
            }
          },
          "commonVariables": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "templates",
          "commonVariables"
        ]
      },
      "AttachmentUploadResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "originalName": {
            "type": "string"
          },
          "fileSize": {
            "type": "number"
          },
          "mimeType": {
            "type": "string"
          },
          "storagePath": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "filename",
          "originalName",
          "fileSize",
          "mimeType",
          "storagePath"
        ]
      },
      "PagedContact": {
        "type": "object",
        "properties": {
          "contacts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "firstName": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 100
                },
                "lastName": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 100
                },
                "middleName": {
                  "type": "string",
                  "maxLength": 50
                },
                "email": {
                  "type": "string",
                  "maxLength": 100,
                  "format": "email"
                },
                "userId": {
                  "type": "string",
                  "maxLength": 50
                },
                "photoUrl": {
                  "type": "string",
                  "format": "uri"
                },
                "contactDetails": {
                  "type": "object",
                  "properties": {
                    "phone1": {
                      "type": "string",
                      "nullable": true,
                      "default": ""
                    },
                    "phone2": {
                      "type": "string",
                      "nullable": true,
                      "default": ""
                    },
                    "phone3": {
                      "type": "string",
                      "nullable": true,
                      "default": ""
                    },
                    "streetAddress": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 100,
                      "default": ""
                    },
                    "city": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 50,
                      "default": ""
                    },
                    "state": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 50,
                      "default": ""
                    },
                    "zip": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 10,
                      "default": ""
                    },
                    "dateOfBirth": {
                      "type": "string",
                      "nullable": true,
                      "default": ""
                    }
                  }
                }
              },
              "required": [
                "id",
                "firstName",
                "lastName"
              ]
            }
          },
          "total": {
            "type": "number"
          },
          "pagination": {
            "type": "object",
            "properties": {
              "page": {
                "type": "number"
              },
              "limit": {
                "type": "number"
              },
              "hasNext": {
                "type": "boolean"
              },
              "hasPrev": {
                "type": "boolean"
              }
            },
            "required": [
              "page",
              "limit",
              "hasNext",
              "hasPrev"
            ],
            "title": "Pagination",
            "description": "Pagination metadata included with paged API responses"
          }
        },
        "required": [
          "contacts",
          "total"
        ],
        "title": "ContactResponse",
        "description": "Response for contact search"
      },
      "ContactRole": {
        "type": "object",
        "properties": {
          "roleId": {
            "type": "string",
            "maxLength": 50
          },
          "roleName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "roleData": {
            "type": "string",
            "pattern": "^d+$"
          },
          "contextName": {
            "type": "string",
            "maxLength": 50
          },
          "id": {
            "type": "string",
            "pattern": "^d+$"
          }
        },
        "required": [
          "roleId",
          "roleData",
          "id"
        ]
      },
      "Umpire": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "accountId": {
            "type": "string"
          },
          "contactId": {
            "type": "string"
          },
          "firstName": {
            "type": "string",
            "minLength": 1
          },
          "lastName": {
            "type": "string",
            "minLength": 1
          },
          "email": {
            "type": "string",
            "nullable": true,
            "format": "email"
          },
          "displayName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "accountId",
          "contactId",
          "firstName",
          "lastName",
          "displayName"
        ]
      },
      "Umpires": {
        "type": "object",
        "properties": {
          "umpires": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "accountId": {
                  "type": "string"
                },
                "contactId": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string",
                  "minLength": 1
                },
                "lastName": {
                  "type": "string",
                  "minLength": 1
                },
                "email": {
                  "type": "string",
                  "nullable": true,
                  "format": "email"
                },
                "displayName": {
                  "type": "string"
                }
              },
              "required": [
                "id",
                "accountId",
                "contactId",
                "firstName",
                "lastName",
                "displayName"
              ]
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "page": {
                "type": "number"
              },
              "limit": {
                "type": "number"
              },
              "hasNext": {
                "type": "boolean"
              },
              "hasPrev": {
                "type": "boolean"
              },
              "total": {
                "type": "number"
              }
            },
            "required": [
              "page",
              "limit",
              "hasNext",
              "hasPrev",
              "total"
            ],
            "title": "PaginationWithTotal",
            "description": "Pagination metadata that includes the total number of items"
          }
        },
        "required": [
          "umpires"
        ]
      },
      "BaseRole": {
        "type": "object",
        "properties": {
          "roleId": {
            "type": "string",
            "maxLength": 50
          },
          "roleName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          }
        },
        "required": [
          "roleId"
        ]
      },
      "RoleCheck": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "maxLength": 50
          },
          "roleId": {
            "type": "string",
            "maxLength": 50
          },
          "hasRole": {
            "type": "boolean"
          },
          "roleLevel": {
            "type": "string",
            "maxLength": 50
          },
          "context": {
            "type": "string",
            "pattern": "^d+$"
          }
        },
        "required": [
          "userId",
          "roleId",
          "hasRole"
        ]
      },
      "Account": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "accountLogoUrl": {
            "type": "string"
          },
          "configuration": {
            "type": "object",
            "properties": {
              "accountType": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              },
              "firstYear": {
                "type": "integer",
                "nullable": true
              },
              "timeZone": {
                "type": "string",
                "nullable": true
              },
              "affiliation": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              }
            }
          },
          "urls": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "url": {
                  "type": "string",
                  "minLength": 1
                }
              },
              "required": [
                "id",
                "url"
              ]
            },
            "default": []
          },
          "accountOwner": {
            "type": "object",
            "properties": {
              "user": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string"
                  },
                  "userName": {
                    "type": "string",
                    "maxLength": 100,
                    "format": "email"
                  },
                  "token": {
                    "type": "string"
                  },
                  "contact": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "pattern": "^d+$"
                      },
                      "firstName": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                      },
                      "lastName": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                      },
                      "middleName": {
                        "type": "string",
                        "maxLength": 50
                      },
                      "email": {
                        "type": "string",
                        "maxLength": 100,
                        "format": "email"
                      },
                      "userId": {
                        "type": "string",
                        "maxLength": 50
                      },
                      "photoUrl": {
                        "type": "string",
                        "format": "uri"
                      },
                      "contactDetails": {
                        "type": "object",
                        "properties": {
                          "phone1": {
                            "type": "string",
                            "nullable": true,
                            "default": ""
                          },
                          "phone2": {
                            "type": "string",
                            "nullable": true,
                            "default": ""
                          },
                          "phone3": {
                            "type": "string",
                            "nullable": true,
                            "default": ""
                          },
                          "streetAddress": {
                            "type": "string",
                            "nullable": true,
                            "maxLength": 100,
                            "default": ""
                          },
                          "city": {
                            "type": "string",
                            "nullable": true,
                            "maxLength": 50,
                            "default": ""
                          },
                          "state": {
                            "type": "string",
                            "nullable": true,
                            "maxLength": 50,
                            "default": ""
                          },
                          "zip": {
                            "type": "string",
                            "nullable": true,
                            "maxLength": 10,
                            "default": ""
                          },
                          "dateOfBirth": {
                            "type": "string",
                            "nullable": true,
                            "default": ""
                          }
                        }
                      }
                    },
                    "required": [
                      "id",
                      "firstName",
                      "lastName"
                    ]
                  }
                },
                "required": [
                  "userId",
                  "userName"
                ]
              },
              "contact": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "pattern": "^d+$"
                  },
                  "firstName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "lastName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "middleName": {
                    "type": "string",
                    "maxLength": 50
                  }
                },
                "required": [
                  "id",
                  "firstName",
                  "lastName"
                ]
              }
            }
          },
          "socials": {
            "type": "object",
            "properties": {
              "twitterAccountName": {
                "type": "string"
              },
              "facebookFanPage": {
                "type": "string"
              },
              "youtubeUserId": {
                "type": "string",
                "nullable": true
              },
              "defaultVideo": {
                "type": "string",
                "nullable": true
              },
              "autoPlayVideo": {
                "type": "boolean",
                "default": false
              }
            }
          }
        },
        "required": [
          "id",
          "name",
          "accountLogoUrl"
        ]
      },
      "AccountSearchQuery": {
        "type": "object",
        "properties": {
          "q": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          }
        },
        "required": [
          "q"
        ]
      },
      "AccountDomainLookupHeaders": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "host"
        ]
      },
      "AccountWithSeasons": {
        "type": "object",
        "properties": {
          "account": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "accountLogoUrl": {
                "type": "string"
              },
              "configuration": {
                "type": "object",
                "properties": {
                  "accountType": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ]
                  },
                  "firstYear": {
                    "type": "integer",
                    "nullable": true
                  },
                  "timeZone": {
                    "type": "string",
                    "nullable": true
                  },
                  "affiliation": {
                    "type": "object",
                    "nullable": true,
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string",
                        "nullable": true
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ]
                  }
                }
              },
              "urls": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "id",
                    "url"
                  ]
                },
                "default": []
              },
              "accountOwner": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "object",
                    "properties": {
                      "userId": {
                        "type": "string"
                      },
                      "userName": {
                        "type": "string",
                        "maxLength": 100,
                        "format": "email"
                      },
                      "token": {
                        "type": "string"
                      },
                      "contact": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "pattern": "^d+$"
                          },
                          "firstName": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 100
                          },
                          "lastName": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 100
                          },
                          "middleName": {
                            "type": "string",
                            "maxLength": 50
                          },
                          "email": {
                            "type": "string",
                            "maxLength": 100,
                            "format": "email"
                          },
                          "userId": {
                            "type": "string",
                            "maxLength": 50
                          },
                          "photoUrl": {
                            "type": "string",
                            "format": "uri"
                          },
                          "contactDetails": {
                            "type": "object",
                            "properties": {
                              "phone1": {
                                "type": "string",
                                "nullable": true,
                                "default": ""
                              },
                              "phone2": {
                                "type": "string",
                                "nullable": true,
                                "default": ""
                              },
                              "phone3": {
                                "type": "string",
                                "nullable": true,
                                "default": ""
                              },
                              "streetAddress": {
                                "type": "string",
                                "nullable": true,
                                "maxLength": 100,
                                "default": ""
                              },
                              "city": {
                                "type": "string",
                                "nullable": true,
                                "maxLength": 50,
                                "default": ""
                              },
                              "state": {
                                "type": "string",
                                "nullable": true,
                                "maxLength": 50,
                                "default": ""
                              },
                              "zip": {
                                "type": "string",
                                "nullable": true,
                                "maxLength": 10,
                                "default": ""
                              },
                              "dateOfBirth": {
                                "type": "string",
                                "nullable": true,
                                "default": ""
                              }
                            }
                          }
                        },
                        "required": [
                          "id",
                          "firstName",
                          "lastName"
                        ]
                      }
                    },
                    "required": [
                      "userId",
                      "userName"
                    ]
                  },
                  "contact": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "pattern": "^d+$"
                      },
                      "firstName": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                      },
                      "lastName": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                      },
                      "middleName": {
                        "type": "string",
                        "maxLength": 50
                      }
                    },
                    "required": [
                      "id",
                      "firstName",
                      "lastName"
                    ]
                  }
                }
              },
              "socials": {
                "type": "object",
                "properties": {
                  "twitterAccountName": {
                    "type": "string"
                  },
                  "facebookFanPage": {
                    "type": "string"
                  },
                  "youtubeUserId": {
                    "type": "string",
                    "nullable": true
                  },
                  "defaultVideo": {
                    "type": "string",
                    "nullable": true
                  },
                  "autoPlayVideo": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            "required": [
              "id",
              "name",
              "accountLogoUrl"
            ]
          },
          "currentSeason": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "seasons": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "isCurrent": {
                  "type": "boolean"
                }
              },
              "required": [
                "id",
                "name",
                "isCurrent"
              ]
            }
          }
        },
        "required": [
          "account",
          "currentSeason",
          "seasons"
        ]
      },
      "AccountDetailsQuery": {
        "type": "object",
        "properties": {
          "includeCurrentSeason": {
            "type": "boolean",
            "nullable": true,
            "default": false
          }
        }
      },
      "AutomaticRoleHolders": {
        "type": "object",
        "properties": {
          "accountOwner": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "firstName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "lastName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "middleName": {
                "type": "string",
                "maxLength": 50
              },
              "email": {
                "type": "string",
                "maxLength": 100,
                "format": "email"
              },
              "userId": {
                "type": "string",
                "maxLength": 50
              },
              "photoUrl": {
                "type": "string",
                "format": "uri"
              },
              "contactDetails": {
                "type": "object",
                "properties": {
                  "phone1": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "phone2": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "phone3": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "streetAddress": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 100,
                    "default": ""
                  },
                  "city": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 50,
                    "default": ""
                  },
                  "state": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 50,
                    "default": ""
                  },
                  "zip": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 10,
                    "default": ""
                  },
                  "dateOfBirth": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  }
                }
              }
            },
            "required": [
              "id",
              "firstName",
              "lastName"
            ]
          },
          "teamManagers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "firstName": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 100
                },
                "lastName": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 100
                },
                "middleName": {
                  "type": "string",
                  "maxLength": 50
                },
                "email": {
                  "type": "string",
                  "maxLength": 100,
                  "format": "email"
                },
                "userId": {
                  "type": "string",
                  "maxLength": 50
                },
                "photoUrl": {
                  "type": "string",
                  "format": "uri"
                },
                "contactDetails": {
                  "type": "object",
                  "properties": {
                    "phone1": {
                      "type": "string",
                      "nullable": true,
                      "default": ""
                    },
                    "phone2": {
                      "type": "string",
                      "nullable": true,
                      "default": ""
                    },
                    "phone3": {
                      "type": "string",
                      "nullable": true,
                      "default": ""
                    },
                    "streetAddress": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 100,
                      "default": ""
                    },
                    "city": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 50,
                      "default": ""
                    },
                    "state": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 50,
                      "default": ""
                    },
                    "zip": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 10,
                      "default": ""
                    },
                    "dateOfBirth": {
                      "type": "string",
                      "nullable": true,
                      "default": ""
                    }
                  }
                },
                "teams": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "teamSeasonId": {
                        "type": "string"
                      },
                      "teamName": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "teamSeasonId",
                      "teamName"
                    ]
                  }
                }
              },
              "required": [
                "id",
                "firstName",
                "lastName",
                "teams"
              ]
            }
          }
        },
        "required": [
          "accountOwner",
          "teamManagers"
        ],
        "title": "AutomaticRoleHolders",
        "description": "Automatic role holders"
      },
      "RoleMetadata": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "maxLength": 20
          },
          "timestamp": {
            "type": "string",
            "nullable": true,
            "maxLength": 50
          },
          "hierarchy": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "permissions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "roleId": {
                  "type": "string"
                },
                "permissions": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "maxLength": 100
                  }
                },
                "context": {
                  "type": "string"
                }
              },
              "required": [
                "roleId",
                "permissions",
                "context"
              ]
            }
          }
        },
        "required": [
          "version",
          "timestamp",
          "hierarchy",
          "permissions"
        ]
      },
      "CreateAccount": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "accountLogoUrl": {
            "type": "string"
          },
          "configuration": {
            "type": "object",
            "properties": {
              "accountType": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              },
              "firstYear": {
                "type": "integer",
                "nullable": true
              },
              "timeZone": {
                "type": "string",
                "nullable": true
              },
              "affiliation": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "required": [
                  "id",
                  "name"
                ]
              }
            }
          },
          "urls": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "url": {
                  "type": "string",
                  "minLength": 1
                }
              },
              "required": [
                "url"
              ]
            },
            "default": []
          },
          "socials": {
            "type": "object",
            "properties": {
              "twitterAccountName": {
                "type": "string"
              },
              "facebookFanPage": {
                "type": "string"
              },
              "youtubeUserId": {
                "type": "string",
                "nullable": true
              },
              "defaultVideo": {
                "type": "string",
                "nullable": true
              },
              "autoPlayVideo": {
                "type": "boolean",
                "default": false
              }
            }
          },
          "ownerContact": {
            "type": "object",
            "properties": {
              "firstName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "lastName": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "middleName": {
                "type": "string",
                "maxLength": 50
              },
              "email": {
                "type": "string",
                "maxLength": 100,
                "format": "email"
              },
              "contactDetails": {
                "type": "object",
                "properties": {
                  "phone1": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "phone2": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "phone3": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  },
                  "streetAddress": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 100,
                    "default": ""
                  },
                  "city": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 50,
                    "default": ""
                  },
                  "state": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 50,
                    "default": ""
                  },
                  "zip": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 10,
                    "default": ""
                  },
                  "dateOfBirth": {
                    "type": "string",
                    "nullable": true,
                    "default": ""
                  }
                }
              }
            },
            "required": [
              "firstName",
              "lastName"
            ]
          },
          "seasonName": {
            "type": "string",
            "maxLength": 25,
            "default": ""
          }
        },
        "required": [
          "name",
          "accountLogoUrl"
        ]
      },
      "AccountName": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "AccountHeader": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "accountLogoUrl": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "accountLogoUrl"
        ]
      },
      "AccountAffiliation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "AccountType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "AccountUrl": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "id",
          "url"
        ]
      },
      "CreateAccountUrl": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "url"
        ]
      },
      "AccountTwitterSettings": {
        "type": "object",
        "properties": {
          "twitterAccountName": {
            "type": "string"
          },
          "twitterOauthToken": {
            "type": "string"
          },
          "twitterOauthSecretKey": {
            "type": "string"
          },
          "twitterWidgetScript": {
            "type": "string"
          }
        }
      },
      "Sponsor": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "streetAddress": {
            "type": "string",
            "maxLength": 255
          },
          "cityStateZip": {
            "type": "string",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "maxLength": 250
          },
          "email": {
            "type": "string",
            "maxLength": 100
          },
          "phone": {
            "type": "string",
            "maxLength": 255
          },
          "fax": {
            "type": "string",
            "maxLength": 255
          },
          "website": {
            "type": "string",
            "maxLength": 255
          },
          "id": {
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "teamId": {
            "type": "string"
          },
          "photoUrl": {
            "type": "string",
            "format": "uri",
            "description": "Public URL for the sponsor photo"
          }
        },
        "required": [
          "name",
          "id",
          "accountId"
        ],
        "title": "CreateSponsor",
        "description": "Payload to create or update a sponsor"
      },
      "SponsorList": {
        "type": "object",
        "properties": {
          "sponsors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 50
                },
                "streetAddress": {
                  "type": "string",
                  "maxLength": 255
                },
                "cityStateZip": {
                  "type": "string",
                  "maxLength": 255
                },
                "description": {
                  "type": "string",
                  "maxLength": 250
                },
                "email": {
                  "type": "string",
                  "maxLength": 100
                },
                "phone": {
                  "type": "string",
                  "maxLength": 255
                },
                "fax": {
                  "type": "string",
                  "maxLength": 255
                },
                "website": {
                  "type": "string",
                  "maxLength": 255
                },
                "id": {
                  "type": "string"
                },
                "accountId": {
                  "type": "string"
                },
                "teamId": {
                  "type": "string"
                },
                "photoUrl": {
                  "type": "string",
                  "format": "uri",
                  "description": "Public URL for the sponsor photo"
                }
              },
              "required": [
                "name",
                "id",
                "accountId"
              ],
              "title": "CreateSponsor",
              "description": "Payload to create or update a sponsor"
            }
          }
        },
        "required": [
          "sponsors"
        ],
        "title": "SponsorListResponse",
        "description": "List response for sponsors"
      },
      "CreateSponsor": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "streetAddress": {
            "type": "string",
            "maxLength": 255
          },
          "cityStateZip": {
            "type": "string",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "maxLength": 250
          },
          "email": {
            "type": "string",
            "maxLength": 100
          },
          "phone": {
            "type": "string",
            "maxLength": 255
          },
          "fax": {
            "type": "string",
            "maxLength": 255
          },
          "website": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name"
        ],
        "title": "CreateSponsor",
        "description": "Payload to create or update a sponsor"
      },
      "PlayersWantedClassified": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "accountId": {
            "type": "string"
          },
          "dateCreated": {
            "type": "string",
            "nullable": true
          },
          "createdByContactId": {
            "type": "string"
          },
          "teamEventName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "positionsNeeded": {
            "type": "string"
          },
          "creator": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "photoUrl": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "firstName",
              "lastName",
              "photoUrl"
            ]
          },
          "account": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "name"
            ]
          }
        },
        "required": [
          "id",
          "accountId",
          "dateCreated",
          "createdByContactId",
          "teamEventName",
          "description",
          "positionsNeeded",
          "creator",
          "account"
        ],
        "title": "PlayersWantedClassified",
        "description": "Players Wanted classified listing"
      },
      "PlayersWantedClassifiedPaged": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "accountId": {
                  "type": "string"
                },
                "dateCreated": {
                  "type": "string",
                  "nullable": true
                },
                "createdByContactId": {
                  "type": "string"
                },
                "teamEventName": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "positionsNeeded": {
                  "type": "string"
                },
                "creator": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "photoUrl": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "firstName",
                    "lastName",
                    "photoUrl"
                  ]
                },
                "account": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                }
              },
              "required": [
                "id",
                "accountId",
                "dateCreated",
                "createdByContactId",
                "teamEventName",
                "description",
                "positionsNeeded",
                "creator",
                "account"
              ],
              "title": "PlayersWantedClassified",
              "description": "Players Wanted classified listing"
            }
          },
          "total": {
            "type": "number"
          },
          "pagination": {
            "type": "object",
            "properties": {
              "page": {
                "type": "number"
              },
              "limit": {
                "type": "number"
              },
              "hasNext": {
                "type": "boolean"
              },
              "hasPrev": {
                "type": "boolean"
              },
              "totalPages": {
                "type": "number"
              }
            },
            "required": [
              "page",
              "limit",
              "hasNext",
              "hasPrev",
              "totalPages"
            ],
            "title": "PlayerClassifiedPagination",
            "description": "Pagination metadata for player classified listings"
          },
          "filters": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "players",
                  "teams",
                  "all"
                ]
              },
              "positions": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "experience": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "dateRange": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "nullable": true
                  },
                  "to": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "required": [
                  "from",
                  "to"
                ]
              },
              "searchQuery": {
                "type": "string",
                "nullable": true
              }
            },
            "required": [
              "type",
              "positions",
              "experience",
              "dateRange",
              "searchQuery"
            ],
            "title": "PlayerClassifiedFilters",
            "description": "Filters applied to a player classified search request"
          }
        },
        "required": [
          "data",
          "total",
          "pagination",
          "filters"
        ],
        "title": "PlayersWantedClassifiedList",
        "description": "Paginated Players Wanted classified listings"
      },
      "UpsertPlayersWantedClassified": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "teamEventName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          "positionsNeeded": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          }
        },
        "required": [
          "teamEventName",
          "description",
          "positionsNeeded"
        ],
        "title": "UpsertPlayersWantedClassifiedRequest",
        "description": "Request body for creating or updating a Players Wanted classified"
      },
      "PlayerClassifiedSearchQuery": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 1,
            "default": 1
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 20
          },
          "sortBy": {
            "type": "string",
            "enum": [
              "dateCreated",
              "relevance"
            ],
            "default": "dateCreated"
          },
          "sortOrder": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "default": "desc"
          },
          "searchQuery": {
            "type": "string",
            "maxLength": 200
          }
        },
        "title": "PlayerClassifiedSearchQuery",
        "description": "Query parameters used to paginate and filter player classified listings"
      },
      "TeamsWantedPublicClassifiedPaged": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "accountId": {
                  "type": "string"
                },
                "dateCreated": {
                  "type": "string",
                  "nullable": true
                },
                "name": {
                  "type": "string"
                },
                "experience": {
                  "type": "string"
                },
                "positionsPlayed": {
                  "type": "string"
                },
                "age": {
                  "type": "number",
                  "nullable": true
                },
                "account": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                }
              },
              "required": [
                "id",
                "accountId",
                "dateCreated",
                "name",
                "experience",
                "positionsPlayed",
                "age",
                "account"
              ],
              "title": "TeamsWantedPublicClassified",
              "description": "Teams Wanted classified listing for public display without contact information"
            }
          },
          "total": {
            "type": "number"
          },
          "pagination": {
            "type": "object",
            "properties": {
              "page": {
                "type": "number"
              },
              "limit": {
                "type": "number"
              },
              "hasNext": {
                "type": "boolean"
              },
              "hasPrev": {
                "type": "boolean"
              },
              "totalPages": {
                "type": "number"
              }
            },
            "required": [
              "page",
              "limit",
              "hasNext",
              "hasPrev",
              "totalPages"
            ],
            "title": "PlayerClassifiedPagination",
            "description": "Pagination metadata for player classified listings"
          },
          "filters": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "players",
                  "teams",
                  "all"
                ]
              },
              "positions": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "experience": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "dateRange": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "nullable": true
                  },
                  "to": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "required": [
                  "from",
                  "to"
                ]
              },
              "searchQuery": {
                "type": "string",
                "nullable": true
              }
            },
            "required": [
              "type",
              "positions",
              "experience",
              "dateRange",
              "searchQuery"
            ],
            "title": "PlayerClassifiedFilters",
            "description": "Filters applied to a player classified search request"
          }
        },
        "required": [
          "data",
          "total",
          "pagination",
          "filters"
        ],
        "title": "TeamsWantedPublicClassifiedPaged",
        "description": "Paginated Teams Wanted classified listings for public display"
      },
      "TeamsWantedOwnerClassified": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "accountId": {
            "type": "string"
          },
          "dateCreated": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "experience": {
            "type": "string"
          },
          "positionsPlayed": {
            "type": "string"
          },
          "birthDate": {
            "type": "string",
            "nullable": true
          },
          "age": {
            "type": "number",
            "nullable": true
          },
          "account": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "name"
            ]
          }
        },
        "required": [
          "id",
          "accountId",
          "dateCreated",
          "name",
          "email",
          "phone",
          "experience",
          "positionsPlayed",
          "birthDate",
          "age",
          "account"
        ],
        "title": "TeamsWantedOwnerClassified",
        "description": "Teams Wanted classified listing for the owner including contact information"
      },
      "UpsertTeamsWantedClassified": {
        "type": "object",
        "properties": {
          "accessCode": {
            "type": "string",
            "minLength": 10,
            "maxLength": 1000
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "email": {
            "type": "string",
            "maxLength": 320,
            "format": "email"
          },
          "phone": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "experience": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "positionsPlayed": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "birthDate": {
            "type": "string",
            "nullable": true,
            "default": ""
          }
        },
        "required": [
          "name",
          "email",
          "phone",
          "experience",
          "positionsPlayed"
        ],
        "title": "UpsertTeamsWantedClassifiedRequest",
        "description": "Request body for creating or updating a Teams Wanted classified"
      },
      "TeamsWantedAccessCode": {
        "type": "object",
        "properties": {
          "accessCode": {
            "type": "string",
            "minLength": 10,
            "maxLength": 1000
          }
        },
        "required": [
          "accessCode"
        ],
        "title": "TeamsWantedAccessCode",
        "description": "Access code used to authenticate Teams Wanted classified actions"
      },
      "TeamsWantedContactInfo": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "maxLength": 320,
            "format": "email"
          },
          "phone": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "birthDate": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "email",
          "phone"
        ],
        "title": "TeamsWantedContactInfo",
        "description": "Contact information for a Teams Wanted classified"
      },
      "TeamsWantedContactQuery": {
        "type": "object",
        "properties": {
          "accessCode": {
            "type": "string",
            "minLength": 10,
            "maxLength": 1000
          }
        },
        "title": "TeamsWantedContactQuery",
        "description": "Query parameters used to request Teams Wanted contact information"
      },
      "StandingsLeague": {
        "type": "object",
        "properties": {
          "league": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "divisions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "division": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "division": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "pattern": "^d+$"
                        },
                        "name": {
                          "type": "string",
                          "minLength": 1,
                          "maxLength": 100
                        }
                      },
                      "required": [
                        "id",
                        "name"
                      ]
                    },
                    "priority": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "id",
                    "division",
                    "priority"
                  ]
                },
                "teams": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "w": {
                        "type": "number"
                      },
                      "l": {
                        "type": "number"
                      },
                      "t": {
                        "type": "number"
                      },
                      "team": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "pattern": "^d+$"
                          },
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 100
                          }
                        },
                        "required": [
                          "id"
                        ]
                      },
                      "league": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "pattern": "^d+$"
                          },
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 100
                          }
                        },
                        "required": [
                          "id",
                          "name"
                        ]
                      },
                      "division": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "pattern": "^d+$"
                          },
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 100
                          }
                        },
                        "required": [
                          "id",
                          "name"
                        ]
                      },
                      "pct": {
                        "type": "number"
                      },
                      "gb": {
                        "type": "number"
                      },
                      "divisionRecord": {
                        "type": "object",
                        "properties": {
                          "w": {
                            "type": "number"
                          },
                          "l": {
                            "type": "number"
                          },
                          "t": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "w",
                          "l",
                          "t"
                        ]
                      }
                    },
                    "required": [
                      "w",
                      "l",
                      "t",
                      "team",
                      "pct",
                      "gb"
                    ]
                  }
                }
              },
              "required": [
                "division",
                "teams"
              ]
            }
          }
        },
        "required": [
          "league",
          "divisions"
        ]
      },
      "StandingsTeam": {
        "type": "object",
        "properties": {
          "w": {
            "type": "number"
          },
          "l": {
            "type": "number"
          },
          "t": {
            "type": "number"
          },
          "team": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id"
            ]
          },
          "league": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "division": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "pct": {
            "type": "number"
          },
          "gb": {
            "type": "number"
          },
          "divisionRecord": {
            "type": "object",
            "properties": {
              "w": {
                "type": "number"
              },
              "l": {
                "type": "number"
              },
              "t": {
                "type": "number"
              }
            },
            "required": [
              "w",
              "l",
              "t"
            ]
          }
        },
        "required": [
          "w",
          "l",
          "t",
          "team",
          "pct",
          "gb"
        ]
      },
      "TeamSeasonRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "team": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "webAddress": {
                "type": "string",
                "nullable": true
              },
              "youtubeUserId": {
                "type": "string",
                "nullable": true
              },
              "defaultVideo": {
                "type": "string",
                "nullable": true
              },
              "autoPlayVideo": {
                "type": "boolean"
              },
              "logoUrl": {
                "type": "string",
                "nullable": true,
                "format": "uri"
              }
            },
            "required": [
              "id"
            ]
          },
          "season": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "accountId": {
                "type": "string",
                "pattern": "^d+$"
              },
              "isCurrent": {
                "type": "boolean"
              }
            },
            "required": [
              "id",
              "name",
              "accountId"
            ]
          },
          "league": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "division": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "record": {
            "type": "object",
            "properties": {
              "w": {
                "type": "number"
              },
              "l": {
                "type": "number"
              },
              "t": {
                "type": "number"
              }
            },
            "required": [
              "w",
              "l",
              "t"
            ]
          }
        },
        "required": [
          "id",
          "team",
          "record"
        ]
      },
      "ContactPlayersWantedCreator": {
        "type": "object",
        "properties": {
          "senderName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "senderEmail": {
            "type": "string",
            "maxLength": 320,
            "format": "email"
          },
          "message": {
            "type": "string",
            "minLength": 1,
            "maxLength": 5000
          }
        },
        "required": [
          "senderName",
          "senderEmail",
          "message"
        ],
        "title": "ContactPlayersWantedCreatorRequest",
        "description": "Request body for contacting a Players Wanted classified creator"
      },
      "ContactSearchParams": {
        "type": "object",
        "properties": {
          "q": {
            "type": "string",
            "maxLength": 100
          },
          "includeRoles": {
            "type": "boolean",
            "default": false
          },
          "contactDetails": {
            "type": "boolean",
            "default": false
          },
          "seasonId": {
            "type": "string"
          },
          "teamSeasonId": {
            "type": "string"
          },
          "onlyWithRoles": {
            "type": "boolean",
            "default": false
          },
          "includeInactive": {
            "type": "boolean",
            "default": false
          },
          "paging": {
            "type": "object",
            "properties": {
              "page": {
                "type": "number",
                "nullable": true,
                "default": 1
              },
              "limit": {
                "type": "number",
                "minimum": 1,
                "maximum": 100,
                "default": 50
              },
              "skip": {
                "type": "number",
                "nullable": true,
                "minimum": 0,
                "default": 0
              },
              "sortBy": {
                "type": "string"
              },
              "sortOrder": {
                "type": "string",
                "enum": [
                  "asc",
                  "desc"
                ],
                "default": "asc"
              }
            },
            "default": {
              "page": 1,
              "limit": 50,
              "skip": 0,
              "sortOrder": "asc"
            }
          }
        }
      },
      "PlayerBattingStats": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "string",
            "pattern": "^d+$"
          },
          "playerName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "teams": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100
            }
          },
          "teamName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "ab": {
            "type": "number",
            "minimum": 0
          },
          "h": {
            "type": "number",
            "minimum": 0
          },
          "r": {
            "type": "number",
            "minimum": 0
          },
          "d": {
            "type": "number",
            "minimum": 0
          },
          "t": {
            "type": "number",
            "minimum": 0
          },
          "hr": {
            "type": "number",
            "minimum": 0
          },
          "rbi": {
            "type": "number",
            "minimum": 0
          },
          "bb": {
            "type": "number",
            "minimum": 0
          },
          "so": {
            "type": "number",
            "minimum": 0
          },
          "hbp": {
            "type": "number",
            "minimum": 0
          },
          "sb": {
            "type": "number",
            "minimum": 0
          },
          "sf": {
            "type": "number",
            "minimum": 0
          },
          "sh": {
            "type": "number",
            "minimum": 0
          },
          "avg": {
            "type": "number",
            "minimum": 0
          },
          "obp": {
            "type": "number",
            "minimum": 0
          },
          "slg": {
            "type": "number",
            "minimum": 0
          },
          "ops": {
            "type": "number",
            "minimum": 0
          },
          "tb": {
            "type": "number",
            "minimum": 0
          },
          "pa": {
            "type": "number",
            "minimum": 0
          }
        },
        "required": [
          "playerId",
          "playerName",
          "teamName",
          "ab",
          "h",
          "r",
          "d",
          "t",
          "hr",
          "rbi",
          "bb",
          "so",
          "hbp",
          "sb",
          "sf",
          "sh",
          "avg",
          "obp",
          "slg",
          "ops",
          "tb",
          "pa"
        ]
      },
      "PlayerBattingStatsBrief": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "string",
            "pattern": "^d+$"
          },
          "playerName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "ab": {
            "type": "number",
            "minimum": 0
          },
          "h": {
            "type": "number",
            "minimum": 0
          },
          "r": {
            "type": "number",
            "minimum": 0
          },
          "d": {
            "type": "number",
            "minimum": 0
          },
          "t": {
            "type": "number",
            "minimum": 0
          },
          "hr": {
            "type": "number",
            "minimum": 0
          },
          "rbi": {
            "type": "number",
            "minimum": 0
          },
          "bb": {
            "type": "number",
            "minimum": 0
          },
          "so": {
            "type": "number",
            "minimum": 0
          },
          "avg": {
            "type": "number",
            "minimum": 0
          },
          "obp": {
            "type": "number",
            "minimum": 0
          },
          "slg": {
            "type": "number",
            "minimum": 0
          },
          "ops": {
            "type": "number",
            "minimum": 0
          }
        },
        "required": [
          "playerId",
          "playerName",
          "ab",
          "h",
          "r",
          "d",
          "t",
          "hr",
          "rbi",
          "bb",
          "so",
          "avg",
          "obp",
          "slg",
          "ops"
        ]
      },
      "PlayerPitchingStats": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "string",
            "pattern": "^d+$"
          },
          "playerName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "teams": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100
            }
          },
          "teamName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "ip": {
            "type": "number",
            "minimum": 0
          },
          "ip2": {
            "type": "number",
            "minimum": 0
          },
          "w": {
            "type": "number",
            "minimum": 0
          },
          "l": {
            "type": "number",
            "minimum": 0
          },
          "s": {
            "type": "number",
            "minimum": 0
          },
          "h": {
            "type": "number",
            "minimum": 0
          },
          "r": {
            "type": "number",
            "minimum": 0
          },
          "er": {
            "type": "number",
            "minimum": 0
          },
          "bb": {
            "type": "number",
            "minimum": 0
          },
          "so": {
            "type": "number",
            "minimum": 0
          },
          "hr": {
            "type": "number",
            "minimum": 0
          },
          "bf": {
            "type": "number",
            "minimum": 0
          },
          "wp": {
            "type": "number",
            "minimum": 0
          },
          "hbp": {
            "type": "number",
            "minimum": 0
          },
          "era": {
            "type": "number",
            "minimum": 0
          },
          "whip": {
            "type": "number",
            "minimum": 0
          },
          "k9": {
            "type": "number",
            "minimum": 0
          },
          "bb9": {
            "type": "number",
            "minimum": 0
          },
          "oba": {
            "type": "number",
            "minimum": 0
          },
          "slg": {
            "type": "number",
            "minimum": 0
          },
          "ipDecimal": {
            "type": "number",
            "minimum": 0
          }
        },
        "required": [
          "playerId",
          "playerName",
          "teamName",
          "ip",
          "ip2",
          "w",
          "l",
          "s",
          "h",
          "r",
          "er",
          "bb",
          "so",
          "hr",
          "bf",
          "wp",
          "hbp",
          "era",
          "whip",
          "k9",
          "bb9",
          "oba",
          "slg",
          "ipDecimal"
        ]
      },
      "PlayerPitchingStatsBrief": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "string",
            "pattern": "^d+$"
          },
          "playerName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "w": {
            "type": "number",
            "minimum": 0
          },
          "l": {
            "type": "number",
            "minimum": 0
          },
          "s": {
            "type": "number",
            "minimum": 0
          },
          "h": {
            "type": "number",
            "minimum": 0
          },
          "r": {
            "type": "number",
            "minimum": 0
          },
          "er": {
            "type": "number",
            "minimum": 0
          },
          "bb": {
            "type": "number",
            "minimum": 0
          },
          "so": {
            "type": "number",
            "minimum": 0
          },
          "era": {
            "type": "number",
            "minimum": 0
          },
          "whip": {
            "type": "number",
            "minimum": 0
          },
          "ip": {
            "type": "string",
            "description": "Innings pitched, rounded to nearest whole inning"
          }
        },
        "required": [
          "playerId",
          "playerName",
          "w",
          "l",
          "s",
          "h",
          "r",
          "er",
          "bb",
          "so",
          "era",
          "whip",
          "ip"
        ]
      },
      "BattingStatisticsFilters": {
        "type": "object",
        "properties": {
          "leagueId": {
            "type": "string"
          },
          "divisionId": {
            "type": "string"
          },
          "teamId": {
            "type": "string"
          },
          "isHistorical": {
            "type": "boolean",
            "default": false
          },
          "includeAllGameTypes": {
            "type": "boolean",
            "default": false
          },
          "page": {
            "type": "string",
            "default": 1
          },
          "pageSize": {
            "type": "string",
            "default": 50
          },
          "minAB": {
            "type": "string",
            "default": 10
          },
          "sortField": {
            "type": "string",
            "default": "avg"
          },
          "sortOrder": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "default": "desc"
          }
        }
      },
      "PitchingStatisticsFilters": {
        "type": "object",
        "properties": {
          "leagueId": {
            "type": "string"
          },
          "divisionId": {
            "type": "string"
          },
          "teamId": {
            "type": "string"
          },
          "isHistorical": {
            "type": "boolean",
            "default": false
          },
          "includeAllGameTypes": {
            "type": "boolean",
            "default": false
          },
          "page": {
            "type": "string",
            "default": 1
          },
          "pageSize": {
            "type": "string",
            "default": 50
          },
          "minIP": {
            "type": "string",
            "default": 1
          },
          "sortField": {
            "type": "string",
            "default": "era"
          },
          "sortOrder": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "default": "asc"
          }
        }
      },
      "LeaderStatisticsFilters": {
        "type": "object",
        "properties": {
          "leagueId": {
            "type": "string"
          },
          "divisionId": {
            "type": "string"
          },
          "teamId": {
            "type": "string"
          },
          "isHistorical": {
            "type": "boolean",
            "default": false
          },
          "includeAllGameTypes": {
            "type": "boolean",
            "default": false
          },
          "page": {
            "type": "string",
            "default": 1
          },
          "pageSize": {
            "type": "string",
            "default": 50
          },
          "minAB": {
            "type": "string",
            "default": 0
          },
          "minIP": {
            "type": "string",
            "default": 0
          },
          "limit": {
            "type": "string",
            "default": 5
          }
        }
      },
      "LeaderRow": {
        "type": "object",
        "properties": {
          "playerId": {
            "type": "string",
            "pattern": "^d+$"
          },
          "playerName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "teams": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100
            }
          },
          "teamName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "statValue": {
            "type": "number",
            "minimum": 0
          },
          "category": {
            "type": "string"
          },
          "rank": {
            "type": "number"
          },
          "isTie": {
            "type": "boolean"
          },
          "tieCount": {
            "type": "number"
          }
        },
        "required": [
          "playerId",
          "playerName",
          "teamName",
          "statValue",
          "category",
          "rank"
        ]
      },
      "LeaderCategories": {
        "type": "object",
        "properties": {
          "batting": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                },
                "format": {
                  "type": "string"
                }
              },
              "required": [
                "key",
                "label",
                "format"
              ]
            }
          },
          "pitching": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                },
                "format": {
                  "type": "string"
                }
              },
              "required": [
                "key",
                "label",
                "format"
              ]
            }
          }
        },
        "required": [
          "batting",
          "pitching"
        ]
      },
      "RecentGamesQuery": {
        "type": "object",
        "properties": {
          "upcoming": {
            "type": "boolean",
            "default": true,
            "description": "Include upcoming games"
          },
          "recent": {
            "type": "boolean",
            "default": true,
            "description": "Include recent games"
          },
          "limit": {
            "type": "number",
            "minimum": 1,
            "maximum": 20,
            "default": 5,
            "description": "Maximum number of games to return for each category"
          }
        }
      },
      "BaseballPosition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "name": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "enum": [
              "pitching",
              "infield",
              "outfield",
              "catching",
              "utility"
            ]
          },
          "abbreviation": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "category",
          "abbreviation"
        ],
        "title": "BaseballPosition",
        "description": "Baseball position metadata used in player classifieds"
      },
      "ExperienceLevel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "yearsRequired": {
            "type": "number"
          },
          "skillLevel": {
            "type": "string",
            "enum": [
              "beginner",
              "intermediate",
              "advanced",
              "expert"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "yearsRequired",
          "skillLevel"
        ],
        "title": "ExperienceLevel",
        "description": "Experience level metadata used in player classifieds"
      },
      "AccountPoll": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "accountId": {
            "type": "string"
          },
          "question": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "active": {
            "type": "boolean"
          },
          "totalVotes": {
            "type": "integer",
            "minimum": 0
          },
          "options": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "optionText": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                },
                "priority": {
                  "type": "integer"
                },
                "voteCount": {
                  "type": "integer",
                  "minimum": 0
                }
              },
              "required": [
                "id",
                "optionText",
                "priority",
                "voteCount"
              ]
            }
          },
          "userVoteOptionId": {
            "type": "string",
            "description": "Identifier of the option selected by the authenticated contact when retrieving polls scoped to a contact."
          }
        },
        "required": [
          "id",
          "accountId",
          "question",
          "active",
          "totalVotes",
          "options"
        ]
      },
      "CreatePoll": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "active": {
            "type": "boolean",
            "default": true
          },
          "options": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "optionText": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                },
                "priority": {
                  "type": "integer"
                }
              },
              "required": [
                "optionText"
              ]
            },
            "minItems": 2
          }
        },
        "required": [
          "question",
          "options"
        ]
      },
      "UpdatePoll": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "active": {
            "type": "boolean",
            "default": true
          },
          "options": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "optionText": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                },
                "priority": {
                  "type": "integer"
                }
              },
              "required": [
                "optionText"
              ]
            }
          },
          "deletedOptionIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PollVoteRequest": {
        "type": "object",
        "properties": {
          "optionId": {
            "type": "string"
          }
        },
        "required": [
          "optionId"
        ]
      },
      "WorkoutSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "workoutDesc": {
            "type": "string"
          },
          "workoutDate": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 date-time string"
          },
          "field": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "shortName": {
                "type": "string",
                "maxLength": 5
              },
              "address": {
                "type": "string",
                "nullable": true,
                "maxLength": 255
              },
              "city": {
                "type": "string",
                "nullable": true,
                "maxLength": 25
              },
              "state": {
                "type": "string",
                "nullable": true,
                "maxLength": 25
              },
              "zip": {
                "type": "string",
                "nullable": true,
                "maxLength": 10
              },
              "comment": {
                "type": "string",
                "nullable": true,
                "maxLength": 255
              },
              "directions": {
                "type": "string",
                "nullable": true,
                "maxLength": 255
              },
              "rainoutNumber": {
                "type": "string",
                "nullable": true,
                "maxLength": 15
              },
              "latitude": {
                "anyOf": [
                  {
                    "type": "string",
                    "maxLength": 25
                  },
                  {
                    "nullable": true
                  },
                  {
                    "nullable": true
                  }
                ]
              },
              "longitude": {
                "anyOf": [
                  {
                    "type": "string",
                    "maxLength": 25
                  },
                  {
                    "nullable": true
                  },
                  {
                    "nullable": true
                  }
                ]
              }
            },
            "required": [
              "id",
              "name",
              "shortName"
            ]
          },
          "registrationCount": {
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "workoutDesc",
          "workoutDate"
        ],
        "title": "WorkoutSummary",
        "description": "Public summary of a workout announcement"
      },
      "Workout": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "workoutDesc": {
            "type": "string"
          },
          "workoutDate": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 date-time string"
          },
          "field": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "shortName": {
                "type": "string",
                "maxLength": 5
              },
              "address": {
                "type": "string",
                "nullable": true,
                "maxLength": 255
              },
              "city": {
                "type": "string",
                "nullable": true,
                "maxLength": 25
              },
              "state": {
                "type": "string",
                "nullable": true,
                "maxLength": 25
              },
              "zip": {
                "type": "string",
                "nullable": true,
                "maxLength": 10
              },
              "comment": {
                "type": "string",
                "nullable": true,
                "maxLength": 255
              },
              "directions": {
                "type": "string",
                "nullable": true,
                "maxLength": 255
              },
              "rainoutNumber": {
                "type": "string",
                "nullable": true,
                "maxLength": 15
              },
              "latitude": {
                "anyOf": [
                  {
                    "type": "string",
                    "maxLength": 25
                  },
                  {
                    "nullable": true
                  },
                  {
                    "nullable": true
                  }
                ]
              },
              "longitude": {
                "anyOf": [
                  {
                    "type": "string",
                    "maxLength": 25
                  },
                  {
                    "nullable": true
                  },
                  {
                    "nullable": true
                  }
                ]
              }
            },
            "required": [
              "id",
              "name",
              "shortName"
            ]
          },
          "registrationCount": {
            "type": "integer",
            "minimum": 0
          },
          "accountId": {
            "type": "string",
            "pattern": "^d+$"
          },
          "comments": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "workoutDesc",
          "workoutDate",
          "accountId",
          "comments"
        ],
        "title": "Workout",
        "description": "Workout announcement with account context and comments"
      },
      "UpsertWorkout": {
        "type": "object",
        "properties": {
          "workoutDesc": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "workoutDate": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 date-time string"
          },
          "fieldId": {
            "type": "string",
            "nullable": true,
            "pattern": "^\\d+$"
          },
          "comments": {
            "type": "string",
            "maxLength": 2000
          }
        },
        "required": [
          "workoutDesc",
          "workoutDate"
        ],
        "title": "UpsertWorkout",
        "description": "Payload required to create or update a workout announcement"
      },
      "WorkoutRegistration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "workoutId": {
            "type": "string",
            "pattern": "^d+$"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "age": {
            "type": "integer",
            "minimum": 0
          },
          "phone1": {
            "type": "string"
          },
          "phone2": {
            "type": "string"
          },
          "phone3": {
            "type": "string"
          },
          "phone4": {
            "type": "string"
          },
          "positions": {
            "type": "string"
          },
          "isManager": {
            "type": "boolean"
          },
          "whereHeard": {
            "type": "string"
          },
          "dateRegistered": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 date-time string"
          }
        },
        "required": [
          "id",
          "workoutId",
          "name",
          "email",
          "age",
          "positions",
          "isManager",
          "whereHeard",
          "dateRegistered"
        ],
        "title": "WorkoutRegistration",
        "description": "Registration record for a workout announcement"
      },
      "WorkoutRegistrations": {
        "type": "object",
        "properties": {
          "registrations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "workoutId": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "age": {
                  "type": "integer",
                  "minimum": 0
                },
                "phone1": {
                  "type": "string"
                },
                "phone2": {
                  "type": "string"
                },
                "phone3": {
                  "type": "string"
                },
                "phone4": {
                  "type": "string"
                },
                "positions": {
                  "type": "string"
                },
                "isManager": {
                  "type": "boolean"
                },
                "whereHeard": {
                  "type": "string"
                },
                "dateRegistered": {
                  "type": "string",
                  "format": "date-time",
                  "description": "ISO 8601 date-time string"
                }
              },
              "required": [
                "id",
                "workoutId",
                "name",
                "email",
                "age",
                "positions",
                "isManager",
                "whereHeard",
                "dateRegistered"
              ],
              "title": "WorkoutRegistration",
              "description": "Registration record for a workout announcement"
            }
          },
          "nextCursor": {
            "type": "string"
          }
        },
        "required": [
          "registrations"
        ],
        "title": "WorkoutRegistrations",
        "description": "Collection of workout registrations with optional pagination cursor"
      },
      "WorkoutRegistrationUpsert": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "email": {
            "type": "string",
            "maxLength": 100,
            "format": "email"
          },
          "age": {
            "type": "integer",
            "nullable": true,
            "minimum": 0
          },
          "phone1": {
            "type": "string",
            "maxLength": 14
          },
          "phone2": {
            "type": "string",
            "maxLength": 14
          },
          "phone3": {
            "type": "string",
            "maxLength": 14
          },
          "phone4": {
            "type": "string",
            "maxLength": 14
          },
          "positions": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "isManager": {
            "type": "boolean"
          },
          "whereHeard": {
            "type": "string",
            "minLength": 1,
            "maxLength": 25
          }
        },
        "required": [
          "name",
          "email",
          "age",
          "positions",
          "isManager",
          "whereHeard"
        ],
        "title": "WorkoutRegistrationUpsert",
        "description": "Payload to create or update a workout registration"
      },
      "WorkoutSources": {
        "type": "object",
        "properties": {
          "options": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 25,
              "title": "WorkoutSourceOption",
              "description": "Allowed where-heard option for workout registrations"
            }
          }
        },
        "required": [
          "options"
        ],
        "title": "WorkoutSources",
        "description": "Configured where-heard options for an account's workouts"
      },
      "WorkoutSourceOptionPayload": {
        "type": "object",
        "properties": {
          "option": {
            "type": "string",
            "minLength": 1,
            "maxLength": 25,
            "title": "WorkoutSourceOption",
            "description": "Allowed where-heard option for workout registrations"
          }
        },
        "required": [
          "option"
        ],
        "title": "WorkoutSourceOptionPayload",
        "description": "Payload containing a single where-heard option to append"
      },
      "WorkoutListQuery": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "upcoming",
              "past",
              "all"
            ],
            "description": "Filter workouts by upcoming, past, or all statuses"
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 25
          },
          "after": {
            "type": "string",
            "format": "date-time"
          },
          "before": {
            "type": "string",
            "format": "date-time"
          },
          "includeRegistrationCounts": {
            "type": "boolean",
            "default": false
          }
        },
        "title": "WorkoutListQuery",
        "description": "Query parameters to filter and paginate workout announcements"
      },
      "WorkoutRegistrationsQuery": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10000,
            "default": 10000
          }
        },
        "title": "WorkoutRegistrationsQuery",
        "description": "Query parameters to paginate workout registrations"
      },
      "DivisionSeason": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "division": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "season": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "priority": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "division",
          "priority"
        ]
      },
      "DivisionSeasonWithTeams": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "division": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "season": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "priority": {
            "type": "integer"
          },
          "teams": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 100
                },
                "team": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "webAddress": {
                      "type": "string",
                      "nullable": true
                    },
                    "youtubeUserId": {
                      "type": "string",
                      "nullable": true
                    },
                    "defaultVideo": {
                      "type": "string",
                      "nullable": true
                    },
                    "autoPlayVideo": {
                      "type": "boolean"
                    },
                    "logoUrl": {
                      "type": "string",
                      "nullable": true,
                      "format": "uri"
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                "season": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    },
                    "accountId": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "isCurrent": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "accountId"
                  ]
                },
                "league": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                },
                "division": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                },
                "playerCount": {
                  "type": "integer",
                  "minimum": 0
                },
                "managerCount": {
                  "type": "integer",
                  "minimum": 0
                }
              },
              "required": [
                "id",
                "team"
              ]
            }
          },
          "teamCount": {
            "type": "integer",
            "minimum": 0
          },
          "totalPlayers": {
            "type": "integer",
            "minimum": 0
          },
          "totalManagers": {
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "division",
          "priority",
          "teams"
        ]
      },
      "LeagueSeasonQueryParams": {
        "type": "object",
        "properties": {
          "includeTeams": {
            "type": "boolean"
          },
          "includeUnassignedTeams": {
            "type": "boolean",
            "default": false
          },
          "includePlayerCounts": {
            "type": "boolean",
            "default": false
          },
          "includeManagerCounts": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "LeagueSeason": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "league": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "season": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id",
              "name"
            ]
          }
        },
        "required": [
          "id",
          "league"
        ]
      },
      "LeagueSeasonWithDivision": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "accountId": {
            "type": "string",
            "pattern": "^d+$"
          },
          "isCurrent": {
            "type": "boolean"
          },
          "leagues": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "league": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                },
                "divisions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "pattern": "^d+$"
                      },
                      "division": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "pattern": "^d+$"
                          },
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 100
                          }
                        },
                        "required": [
                          "id",
                          "name"
                        ]
                      },
                      "priority": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "id",
                      "division",
                      "priority"
                    ]
                  }
                }
              },
              "required": [
                "id",
                "league"
              ]
            }
          }
        },
        "required": [
          "id",
          "name",
          "accountId",
          "leagues"
        ]
      },
      "LeagueSeasonWithDivisionTeamsAndUnassigned": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "league": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "season": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "divisions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "division": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                },
                "season": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                },
                "priority": {
                  "type": "integer"
                },
                "teams": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "pattern": "^d+$"
                      },
                      "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                      },
                      "team": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "pattern": "^d+$"
                          },
                          "webAddress": {
                            "type": "string",
                            "nullable": true
                          },
                          "youtubeUserId": {
                            "type": "string",
                            "nullable": true
                          },
                          "defaultVideo": {
                            "type": "string",
                            "nullable": true
                          },
                          "autoPlayVideo": {
                            "type": "boolean"
                          },
                          "logoUrl": {
                            "type": "string",
                            "nullable": true,
                            "format": "uri"
                          }
                        },
                        "required": [
                          "id"
                        ]
                      },
                      "season": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "pattern": "^d+$"
                          },
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 100
                          },
                          "accountId": {
                            "type": "string",
                            "pattern": "^d+$"
                          },
                          "isCurrent": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "accountId"
                        ]
                      },
                      "league": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "pattern": "^d+$"
                          },
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 100
                          }
                        },
                        "required": [
                          "id",
                          "name"
                        ]
                      },
                      "division": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "pattern": "^d+$"
                          },
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 100
                          }
                        },
                        "required": [
                          "id",
                          "name"
                        ]
                      },
                      "playerCount": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "managerCount": {
                        "type": "integer",
                        "minimum": 0
                      }
                    },
                    "required": [
                      "id",
                      "team"
                    ]
                  }
                },
                "teamCount": {
                  "type": "integer",
                  "minimum": 0
                },
                "totalPlayers": {
                  "type": "integer",
                  "minimum": 0
                },
                "totalManagers": {
                  "type": "integer",
                  "minimum": 0
                }
              },
              "required": [
                "id",
                "division",
                "priority",
                "teams"
              ]
            }
          },
          "unassignedTeams": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 100
                },
                "team": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "webAddress": {
                      "type": "string",
                      "nullable": true
                    },
                    "youtubeUserId": {
                      "type": "string",
                      "nullable": true
                    },
                    "defaultVideo": {
                      "type": "string",
                      "nullable": true
                    },
                    "autoPlayVideo": {
                      "type": "boolean"
                    },
                    "logoUrl": {
                      "type": "string",
                      "nullable": true,
                      "format": "uri"
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                "season": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    },
                    "accountId": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "isCurrent": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "accountId"
                  ]
                },
                "league": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                },
                "division": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                },
                "playerCount": {
                  "type": "integer",
                  "minimum": 0
                },
                "managerCount": {
                  "type": "integer",
                  "minimum": 0
                }
              },
              "required": [
                "id",
                "team"
              ]
            }
          },
          "totalTeams": {
            "type": "integer",
            "minimum": 0
          },
          "totalPlayers": {
            "type": "integer",
            "minimum": 0
          },
          "totalManagers": {
            "type": "integer",
            "minimum": 0
          },
          "unassignedTeamCount": {
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "league"
        ]
      },
      "LeagueSetup": {
        "type": "object",
        "properties": {
          "season": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "accountId": {
                "type": "string",
                "pattern": "^d+$"
              },
              "isCurrent": {
                "type": "boolean"
              }
            },
            "required": [
              "id",
              "name",
              "accountId"
            ]
          },
          "leagueSeasons": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "league": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                },
                "season": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                },
                "divisions": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "pattern": "^d+$"
                      },
                      "division": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "pattern": "^d+$"
                          },
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 100
                          }
                        },
                        "required": [
                          "id",
                          "name"
                        ]
                      },
                      "season": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "pattern": "^d+$"
                          },
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 100
                          }
                        },
                        "required": [
                          "id",
                          "name"
                        ]
                      },
                      "priority": {
                        "type": "integer"
                      },
                      "teams": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "pattern": "^d+$"
                            },
                            "name": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 100
                            },
                            "team": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "pattern": "^d+$"
                                },
                                "webAddress": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "youtubeUserId": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "defaultVideo": {
                                  "type": "string",
                                  "nullable": true
                                },
                                "autoPlayVideo": {
                                  "type": "boolean"
                                },
                                "logoUrl": {
                                  "type": "string",
                                  "nullable": true,
                                  "format": "uri"
                                }
                              },
                              "required": [
                                "id"
                              ]
                            },
                            "season": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "pattern": "^d+$"
                                },
                                "name": {
                                  "type": "string",
                                  "minLength": 1,
                                  "maxLength": 100
                                },
                                "accountId": {
                                  "type": "string",
                                  "pattern": "^d+$"
                                },
                                "isCurrent": {
                                  "type": "boolean"
                                }
                              },
                              "required": [
                                "id",
                                "name",
                                "accountId"
                              ]
                            },
                            "league": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "pattern": "^d+$"
                                },
                                "name": {
                                  "type": "string",
                                  "minLength": 1,
                                  "maxLength": 100
                                }
                              },
                              "required": [
                                "id",
                                "name"
                              ]
                            },
                            "division": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "pattern": "^d+$"
                                },
                                "name": {
                                  "type": "string",
                                  "minLength": 1,
                                  "maxLength": 100
                                }
                              },
                              "required": [
                                "id",
                                "name"
                              ]
                            },
                            "playerCount": {
                              "type": "integer",
                              "minimum": 0
                            },
                            "managerCount": {
                              "type": "integer",
                              "minimum": 0
                            }
                          },
                          "required": [
                            "id",
                            "team"
                          ]
                        }
                      },
                      "teamCount": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "totalPlayers": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "totalManagers": {
                        "type": "integer",
                        "minimum": 0
                      }
                    },
                    "required": [
                      "id",
                      "division",
                      "priority",
                      "teams"
                    ]
                  }
                },
                "unassignedTeams": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "pattern": "^d+$"
                      },
                      "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                      },
                      "team": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "pattern": "^d+$"
                          },
                          "webAddress": {
                            "type": "string",
                            "nullable": true
                          },
                          "youtubeUserId": {
                            "type": "string",
                            "nullable": true
                          },
                          "defaultVideo": {
                            "type": "string",
                            "nullable": true
                          },
                          "autoPlayVideo": {
                            "type": "boolean"
                          },
                          "logoUrl": {
                            "type": "string",
                            "nullable": true,
                            "format": "uri"
                          }
                        },
                        "required": [
                          "id"
                        ]
                      },
                      "season": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "pattern": "^d+$"
                          },
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 100
                          },
                          "accountId": {
                            "type": "string",
                            "pattern": "^d+$"
                          },
                          "isCurrent": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "accountId"
                        ]
                      },
                      "league": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "pattern": "^d+$"
                          },
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 100
                          }
                        },
                        "required": [
                          "id",
                          "name"
                        ]
                      },
                      "division": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "pattern": "^d+$"
                          },
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 100
                          }
                        },
                        "required": [
                          "id",
                          "name"
                        ]
                      },
                      "playerCount": {
                        "type": "integer",
                        "minimum": 0
                      },
                      "managerCount": {
                        "type": "integer",
                        "minimum": 0
                      }
                    },
                    "required": [
                      "id",
                      "team"
                    ]
                  }
                },
                "totalTeams": {
                  "type": "integer",
                  "minimum": 0
                },
                "totalPlayers": {
                  "type": "integer",
                  "minimum": 0
                },
                "totalManagers": {
                  "type": "integer",
                  "minimum": 0
                },
                "unassignedTeamCount": {
                  "type": "integer",
                  "minimum": 0
                }
              },
              "required": [
                "id",
                "league"
              ]
            }
          }
        },
        "required": [
          "leagueSeasons"
        ]
      },
      "League": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "accountId": {
            "type": "string",
            "pattern": "^d+$"
          }
        },
        "required": [
          "id",
          "name",
          "accountId"
        ]
      },
      "UpsertLeague": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          }
        },
        "required": [
          "name"
        ]
      },
      "Game": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "gameDate": {
            "type": "string",
            "format": "date-time"
          },
          "homeTeam": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id"
            ]
          },
          "visitorTeam": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id"
            ]
          },
          "league": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "season": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "homeScore": {
            "type": "number",
            "minimum": 0,
            "maximum": 99
          },
          "visitorScore": {
            "type": "number",
            "minimum": 0,
            "maximum": 99
          },
          "comment": {
            "type": "string",
            "maxLength": 255
          },
          "field": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              },
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 100
              },
              "shortName": {
                "type": "string",
                "maxLength": 5
              },
              "address": {
                "type": "string",
                "nullable": true,
                "maxLength": 255
              },
              "city": {
                "type": "string",
                "nullable": true,
                "maxLength": 25
              },
              "state": {
                "type": "string",
                "nullable": true,
                "maxLength": 25
              },
              "zip": {
                "type": "string",
                "nullable": true,
                "maxLength": 10
              },
              "comment": {
                "type": "string",
                "nullable": true,
                "maxLength": 255
              },
              "directions": {
                "type": "string",
                "nullable": true,
                "maxLength": 255
              },
              "rainoutNumber": {
                "type": "string",
                "nullable": true,
                "maxLength": 15
              },
              "latitude": {
                "anyOf": [
                  {
                    "type": "string",
                    "maxLength": 25
                  },
                  {
                    "nullable": true
                  },
                  {
                    "nullable": true
                  }
                ]
              },
              "longitude": {
                "anyOf": [
                  {
                    "type": "string",
                    "maxLength": 25
                  },
                  {
                    "nullable": true
                  },
                  {
                    "nullable": true
                  }
                ]
              }
            },
            "required": [
              "id",
              "name",
              "shortName"
            ]
          },
          "gameStatus": {
            "type": "number",
            "description": "0=Scheduled, 1=Final, 2=Rainout, 3=Postponed, 4=Forfeit, 5=Did Not Report"
          },
          "gameStatusText": {
            "type": "string",
            "enum": [
              "Final",
              "Rainout",
              "Postponed",
              "Did Not Report",
              "Scheduled",
              "Forfeit",
              "Unknown"
            ]
          },
          "gameStatusShortText": {
            "type": "string",
            "enum": [
              "",
              "F",
              "PPD",
              "R",
              "DNR"
            ]
          },
          "gameType": {
            "type": "number",
            "description": "0=Regular, 1=Playoff, 2=Exhibition"
          },
          "hasGameRecap": {
            "type": "boolean"
          },
          "umpire1": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              }
            },
            "required": [
              "id"
            ]
          },
          "umpire2": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              }
            },
            "required": [
              "id"
            ]
          },
          "umpire3": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              }
            },
            "required": [
              "id"
            ]
          },
          "umpire4": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              }
            },
            "required": [
              "id"
            ]
          }
        },
        "required": [
          "id",
          "gameDate",
          "homeTeam",
          "visitorTeam",
          "league",
          "homeScore",
          "visitorScore",
          "gameStatus",
          "gameType"
        ]
      },
      "GameResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "homeScore": {
            "type": "number",
            "minimum": 0,
            "maximum": 99
          },
          "visitorScore": {
            "type": "number",
            "minimum": 0,
            "maximum": 99
          },
          "gameStatus": {
            "type": "number",
            "description": "0=Scheduled, 1=Final, 2=Rainout, 3=Postponed, 4=Forfeit, 5=Did Not Report"
          }
        },
        "required": [
          "id",
          "homeScore",
          "visitorScore",
          "gameStatus"
        ]
      },
      "RecentGames": {
        "type": "object",
        "properties": {
          "upcoming": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "gameDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "homeTeam": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                "visitorTeam": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                "league": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                },
                "season": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                },
                "homeScore": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 99
                },
                "visitorScore": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 99
                },
                "comment": {
                  "type": "string",
                  "maxLength": 255
                },
                "field": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    },
                    "shortName": {
                      "type": "string",
                      "maxLength": 5
                    },
                    "address": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 255
                    },
                    "city": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 25
                    },
                    "state": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 25
                    },
                    "zip": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 10
                    },
                    "comment": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 255
                    },
                    "directions": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 255
                    },
                    "rainoutNumber": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 15
                    },
                    "latitude": {
                      "anyOf": [
                        {
                          "type": "string",
                          "maxLength": 25
                        },
                        {
                          "nullable": true
                        },
                        {
                          "nullable": true
                        }
                      ]
                    },
                    "longitude": {
                      "anyOf": [
                        {
                          "type": "string",
                          "maxLength": 25
                        },
                        {
                          "nullable": true
                        },
                        {
                          "nullable": true
                        }
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "shortName"
                  ]
                },
                "gameStatus": {
                  "type": "number",
                  "description": "0=Scheduled, 1=Final, 2=Rainout, 3=Postponed, 4=Forfeit, 5=Did Not Report"
                },
                "gameStatusText": {
                  "type": "string",
                  "enum": [
                    "Final",
                    "Rainout",
                    "Postponed",
                    "Did Not Report",
                    "Scheduled",
                    "Forfeit",
                    "Unknown"
                  ]
                },
                "gameStatusShortText": {
                  "type": "string",
                  "enum": [
                    "",
                    "F",
                    "PPD",
                    "R",
                    "DNR"
                  ]
                },
                "gameType": {
                  "type": "number",
                  "description": "0=Regular, 1=Playoff, 2=Exhibition"
                },
                "hasGameRecap": {
                  "type": "boolean"
                },
                "umpire1": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                "umpire2": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                "umpire3": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                "umpire4": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              },
              "required": [
                "id",
                "gameDate",
                "homeTeam",
                "visitorTeam",
                "league",
                "homeScore",
                "visitorScore",
                "gameStatus",
                "gameType"
              ]
            }
          },
          "recent": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "gameDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "homeTeam": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                "visitorTeam": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                "league": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                },
                "season": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                },
                "homeScore": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 99
                },
                "visitorScore": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 99
                },
                "comment": {
                  "type": "string",
                  "maxLength": 255
                },
                "field": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    },
                    "shortName": {
                      "type": "string",
                      "maxLength": 5
                    },
                    "address": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 255
                    },
                    "city": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 25
                    },
                    "state": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 25
                    },
                    "zip": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 10
                    },
                    "comment": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 255
                    },
                    "directions": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 255
                    },
                    "rainoutNumber": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 15
                    },
                    "latitude": {
                      "anyOf": [
                        {
                          "type": "string",
                          "maxLength": 25
                        },
                        {
                          "nullable": true
                        },
                        {
                          "nullable": true
                        }
                      ]
                    },
                    "longitude": {
                      "anyOf": [
                        {
                          "type": "string",
                          "maxLength": 25
                        },
                        {
                          "nullable": true
                        },
                        {
                          "nullable": true
                        }
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "shortName"
                  ]
                },
                "gameStatus": {
                  "type": "number",
                  "description": "0=Scheduled, 1=Final, 2=Rainout, 3=Postponed, 4=Forfeit, 5=Did Not Report"
                },
                "gameStatusText": {
                  "type": "string",
                  "enum": [
                    "Final",
                    "Rainout",
                    "Postponed",
                    "Did Not Report",
                    "Scheduled",
                    "Forfeit",
                    "Unknown"
                  ]
                },
                "gameStatusShortText": {
                  "type": "string",
                  "enum": [
                    "",
                    "F",
                    "PPD",
                    "R",
                    "DNR"
                  ]
                },
                "gameType": {
                  "type": "number",
                  "description": "0=Regular, 1=Playoff, 2=Exhibition"
                },
                "hasGameRecap": {
                  "type": "boolean"
                },
                "umpire1": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                "umpire2": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                "umpire3": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                "umpire4": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              },
              "required": [
                "id",
                "gameDate",
                "homeTeam",
                "visitorTeam",
                "league",
                "homeScore",
                "visitorScore",
                "gameStatus",
                "gameType"
              ]
            }
          }
        },
        "required": [
          "upcoming",
          "recent"
        ]
      },
      "GamesWithRecaps": {
        "type": "object",
        "properties": {
          "games": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "gameDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "homeTeam": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                "visitorTeam": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                "league": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                },
                "season": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                },
                "homeScore": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 99
                },
                "visitorScore": {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 99
                },
                "comment": {
                  "type": "string",
                  "maxLength": 255
                },
                "field": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 100
                    },
                    "shortName": {
                      "type": "string",
                      "maxLength": 5
                    },
                    "address": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 255
                    },
                    "city": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 25
                    },
                    "state": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 25
                    },
                    "zip": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 10
                    },
                    "comment": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 255
                    },
                    "directions": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 255
                    },
                    "rainoutNumber": {
                      "type": "string",
                      "nullable": true,
                      "maxLength": 15
                    },
                    "latitude": {
                      "anyOf": [
                        {
                          "type": "string",
                          "maxLength": 25
                        },
                        {
                          "nullable": true
                        },
                        {
                          "nullable": true
                        }
                      ]
                    },
                    "longitude": {
                      "anyOf": [
                        {
                          "type": "string",
                          "maxLength": 25
                        },
                        {
                          "nullable": true
                        },
                        {
                          "nullable": true
                        }
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "shortName"
                  ]
                },
                "gameStatus": {
                  "type": "number",
                  "description": "0=Scheduled, 1=Final, 2=Rainout, 3=Postponed, 4=Forfeit, 5=Did Not Report"
                },
                "gameStatusText": {
                  "type": "string",
                  "enum": [
                    "Final",
                    "Rainout",
                    "Postponed",
                    "Did Not Report",
                    "Scheduled",
                    "Forfeit",
                    "Unknown"
                  ]
                },
                "gameStatusShortText": {
                  "type": "string",
                  "enum": [
                    "",
                    "F",
                    "PPD",
                    "R",
                    "DNR"
                  ]
                },
                "gameType": {
                  "type": "number",
                  "description": "0=Regular, 1=Playoff, 2=Exhibition"
                },
                "hasGameRecap": {
                  "type": "boolean"
                },
                "umpire1": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                "umpire2": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                "umpire3": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                "umpire4": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "pattern": "^d+$"
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                "recaps": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "team": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "pattern": "^d+$"
                          },
                          "name": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 100
                          }
                        },
                        "required": [
                          "id"
                        ]
                      },
                      "recap": {
                        "type": "string",
                        "maxLength": 5000
                      }
                    },
                    "required": [
                      "team",
                      "recap"
                    ]
                  }
                }
              },
              "required": [
                "id",
                "gameDate",
                "homeTeam",
                "visitorTeam",
                "league",
                "homeScore",
                "visitorScore",
                "gameStatus",
                "gameType"
              ]
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "page": {
                "type": "number"
              },
              "limit": {
                "type": "number"
              },
              "total": {
                "type": "number"
              }
            },
            "required": [
              "page",
              "limit",
              "total"
            ]
          }
        },
        "required": [
          "games",
          "pagination"
        ]
      },
      "Handout": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "fileName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "Original file name associated with the handout"
          },
          "accountId": {
            "type": "string",
            "pattern": "^d+$"
          },
          "teamId": {
            "type": "string",
            "pattern": "^d+$"
          },
          "downloadUrl": {
            "type": "string",
            "format": "uri",
            "description": "API endpoint to download the handout file"
          }
        },
        "required": [
          "description",
          "id",
          "fileName",
          "accountId",
          "downloadUrl"
        ],
        "title": "Handout",
        "description": "Represents a downloadable handout file for an account or team"
      },
      "HandoutList": {
        "type": "object",
        "properties": {
          "handouts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255
                },
                "id": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "fileName": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 255,
                  "description": "Original file name associated with the handout"
                },
                "accountId": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "teamId": {
                  "type": "string",
                  "pattern": "^d+$"
                },
                "downloadUrl": {
                  "type": "string",
                  "format": "uri",
                  "description": "API endpoint to download the handout file"
                }
              },
              "required": [
                "description",
                "id",
                "fileName",
                "accountId",
                "downloadUrl"
              ],
              "title": "Handout",
              "description": "Represents a downloadable handout file for an account or team"
            }
          }
        },
        "required": [
          "handouts"
        ],
        "title": "HandoutList",
        "description": "List of handouts available in the requested context"
      },
      "UpsertHandout": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          }
        },
        "required": [
          "description"
        ],
        "title": "UpsertHandout",
        "description": "Payload for creating or updating a handout record"
      },
      "UpdateGameResults": {
        "type": "object",
        "properties": {
          "homeScore": {
            "type": "number",
            "minimum": 0,
            "maximum": 99
          },
          "visitorScore": {
            "type": "number",
            "minimum": 0,
            "maximum": 99
          },
          "gameStatus": {
            "type": "number",
            "description": "0=Scheduled, 1=Final, 2=Rainout, 3=Postponed, 4=Forfeit, 5=Did Not Report"
          },
          "emailPlayers": {
            "type": "boolean"
          },
          "postToTwitter": {
            "type": "boolean"
          },
          "postToBluesky": {
            "type": "boolean"
          },
          "postToFacebook": {
            "type": "boolean"
          }
        },
        "required": [
          "homeScore",
          "visitorScore",
          "gameStatus",
          "emailPlayers",
          "postToTwitter",
          "postToBluesky",
          "postToFacebook"
        ]
      },
      "UpsertGame": {
        "type": "object",
        "properties": {
          "gameDate": {
            "type": "string",
            "format": "date-time"
          },
          "gameStatus": {
            "type": "number",
            "description": "0=Scheduled, 1=Final, 2=Rainout, 3=Postponed, 4=Forfeit, 5=Did Not Report"
          },
          "gameType": {
            "type": "number",
            "description": "0=Regular, 1=Playoff, 2=Exhibition"
          },
          "comment": {
            "type": "string",
            "maxLength": 255
          },
          "leagueSeasonId": {
            "type": "string",
            "minLength": 1
          },
          "homeTeam": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "minLength": 1
              }
            },
            "required": [
              "id"
            ]
          },
          "visitorTeam": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "minLength": 1
              }
            },
            "required": [
              "id"
            ]
          },
          "field": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string",
                "minLength": 1
              }
            },
            "required": [
              "id"
            ]
          },
          "umpire1": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string",
                "minLength": 1
              }
            },
            "required": [
              "id"
            ]
          },
          "umpire2": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string",
                "minLength": 1
              }
            },
            "required": [
              "id"
            ]
          },
          "umpire3": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string",
                "minLength": 1
              }
            },
            "required": [
              "id"
            ]
          },
          "umpire4": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string",
                "minLength": 1
              }
            },
            "required": [
              "id"
            ]
          }
        },
        "required": [
          "gameDate",
          "gameStatus",
          "gameType",
          "leagueSeasonId",
          "homeTeam",
          "visitorTeam",
          "field"
        ]
      },
      "UpsertGameRecap": {
        "type": "object",
        "properties": {
          "recap": {
            "type": "string",
            "maxLength": 5000
          }
        },
        "required": [
          "recap"
        ]
      },
      "UpsertSeason": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          }
        },
        "required": [
          "name"
        ],
        "description": "Schema for creating a season"
      },
      "UpsertDivisionSeason": {
        "type": "object",
        "properties": {
          "divisionId": {
            "type": "string",
            "pattern": "^d+$"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "priority": {
            "type": "integer",
            "nullable": true
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "statusCode": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "isRetryable": {
            "type": "boolean",
            "enum": [
              false
            ]
          }
        },
        "required": [
          "message",
          "statusCode",
          "isRetryable"
        ],
        "description": "Validation error (400)",
        "example": {
          "message": "Validation failed",
          "statusCode": 400,
          "isRetryable": false
        }
      },
      "AuthenticationError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "statusCode": {
            "type": "number",
            "enum": [
              401
            ]
          },
          "isRetryable": {
            "type": "boolean",
            "enum": [
              false
            ]
          }
        },
        "required": [
          "message",
          "statusCode",
          "isRetryable"
        ],
        "description": "Authentication error (401)",
        "example": {
          "message": "Authentication required",
          "statusCode": 401,
          "isRetryable": false
        }
      },
      "AuthorizationError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "statusCode": {
            "type": "number",
            "enum": [
              403
            ]
          },
          "isRetryable": {
            "type": "boolean",
            "enum": [
              false
            ]
          }
        },
        "required": [
          "message",
          "statusCode",
          "isRetryable"
        ],
        "description": "Authorization error (403)",
        "example": {
          "message": "Access denied",
          "statusCode": 403,
          "isRetryable": false
        }
      },
      "NotFoundError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "statusCode": {
            "type": "number",
            "enum": [
              404
            ]
          },
          "isRetryable": {
            "type": "boolean",
            "enum": [
              false
            ]
          }
        },
        "required": [
          "message",
          "statusCode",
          "isRetryable"
        ],
        "description": "Resource not found error (404)",
        "example": {
          "message": "Resource not found",
          "statusCode": 404,
          "isRetryable": false
        }
      },
      "ConflictError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "statusCode": {
            "type": "number",
            "enum": [
              409
            ]
          },
          "isRetryable": {
            "type": "boolean",
            "enum": [
              false
            ]
          }
        },
        "required": [
          "message",
          "statusCode",
          "isRetryable"
        ],
        "description": "Resource conflict error (409)",
        "example": {
          "message": "Resource conflict",
          "statusCode": 409,
          "isRetryable": false
        }
      },
      "InternalServerError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "statusCode": {
            "type": "number",
            "enum": [
              500
            ]
          },
          "isRetryable": {
            "type": "boolean",
            "enum": [
              true
            ]
          }
        },
        "required": [
          "message",
          "statusCode",
          "isRetryable"
        ],
        "description": "Internal server error (500)",
        "example": {
          "message": "Internal server error",
          "statusCode": 500,
          "isRetryable": true
        }
      },
      "Paging": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "nullable": true,
            "default": 1
          },
          "limit": {
            "type": "number",
            "minimum": 1,
            "maximum": 100,
            "default": 50
          },
          "skip": {
            "type": "number",
            "nullable": true,
            "minimum": 0,
            "default": 0
          },
          "sortBy": {
            "type": "string"
          },
          "sortOrder": {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "default": "asc"
          }
        }
      },
      "RoleWithContact": {
        "type": "object",
        "properties": {
          "roleId": {
            "type": "string",
            "maxLength": 50
          },
          "roleName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "roleData": {
            "type": "string",
            "pattern": "^d+$"
          },
          "contextName": {
            "type": "string",
            "maxLength": 50
          },
          "id": {
            "type": "string",
            "pattern": "^d+$"
          },
          "accountId": {
            "type": "string",
            "pattern": "^d+$"
          },
          "contact": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "pattern": "^d+$"
              }
            },
            "required": [
              "id"
            ]
          }
        },
        "required": [
          "roleId",
          "roleData",
          "id",
          "accountId",
          "contact"
        ]
      },
      "VerifyTokenRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "token"
        ]
      },
      "ChangePasswordRequest": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "minLength": 6
          },
          "newPassword": {
            "type": "string",
            "minLength": 6
          }
        },
        "required": [
          "currentPassword",
          "newPassword"
        ]
      },
      "RoleCheckResponse": {
        "type": "object",
        "properties": {
          "hasRole": {
            "type": "boolean"
          },
          "roleLevel": {
            "type": "string"
          },
          "context": {
            "type": "string"
          }
        },
        "required": [
          "hasRole"
        ]
      },
      "ContactValidation": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "lastName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "middleName": {
            "type": "string",
            "maxLength": 50
          },
          "email": {
            "type": "string",
            "maxLength": 100,
            "format": "email"
          },
          "contactDetails": {
            "type": "object",
            "properties": {
              "phone1": {
                "type": "string",
                "nullable": true,
                "default": ""
              },
              "phone2": {
                "type": "string",
                "nullable": true,
                "default": ""
              },
              "phone3": {
                "type": "string",
                "nullable": true,
                "default": ""
              },
              "streetAddress": {
                "type": "string",
                "nullable": true,
                "maxLength": 100,
                "default": ""
              },
              "city": {
                "type": "string",
                "nullable": true,
                "maxLength": 50,
                "default": ""
              },
              "state": {
                "type": "string",
                "nullable": true,
                "maxLength": 50,
                "default": ""
              },
              "zip": {
                "type": "string",
                "nullable": true,
                "maxLength": 10,
                "default": ""
              },
              "dateOfBirth": {
                "type": "string",
                "nullable": true,
                "default": ""
              }
            }
          },
          "photo": {
            "type": "string",
            "format": "binary",
            "description": "Contact photo file"
          },
          "validationType": {
            "type": "string",
            "enum": [
              "streetAddress",
              "dateOfBirth"
            ]
          }
        },
        "required": [
          "firstName",
          "lastName",
          "validationType"
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "parameters": {}
  },
  "paths": {
    "/api/accounts/search": {
      "get": {
        "operationId": "searchAccounts",
        "summary": "Search accounts",
        "description": "Public search for accounts by name or type",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100
            },
            "required": true,
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Accounts matching the search query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountType"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/by-domain": {
      "get": {
        "operationId": "getAccountByDomain",
        "summary": "Get account by domain",
        "description": "Public lookup of an account by inbound request host domain.",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "required": true,
            "name": "host",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Account matching the provided domain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Account not found for the provided domain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}": {
      "get": {
        "operationId": "getAccountById",
        "summary": "Get account by ID",
        "description": "Retrieve account details and optional current season information.",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            },
            "required": false,
            "name": "includeCurrentSeason",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Account details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountWithSeasons"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateAccount",
        "summary": "Update account",
        "description": "Update account details. Account administrators or global administrators only.",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "accountLogoUrl": {
                    "type": "string"
                  },
                  "configuration": {
                    "type": "object",
                    "properties": {
                      "accountType": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "id",
                          "name"
                        ]
                      },
                      "firstYear": {
                        "type": "integer",
                        "nullable": true
                      },
                      "timeZone": {
                        "type": "string",
                        "nullable": true
                      },
                      "affiliation": {
                        "type": "object",
                        "nullable": true,
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string",
                            "nullable": true
                          }
                        },
                        "required": [
                          "id",
                          "name"
                        ]
                      }
                    }
                  },
                  "urls": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "url": {
                          "type": "string",
                          "minLength": 1
                        }
                      },
                      "required": [
                        "url"
                      ]
                    },
                    "default": []
                  },
                  "socials": {
                    "type": "object",
                    "properties": {
                      "twitterAccountName": {
                        "type": "string"
                      },
                      "facebookFanPage": {
                        "type": "string"
                      },
                      "youtubeUserId": {
                        "type": "string",
                        "nullable": true
                      },
                      "defaultVideo": {
                        "type": "string",
                        "nullable": true
                      },
                      "autoPlayVideo": {
                        "type": "boolean",
                        "default": false
                      }
                    }
                  },
                  "ownerContact": {
                    "type": "object",
                    "properties": {
                      "firstName": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                      },
                      "lastName": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                      },
                      "middleName": {
                        "type": "string",
                        "maxLength": 50
                      },
                      "email": {
                        "type": "string",
                        "maxLength": 100,
                        "format": "email"
                      },
                      "contactDetails": {
                        "type": "object",
                        "properties": {
                          "phone1": {
                            "type": "string",
                            "nullable": true,
                            "default": ""
                          },
                          "phone2": {
                            "type": "string",
                            "nullable": true,
                            "default": ""
                          },
                          "phone3": {
                            "type": "string",
                            "nullable": true,
                            "default": ""
                          },
                          "streetAddress": {
                            "type": "string",
                            "nullable": true,
                            "maxLength": 100,
                            "default": ""
                          },
                          "city": {
                            "type": "string",
                            "nullable": true,
                            "maxLength": 50,
                            "default": ""
                          },
                          "state": {
                            "type": "string",
                            "nullable": true,
                            "maxLength": 50,
                            "default": ""
                          },
                          "zip": {
                            "type": "string",
                            "nullable": true,
                            "maxLength": 10,
                            "default": ""
                          },
                          "dateOfBirth": {
                            "type": "string",
                            "nullable": true,
                            "default": ""
                          }
                        }
                      }
                    },
                    "required": [
                      "firstName",
                      "lastName"
                    ]
                  },
                  "seasonName": {
                    "type": "string",
                    "maxLength": 25,
                    "default": ""
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteAccount",
        "summary": "Delete account",
        "description": "Delete an account. Administrator access required.",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Account deleted"
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts": {
      "post": {
        "operationId": "createAccount",
        "summary": "Create account",
        "description": "Create a new account. Administrator access required.",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccount"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Account created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/name": {
      "get": {
        "operationId": "getAccountName",
        "summary": "Get account name",
        "description": "Retrieve the display name for an account.",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountName"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/header": {
      "get": {
        "operationId": "getAccountHeader",
        "summary": "Get account header",
        "description": "Retrieve account name and branding assets.",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account header information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountHeader"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/types": {
      "get": {
        "operationId": "getAccountTypes",
        "summary": "List account types",
        "description": "Retrieve the list of available account types.",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Account types list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/affiliations": {
      "get": {
        "operationId": "getAccountAffiliations",
        "summary": "List account affiliations",
        "description": "Retrieve the list of available account affiliations.",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Account affiliations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountAffiliation"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/twitter": {
      "put": {
        "operationId": "updateAccountTwitterSettings",
        "summary": "Update account Twitter settings",
        "description": "Update the Twitter integration settings for an account.",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountTwitterSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated account details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/urls": {
      "get": {
        "operationId": "getAccountUrls",
        "summary": "List account URLs",
        "description": "Retrieve all configured URLs for the specified account.",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account URLs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountUrl"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createAccountUrl",
        "summary": "Create account URL",
        "description": "Add a new URL to the specified account.",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountUrl"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "URL created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountUrl"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "URL already exists for this account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/urls/{urlId}": {
      "put": {
        "operationId": "updateAccountUrl",
        "summary": "Update account URL",
        "description": "Update an existing account URL.",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "urlId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountUrl"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated account URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountUrl"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Account or URL not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "URL already exists for this account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteAccountUrl",
        "summary": "Delete account URL",
        "description": "Remove a URL from the specified account.",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "urlId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "URL deleted"
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Account or URL not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/my-accounts": {
      "get": {
        "operationId": "getMyAccounts",
        "summary": "Get the authenticated user's accounts",
        "description": "Returns the accounts associated with the logged-in user via account membership.",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Accounts accessible to the authenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/managed": {
      "get": {
        "operationId": "getManagedAccounts",
        "summary": "Get accounts managed by the authenticated user",
        "description": "Returns accounts where the user holds AccountAdmin privileges or is a global Administrator.",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Accounts managed by the authenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/automatic-role-holders": {
      "get": {
        "description": "Get automatic role holders (Account Owner and Team Managers) for the current season",
        "operationId": "getAutomaticRoleHolders",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of automatic role holders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomaticRoleHolders"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/user-teams": {
      "get": {
        "description": "Get teams that the authenticated user is associated with for this account.",
        "operationId": "getAccountUserTeams",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Teams for the authenticated user within the account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamSeason"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied for this account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Current season or user teams not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/teams/{teamId}": {
      "delete": {
        "operationId": "deleteAccountTeam",
        "summary": "Delete team definition",
        "description": "Deletes a team definition when it is no longer associated with any seasons.",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Team definition deleted"
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Account administrator role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Team not found for the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Team is still assigned to one or more seasons",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while deleting the team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/fields": {
      "get": {
        "description": "List fields configured for the account. This endpoint is public.",
        "operationId": "listAccountFields",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "schema": {
              "type": "number",
              "nullable": true,
              "default": 1
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "nullable": true,
              "minimum": 0,
              "default": 0
            },
            "required": false,
            "name": "skip",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "sortBy",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "required": false,
            "name": "sortOrder",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of fields for the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Fields"
                }
              }
            }
          },
          "400": {
            "description": "Invalid paging parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a new field for the account.",
        "operationId": "createAccountField",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertField"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Field created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          },
          "400": {
            "description": "Validation error creating the field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied to manage fields for this account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/fields/{fieldId}": {
      "put": {
        "description": "Update an existing field for the account.",
        "operationId": "updateAccountField",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertField"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated field details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          },
          "400": {
            "description": "Validation error updating the field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied to manage fields for this account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Field not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete an existing field from the account.",
        "operationId": "deleteAccountField",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted field details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Field"
                }
              }
            }
          },
          "400": {
            "description": "Cannot delete field due to dependencies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied to manage fields for this account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Field not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/umpires": {
      "get": {
        "description": "List umpires configured for the account.",
        "operationId": "listAccountUmpires",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "schema": {
              "type": "number",
              "nullable": true,
              "default": 1
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "nullable": true,
              "minimum": 0,
              "default": 0
            },
            "required": false,
            "name": "skip",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "sortBy",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "required": false,
            "name": "sortOrder",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of umpires for the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Umpires"
                }
              }
            }
          },
          "400": {
            "description": "Invalid paging parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied to manage umpires for this account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/logo": {
      "post": {
        "operationId": "uploadAccountLogo",
        "summary": "Upload account logo",
        "description": "Uploads a logo for the specified account.",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "logo": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "logo"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logo uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getAccountLogo",
        "summary": "Get account logo",
        "description": "Retrieves the logo for the specified account.",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logo retrieved successfully",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteAccountLogo",
        "summary": "Delete account logo",
        "description": "Deletes the logo for the specified account.",
        "tags": [
          "Accounts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Logo deleted successfully"
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "operationId": "login",
        "summary": "Authenticate user",
        "description": "Authenticates a user with their credentials and returns a session token.",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInCredentials"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authenticated user details including the JWT token when issued.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredUser"
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Credentials are incorrect or the account is locked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error while logging in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "operationId": "registerUser",
        "summary": "Register user",
        "description": "Creates a new user account and returns authentication details.",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInCredentials"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User registered successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredUser"
                }
              }
            }
          },
          "400": {
            "description": "Invalid registration details or username already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error while registering the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "operationId": "logout",
        "summary": "Logout user",
        "description": "Acknowledges a user logout request.",
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Logout acknowledged."
          },
          "500": {
            "description": "Unexpected error while processing the logout request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/me": {
      "get": {
        "operationId": "getAuthenticatedUser",
        "summary": "Get current user",
        "description": "Returns the authenticated user details pulled from the token context.",
        "tags": [
          "Auth"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "number"
            },
            "description": "Account context to include additional user details."
          }
        ],
        "responses": {
          "200": {
            "description": "Current authenticated user information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredUser"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error while retrieving the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/verify": {
      "post": {
        "operationId": "verifyToken",
        "summary": "Verify token",
        "description": "Verifies an authentication token and returns the associated user.",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token is valid and associated user details are returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredUser"
                }
              }
            }
          },
          "400": {
            "description": "Token is missing or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Token is invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error while verifying the token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/change-password": {
      "post": {
        "operationId": "changePassword",
        "summary": "Change password",
        "description": "Allows the authenticated user to change their account password.",
        "tags": [
          "Auth"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredUser"
                }
              }
            }
          },
          "400": {
            "description": "Password requirements not met or request is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required or current password incorrect.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error while changing the password.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "operationId": "refreshToken",
        "summary": "Refresh token",
        "description": "Refreshes the authentication token for the logged-in user.",
        "tags": [
          "Auth"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token refreshed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredUser"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required or account is locked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error while refreshing the token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/check-role/{roleId}": {
      "get": {
        "operationId": "checkRole",
        "summary": "Check user role",
        "description": "Checks whether the current user has the specified role in the provided context.",
        "tags": [
          "Auth"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "number"
            },
            "description": "Account context to evaluate the role against."
          },
          {
            "name": "teamId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "number"
            },
            "description": "Team context to evaluate the role against."
          },
          {
            "name": "leagueId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "number"
            },
            "description": "League context to evaluate the role against."
          }
        ],
        "responses": {
          "200": {
            "description": "Role check result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCheckResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error while checking the role.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/contacts/me": {
      "get": {
        "description": "Get current user's contact",
        "operationId": "getCurrentUserContact",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Contacts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Current user's contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseContact"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Self-register a contact",
        "operationId": "selfRegisterContact",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Contacts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactValidation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredUser"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - Account admin required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error - e.g. duplicate email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/contacts/{contactId}/registration": {
      "delete": {
        "description": "Unlink a contact from a user",
        "operationId": "unlinkContactFromUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Contacts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Contact unlinked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseContact"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/contacts": {
      "get": {
        "description": "Search contacts by name for autocomplete",
        "operationId": "searchContacts",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Contacts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "schema": {
              "type": "string",
              "maxLength": 100
            },
            "required": false,
            "name": "q",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false,
            "name": "includeRoles",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false,
            "name": "contactDetails",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "seasonId",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "teamSeasonId",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false,
            "name": "onlyWithRoles",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false,
            "name": "includeInactive",
            "in": "query"
          },
          {
            "schema": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "number",
                  "nullable": true,
                  "default": 1
                },
                "limit": {
                  "type": "number",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 50
                },
                "skip": {
                  "type": "number",
                  "nullable": true,
                  "minimum": 0,
                  "default": 0
                },
                "sortBy": {
                  "type": "string"
                },
                "sortOrder": {
                  "type": "string",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "default": "asc"
                }
              },
              "default": {
                "page": 1,
                "limit": 50,
                "skip": 0,
                "sortOrder": "asc"
              }
            },
            "required": false,
            "name": "paging",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of matching contacts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedContact"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a new contact",
        "operationId": "createContact",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Contacts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "lastName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "middleName": {
                    "type": "string",
                    "maxLength": 50
                  },
                  "email": {
                    "type": "string",
                    "maxLength": 100,
                    "format": "email"
                  },
                  "contactDetails": {
                    "type": "object",
                    "properties": {
                      "phone1": {
                        "type": "string",
                        "nullable": true,
                        "default": ""
                      },
                      "phone2": {
                        "type": "string",
                        "nullable": true,
                        "default": ""
                      },
                      "phone3": {
                        "type": "string",
                        "nullable": true,
                        "default": ""
                      },
                      "streetAddress": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 100,
                        "default": ""
                      },
                      "city": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 50,
                        "default": ""
                      },
                      "state": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 50,
                        "default": ""
                      },
                      "zip": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 10,
                        "default": ""
                      },
                      "dateOfBirth": {
                        "type": "string",
                        "nullable": true,
                        "default": ""
                      }
                    }
                  },
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "Contact photo file"
                  }
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "lastName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "middleName": {
                    "type": "string",
                    "maxLength": 50
                  },
                  "email": {
                    "type": "string",
                    "maxLength": 100,
                    "format": "email"
                  },
                  "contactDetails": {
                    "type": "object",
                    "properties": {
                      "phone1": {
                        "type": "string",
                        "nullable": true,
                        "default": ""
                      },
                      "phone2": {
                        "type": "string",
                        "nullable": true,
                        "default": ""
                      },
                      "phone3": {
                        "type": "string",
                        "nullable": true,
                        "default": ""
                      },
                      "streetAddress": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 100,
                        "default": ""
                      },
                      "city": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 50,
                        "default": ""
                      },
                      "state": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 50,
                        "default": ""
                      },
                      "zip": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 10,
                        "default": ""
                      },
                      "dateOfBirth": {
                        "type": "string",
                        "nullable": true,
                        "default": ""
                      }
                    }
                  },
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "Contact photo file"
                  }
                }
              },
              "encoding": {
                "photo": {
                  "contentType": "image/*"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - Account admin required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error - e.g. duplicate email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/contacts/{contactId}": {
      "get": {
        "description": "Get a single contact record by its identifier within an account.",
        "operationId": "getContact",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Contacts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NamedContact"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - Account admin required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Update an account contact",
        "operationId": "updateContact",
        "summary": "Update Contact",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Contacts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "lastName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "middleName": {
                    "type": "string",
                    "maxLength": 50
                  },
                  "email": {
                    "type": "string",
                    "maxLength": 100,
                    "format": "email"
                  },
                  "contactDetails": {
                    "type": "object",
                    "properties": {
                      "phone1": {
                        "type": "string",
                        "nullable": true,
                        "default": ""
                      },
                      "phone2": {
                        "type": "string",
                        "nullable": true,
                        "default": ""
                      },
                      "phone3": {
                        "type": "string",
                        "nullable": true,
                        "default": ""
                      },
                      "streetAddress": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 100,
                        "default": ""
                      },
                      "city": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 50,
                        "default": ""
                      },
                      "state": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 50,
                        "default": ""
                      },
                      "zip": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 10,
                        "default": ""
                      },
                      "dateOfBirth": {
                        "type": "string",
                        "nullable": true,
                        "default": ""
                      }
                    }
                  },
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "Contact photo file"
                  }
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "lastName": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "middleName": {
                    "type": "string",
                    "maxLength": 50
                  },
                  "email": {
                    "type": "string",
                    "maxLength": 100,
                    "format": "email"
                  },
                  "contactDetails": {
                    "type": "object",
                    "properties": {
                      "phone1": {
                        "type": "string",
                        "nullable": true,
                        "default": ""
                      },
                      "phone2": {
                        "type": "string",
                        "nullable": true,
                        "default": ""
                      },
                      "phone3": {
                        "type": "string",
                        "nullable": true,
                        "default": ""
                      },
                      "streetAddress": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 100,
                        "default": ""
                      },
                      "city": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 50,
                        "default": ""
                      },
                      "state": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 50,
                        "default": ""
                      },
                      "zip": {
                        "type": "string",
                        "nullable": true,
                        "maxLength": 10,
                        "default": ""
                      },
                      "dateOfBirth": {
                        "type": "string",
                        "nullable": true,
                        "default": ""
                      }
                    }
                  },
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "Contact photo file"
                  }
                }
              },
              "encoding": {
                "photo": {
                  "contentType": "image/*"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - Account admin required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict error - e.g. duplicate email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a contact from an account. Use check=true to perform a dependency check without deleting and force=true to bypass dependency safeguards.",
        "operationId": "deleteContact",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Contacts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Set to true to bypass dependency checks and force deletion.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "check",
            "in": "query",
            "required": false,
            "description": "Set to true to return dependency information without deleting the contact.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dependency check result or deletion summary",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contact": {
                      "$ref": "#/components/schemas/Contact"
                    },
                    "deletedContact": {
                      "$ref": "#/components/schemas/Contact"
                    },
                    "dependencyCheck": {
                      "type": "object",
                      "properties": {
                        "canDelete": {
                          "type": "boolean"
                        },
                        "dependencies": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "table": {
                                "type": "string"
                              },
                              "count": {
                                "type": "number"
                              },
                              "description": {
                                "type": "string"
                              },
                              "riskLevel": {
                                "type": "string",
                                "enum": [
                                  "critical",
                                  "high",
                                  "medium",
                                  "low"
                                ]
                              }
                            },
                            "required": [
                              "table",
                              "count",
                              "description",
                              "riskLevel"
                            ]
                          }
                        },
                        "message": {
                          "type": "string"
                        },
                        "totalDependencies": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "canDelete",
                        "message",
                        "totalDependencies"
                      ]
                    },
                    "dependenciesDeleted": {
                      "type": "number"
                    },
                    "wasForced": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error preventing deletion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - Account admin required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/contacts/{contactId}/photo": {
      "get": {
        "description": "Retrieve a contact photo as an image stream.",
        "operationId": "getContactPhoto",
        "tags": [
          "Contacts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PNG contact photo.",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Contact or photo not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error while retrieving the contact photo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a contact photo",
        "operationId": "deleteContactPhoto",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Contacts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact photo deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - Account admin required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/contacts/{contactId}/roster": {
      "get": {
        "description": "Get a roster entry for a contact. This is information that is global to a player once they are on a team, it is not season specfic",
        "operationId": "getContactRoster",
        "tags": [
          "Contacts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Roster entry found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RosterPlayer"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Roster member or team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/registration": {
      "post": {
        "description": "Register a new user or existing user",
        "operationId": "registerContact",
        "tags": [
          "Contacts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "newUser",
                "existingUser"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactValidationWithSignIn"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contact registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredUser"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/emails/compose": {
      "post": {
        "summary": "Compose and send email",
        "description": "Creates an email for an account and queues it for immediate send or scheduled delivery.",
        "operationId": "composeAccountEmail",
        "tags": [
          "Emails"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailSend"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Email created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "emailId": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "scheduled",
                        "sending"
                      ]
                    }
                  },
                  "required": [
                    "emailId",
                    "status"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to send email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/emails": {
      "get": {
        "summary": "List account emails",
        "description": "Returns paginated email activity for an account with optional status filtering.",
        "operationId": "listAccountEmails",
        "tags": [
          "Emails"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "sending",
                "sent",
                "failed",
                "scheduled",
                "partial"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of emails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailListPaged"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to view emails",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/emails/{emailId}": {
      "get": {
        "summary": "Get email details",
        "description": "Returns delivery status, body content, recipients, and attachments for an email.",
        "operationId": "getAccountEmail",
        "tags": [
          "Emails"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailDetail"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to view email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Email not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete email",
        "description": "Deletes an email and all associated data for an account.",
        "operationId": "deleteAccountEmail",
        "tags": [
          "Emails"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Email deleted successfully"
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to delete email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Email not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/email-templates": {
      "post": {
        "summary": "Create email template",
        "description": "Creates an email template scoped to an account.",
        "operationId": "createEmailTemplate",
        "tags": [
          "Email Templates"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertEmailTemplate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Template created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplate"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to manage templates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List email templates",
        "description": "Returns account templates along with common merge variables.",
        "operationId": "listEmailTemplates",
        "tags": [
          "Email Templates"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "activeOnly",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of email templates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplatesList"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to view templates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/email-templates/{templateId}": {
      "get": {
        "summary": "Get email template",
        "description": "Returns a single email template for the given account.",
        "operationId": "getEmailTemplate",
        "tags": [
          "Email Templates"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplate"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to view template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Template not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update email template",
        "description": "Updates template metadata or content.",
        "operationId": "updateEmailTemplate",
        "tags": [
          "Email Templates"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertEmailTemplate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplate"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to manage templates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Template not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete email template",
        "description": "Soft deletes the specified email template.",
        "operationId": "deleteEmailTemplate",
        "tags": [
          "Email Templates"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to manage templates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Template not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/email-templates/{templateId}/preview": {
      "post": {
        "summary": "Preview template",
        "description": "Previews the rendered subject and body for a template using provided variables.",
        "operationId": "previewEmailTemplate",
        "tags": [
          "Email Templates"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "variables": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Preview rendered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "subject": {
                      "type": "string"
                    },
                    "body": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "subject",
                    "body"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to preview template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Template not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/emails/{emailId}/attachments": {
      "post": {
        "summary": "Upload email attachments",
        "description": "Uploads one or more attachments for an email in draft or scheduled status.",
        "operationId": "uploadEmailAttachments",
        "tags": [
          "Email Attachments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "attachments": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                },
                "required": [
                  "attachments"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Attachments uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttachmentUploadResult"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to manage attachments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Email not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List email attachments",
        "description": "Returns metadata for attachments associated with an email.",
        "operationId": "listEmailAttachments",
        "tags": [
          "Email Attachments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of attachments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttachmentUploadResult"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to view attachments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Email not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/emails/{emailId}/attachments/{attachmentId}": {
      "get": {
        "summary": "Download email attachment",
        "description": "Streams the binary contents of an email attachment.",
        "operationId": "downloadEmailAttachment",
        "tags": [
          "Email Attachments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attachment binary",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to download attachments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Attachment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete email attachment",
        "description": "Removes an email attachment from storage and the repository.",
        "operationId": "deleteEmailAttachment",
        "tags": [
          "Email Attachments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "emailId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to manage attachments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Attachment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/games/{gameId}/results": {
      "put": {
        "operationId": "updateGameResults",
        "summary": "Update game results",
        "description": "Update the final score and status for a specific game.",
        "tags": [
          "Games"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGameResults"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Game results updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameResult"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to update results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Game not found within the account/season",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/games": {
      "get": {
        "operationId": "listSeasonGames",
        "summary": "List season games",
        "description": "Retrieve games for a season with optional team, date, and recap filters.",
        "tags": [
          "Games"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Return games occurring on or after this ISO date."
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Return games occurring on or before this ISO date."
          },
          {
            "name": "teamId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "number"
            },
            "description": "Filter to games where the given team season participates."
          },
          {
            "name": "hasRecap",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "description": "Only include games that have at least one recap when true."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of games with pagination metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GamesWithRecaps"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createGame",
        "summary": "Create game",
        "description": "Create a new game within the specified league season.",
        "tags": [
          "Games"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertGame"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Game created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Game"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to manage games",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "League season or teams not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Scheduling conflict for the field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/games/{gameId}": {
      "put": {
        "operationId": "updateGame",
        "summary": "Update game",
        "description": "Update scheduling details, officials, and metadata for an existing game.",
        "tags": [
          "Games"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertGame"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Game updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Game"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to manage games",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Game not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Scheduling conflict for the field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteGame",
        "summary": "Delete game",
        "description": "Remove a scheduled game.",
        "tags": [
          "Games"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Game deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to delete games",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Game not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/games/{gameId}/recap/{teamSeasonId}": {
      "get": {
        "operationId": "getGameRecap",
        "summary": "Get game recap for team",
        "description": "Return the recap text submitted for the specified team and game.",
        "tags": [
          "Games"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recap text",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid team assignment for the game",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Game or recap not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "upsertGameRecap",
        "summary": "Upsert game recap for team",
        "description": "Create or update the recap text for a team participating in a game.",
        "tags": [
          "Games"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertGameRecap"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recap saved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to manage recaps",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Game not found for the provided context",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/handouts": {
      "get": {
        "summary": "List account handouts",
        "description": "Retrieve all handouts published for an account.",
        "operationId": "listAccountHandouts",
        "tags": [
          "Handouts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Handouts available to the account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HandoutList"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create account handout",
        "description": "Upload a new handout for the account. Requires account handout management permissions.",
        "operationId": "createAccountHandout",
        "tags": [
          "Handouts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpsertHandout"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "file": {
                        "type": "string",
                        "format": "binary",
                        "description": "Handout file to upload"
                      }
                    },
                    "required": [
                      "file"
                    ]
                  }
                ],
                "title": "UpsertHandout",
                "description": "Payload for creating or updating a handout record"
              },
              "encoding": {
                "file": {
                  "contentType": "application/octet-stream"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Handout created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Handout"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/handouts/{handoutId}": {
      "put": {
        "summary": "Update account handout",
        "description": "Update the description or replace the file for an existing account handout.",
        "operationId": "updateAccountHandout",
        "tags": [
          "Handouts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "handoutId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpsertHandout"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "file": {
                        "type": "string",
                        "format": "binary",
                        "description": "Optional replacement file for the handout"
                      }
                    }
                  }
                ],
                "title": "UpsertHandout",
                "description": "Payload for creating or updating a handout record"
              },
              "encoding": {
                "file": {
                  "contentType": "application/octet-stream"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated handout metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Handout"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Handout not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete account handout",
        "description": "Remove an account handout and its associated file.",
        "operationId": "deleteAccountHandout",
        "tags": [
          "Handouts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "handoutId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Handout deleted successfully."
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Handout not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/handouts/{handoutId}/download": {
      "get": {
        "summary": "Download account handout",
        "description": "Download the binary content of an account handout.",
        "operationId": "downloadAccountHandout",
        "tags": [
          "Handouts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "handoutId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Handout file stream.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Handout not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/teams/{teamId}/handouts": {
      "get": {
        "summary": "List team handouts",
        "description": "Retrieve all handouts shared with a team.",
        "operationId": "listTeamHandouts",
        "tags": [
          "Handouts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Handouts available to the team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HandoutList"
                }
              }
            }
          },
          "404": {
            "description": "Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create team handout",
        "description": "Upload a handout that will be available to a specific team. Requires team handout management permissions.",
        "operationId": "createTeamHandout",
        "tags": [
          "Handouts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpsertHandout"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "file": {
                        "type": "string",
                        "format": "binary",
                        "description": "Handout file to upload"
                      }
                    },
                    "required": [
                      "file"
                    ]
                  }
                ],
                "title": "UpsertHandout",
                "description": "Payload for creating or updating a handout record"
              },
              "encoding": {
                "file": {
                  "contentType": "application/octet-stream"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Handout created for the team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Handout"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/teams/{teamId}/handouts/{handoutId}": {
      "put": {
        "summary": "Update team handout",
        "description": "Update metadata or replace the file for a team handout.",
        "operationId": "updateTeamHandout",
        "tags": [
          "Handouts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "handoutId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpsertHandout"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "file": {
                        "type": "string",
                        "format": "binary",
                        "description": "Optional replacement file for the handout"
                      }
                    }
                  }
                ],
                "title": "UpsertHandout",
                "description": "Payload for creating or updating a handout record"
              },
              "encoding": {
                "file": {
                  "contentType": "application/octet-stream"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated handout metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Handout"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Handout or team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete team handout",
        "description": "Remove a team handout and its associated file.",
        "operationId": "deleteTeamHandout",
        "tags": [
          "Handouts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "handoutId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Handout deleted successfully."
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Handout or team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/teams/{teamId}/handouts/{handoutId}/download": {
      "get": {
        "summary": "Download team handout",
        "description": "Download the binary content of a team handout.",
        "operationId": "downloadTeamHandout",
        "tags": [
          "Handouts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "handoutId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Handout file stream.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Handout or team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/leagues": {
      "get": {
        "operationId": "listSeasonLeagueSeasons",
        "summary": "List league seasons",
        "description": "Retrieve all league seasons for a season, optionally including divisions, teams, and roster counts.",
        "tags": [
          "League Seasons"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "name": "includeTeams",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false,
            "name": "includeUnassignedTeams",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false,
            "name": "includePlayerCounts",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false,
            "name": "includeManagerCounts",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "League seasons for the season with optional team metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeagueSetup"
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while fetching league seasons",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "addLeagueToSeason",
        "summary": "Add league to season",
        "description": "Attach a league to the specified season for the account.",
        "tags": [
          "League Seasons"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "leagueId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Identifier of the league to attach to the season."
                  }
                },
                "required": [
                  "leagueId"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "League added to the season",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeagueSeason"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload or parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Account administrator role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Season or league not found for the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "League already added to the season",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while adding league to season",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/standings": {
      "get": {
        "operationId": "getSeasonStandings",
        "summary": "List season standings",
        "description": "Retrieve team standings for a season with optional league/division grouping.",
        "tags": [
          "League Seasons"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "grouped",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Return standings grouped by league and division when true."
          }
        ],
        "responses": {
          "200": {
            "description": "Season standings in either grouped-by-league format or as a flat list of team records.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeasonStandingsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while retrieving season standings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/leagues/{leagueSeasonId}": {
      "get": {
        "operationId": "getLeagueSeason",
        "summary": "Get league season",
        "description": "Retrieve a league season with its divisions, assigned teams, and unassigned team seasons.",
        "tags": [
          "League Seasons"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "leagueSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "League season detail with divisions and unassigned teams",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeagueSeasonWithDivisionTeamsAndUnassigned"
                }
              }
            }
          },
          "400": {
            "description": "Invalid identifiers supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to view the league season",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "League season or season not found for the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while fetching league season",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "removeLeagueFromSeason",
        "summary": "Remove league from season",
        "description": "Detach a league from the specified season when no dependent records remain.",
        "tags": [
          "League Seasons"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "leagueSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "League removed from the season",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid identifiers supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Account administrator role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "League season not found for the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "League season cannot be deleted because related data exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while removing league from season",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/leagues/{leagueSeasonId}/divisions": {
      "get": {
        "operationId": "listLeagueSeasonDivisions",
        "summary": "List league season divisions",
        "description": "Retrieve divisions within a league season including the teams assigned to each division.",
        "tags": [
          "League Seasons"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "leagueSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Divisions for the league season",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DivisionSeasonWithTeams"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid identifiers supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to view divisions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Season or league season not found for the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while fetching divisions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "addDivisionToLeagueSeason",
        "summary": "Add division to league season",
        "description": "Add a division to the league season by referencing an existing division or creating a new division definition.",
        "tags": [
          "League Seasons"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "leagueSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertDivisionSeason"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Division added to the league season",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DivisionSeason"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload or parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Account administrator role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Season, league season, or division not found for the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Division already attached to the league season or duplicate division name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while adding division to league season",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/leagues/{leagueSeasonId}/divisions/{divisionSeasonId}": {
      "put": {
        "operationId": "updateLeagueSeasonDivision",
        "summary": "Update league season division",
        "description": "Update the name or priority for a division assignment within a league season.",
        "tags": [
          "League Seasons"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "leagueSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "divisionSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "priority": {
                    "type": "integer",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Division updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload or parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Account administrator role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Season, league season, or division not found for the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while updating division",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteLeagueSeasonDivision",
        "summary": "Delete league season division",
        "description": "Remove a division assignment from a league season once all teams are unassigned.",
        "tags": [
          "League Seasons"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "leagueSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "divisionSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Division removed from the league season",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid identifiers supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Account administrator role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Season, league season, or division not found for the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Division contains teams and cannot be removed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while deleting division",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/leagues/{leagueSeasonId}/games": {
      "get": {
        "operationId": "listLeagueSeasonGames",
        "summary": "List league season games",
        "description": "Retrieve games scheduled for a league season with optional date and team filters.",
        "tags": [
          "League Seasons"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "leagueSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Include games occurring on or after this ISO date."
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Include games occurring on or before this ISO date."
          },
          {
            "name": "teamId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "number"
            },
            "description": "Filter to games where the specified team season participates."
          }
        ],
        "responses": {
          "200": {
            "description": "Games for the league season",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Game"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while fetching games",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/leagues/{leagueSeasonId}/teams": {
      "post": {
        "operationId": "createLeagueSeasonTeam",
        "summary": "Create league season team",
        "description": "Create a team season within the specified league season.",
        "tags": [
          "League Seasons"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "leagueSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Display name for the new team season."
                  }
                },
                "required": [
                  "name"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Team season created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamSeason"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload or parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Account administrator role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Season or league season not found for the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "A team with the same name already exists in this league season",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while creating the team season",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/leagues/{leagueSeasonId}/teams/{teamSeasonId}/assign-division": {
      "put": {
        "operationId": "assignLeagueSeasonTeamDivision",
        "summary": "Assign team to division",
        "description": "Assign an unassigned team season to a division within the league season.",
        "tags": [
          "League Seasons"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "leagueSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "divisionSeasonId": {
                    "type": "string",
                    "minLength": 1,
                    "description": "Division season identifier to assign the team to."
                  }
                },
                "required": [
                  "divisionSeasonId"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Team assigned to the division",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload or parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Account administrator role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Season, league season, division, or team not found for the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Team is already assigned to a division",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while assigning team to division",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/leagues/{leagueSeasonId}/teams/{teamSeasonId}/remove-from-division": {
      "delete": {
        "operationId": "removeLeagueSeasonTeamDivision",
        "summary": "Remove team from division",
        "description": "Remove a team season from its current division assignment, making it unassigned.",
        "tags": [
          "League Seasons"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "leagueSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team removed from the division",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid identifiers supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Account administrator role required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Season, league season, or team not found for the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while removing team from division",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/leagues": {
      "get": {
        "operationId": "listAccountLeagues",
        "summary": "List account leagues",
        "description": "Retrieve all leagues belonging to an account. Requires authentication.",
        "tags": [
          "Leagues"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of leagues for the account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/League"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid account id provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to view leagues for the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createLeague",
        "summary": "Create league",
        "description": "Create a new league for the specified account.",
        "tags": [
          "Leagues"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLeague"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "League created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/League"
                }
              }
            }
          },
          "400": {
            "description": "Validation error creating league",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Account admin privileges required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "409": {
            "description": "A league with this name already exists for the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/leagues/all-time": {
      "get": {
        "operationId": "listAllTimeLeagues",
        "summary": "List all-time leagues",
        "description": "Retrieve leagues that have at least one associated season for public all-time statistics.",
        "tags": [
          "Leagues"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of leagues with seasons for the account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/League"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid account id provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/leagues/{leagueId}": {
      "get": {
        "operationId": "getLeague",
        "summary": "Get league",
        "description": "Retrieve the details for a league within the specified account.",
        "tags": [
          "Leagues"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "leagueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "League details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/League"
                }
              }
            }
          },
          "400": {
            "description": "Invalid account or league id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to access the league",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "League not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateLeague",
        "summary": "Update league",
        "description": "Update the details for a league within the specified account.",
        "tags": [
          "Leagues"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "leagueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLeague"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "League updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/League"
                }
              }
            }
          },
          "400": {
            "description": "Validation error updating league",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Account admin privileges required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "League not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "A league with this name already exists for the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteLeague",
        "summary": "Delete league",
        "description": "Delete a league from the account. The operation fails if related seasons are still associated.",
        "tags": [
          "Leagues"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "leagueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "League deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Validation error deleting league",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Account admin privileges required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "League not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/managers": {
      "get": {
        "description": "List managers for the given team and season",
        "operationId": "listTeamManagers",
        "tags": [
          "Managers"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team managers retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamManager"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - Account admin required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Add a manager to the team for the given season",
        "operationId": "addManager",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Managers"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertTeamManager"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Manager added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamManager"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - Account admin required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Manager not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/managers": {
      "get": {
        "description": "List managers for the given season",
        "operationId": "listSeasonManagers",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Managers"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "leagueSeasonId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "number"
            },
            "description": "Filter managers by league season id"
          },
          {
            "name": "teamSeasonId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "number"
            },
            "description": "Filter managers by team season id"
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter managers by contact name or email"
          }
        ],
        "responses": {
          "200": {
            "description": "Season managers retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeasonManagerList"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - Account admin required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/managers/{managerId}": {
      "delete": {
        "description": "Remove a manager from the team for the given season",
        "operationId": "removeManager",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Managers"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "managerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Manager removed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - Account admin required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Manager not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/passwordReset/request": {
      "post": {
        "summary": "Request password reset",
        "description": "Creates a password reset token for the supplied email address and sends a reset message when that account exists.",
        "operationId": "requestPasswordReset",
        "tags": [
          "Password Reset"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset token generated and email sent when the account exists.",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": {
                          "type": "boolean"
                        },
                        "message": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "success",
                        "message"
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Unable to generate or deliver the password reset token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/passwordReset/verify": {
      "post": {
        "summary": "Verify password reset token",
        "description": "Validates a password reset token before allowing a password change.",
        "operationId": "verifyPasswordResetToken",
        "tags": [
          "Password Reset"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "required": [
                  "token"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token verification result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "valid": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "valid"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Reset token missing or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while verifying the token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/passwordReset/reset": {
      "post": {
        "summary": "Reset password",
        "description": "Resets the user password when provided with a valid reset token.",
        "operationId": "resetPasswordWithToken",
        "tags": [
          "Password Reset"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "minLength": 1
                  },
                  "newPassword": {
                    "type": "string",
                    "minLength": 6
                  }
                },
                "required": [
                  "token",
                  "newPassword"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset completed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid reset token or new password.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while resetting the password.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/passwordReset/cleanup": {
      "delete": {
        "summary": "Clean up expired password reset tokens",
        "description": "Deletes expired password reset tokens. Administrator access is required.",
        "operationId": "cleanupExpiredPasswordResetTokens",
        "tags": [
          "Password Reset"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Number of expired tokens removed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          "401": {
            "description": "Authentication required.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "User lacks administrator privileges.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while cleaning up tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/player-classifieds/players-wanted": {
      "post": {
        "operationId": "createPlayersWantedClassified",
        "summary": "Create Players Wanted classified",
        "description": "Create a Players Wanted classified for an authenticated account member.",
        "tags": [
          "Player Classifieds"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPlayersWantedClassified"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Players Wanted classified created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayersWantedClassified"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Account or contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "listPlayersWantedClassifieds",
        "summary": "List Players Wanted classifieds",
        "description": "Retrieve paginated Players Wanted classifieds for the specified account.",
        "tags": [
          "Player Classifieds"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "dateCreated",
                "relevance"
              ],
              "default": "dateCreated"
            },
            "required": false,
            "name": "sortBy",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "required": false,
            "name": "sortOrder",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "maxLength": 200
            },
            "required": false,
            "name": "searchQuery",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Players Wanted classifieds",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayersWantedClassifiedPaged"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/player-classifieds/teams-wanted": {
      "post": {
        "operationId": "createTeamsWantedClassified",
        "summary": "Create Teams Wanted classified",
        "description": "Create a Teams Wanted classified for a public user using an access code workflow.",
        "tags": [
          "Player Classifieds"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertTeamsWantedClassified"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Teams Wanted classified created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamsWantedOwnerClassified"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "listTeamsWantedClassifieds",
        "summary": "List Teams Wanted classifieds",
        "description": "Retrieve paginated Teams Wanted classifieds for authenticated account members.",
        "tags": [
          "Player Classifieds"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "dateCreated",
                "relevance"
              ],
              "default": "dateCreated"
            },
            "required": false,
            "name": "sortBy",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "required": false,
            "name": "sortOrder",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "maxLength": 200
            },
            "required": false,
            "name": "searchQuery",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Teams Wanted classifieds",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamsWantedPublicClassifiedPaged"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/player-classifieds/teams-wanted/{classifiedId}/verify": {
      "post": {
        "operationId": "verifyTeamsWantedAccess",
        "summary": "Verify Teams Wanted access code",
        "description": "Verify an access code and return the Teams Wanted classified owner view.",
        "tags": [
          "Player Classifieds"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "classifiedId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamsWantedAccessCode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verified Teams Wanted classified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamsWantedOwnerClassified"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Classified not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/player-classifieds/teams-wanted/access-code": {
      "post": {
        "operationId": "getTeamsWantedByAccessCode",
        "summary": "Get Teams Wanted classified by access code",
        "description": "Retrieve a Teams Wanted classified owner view using an access code.",
        "tags": [
          "Player Classifieds"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamsWantedAccessCode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Teams Wanted classified owner view",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamsWantedOwnerClassified"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Classified not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/player-classifieds/teams-wanted/{classifiedId}": {
      "put": {
        "operationId": "updateTeamsWantedClassified",
        "summary": "Update Teams Wanted classified",
        "description": "Update a Teams Wanted classified using either account authentication or access code.",
        "tags": [
          "Player Classifieds"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {}
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "classifiedId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertTeamsWantedClassified"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Teams Wanted classified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamsWantedOwnerClassified"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "404": {
            "description": "Classified not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteTeamsWantedClassified",
        "summary": "Delete Teams Wanted classified",
        "description": "Delete a Teams Wanted classified using either authentication or access code.",
        "tags": [
          "Player Classifieds"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {}
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "classifiedId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamsWantedAccessCode"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Teams Wanted classified deleted"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "404": {
            "description": "Classified not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/player-classifieds/players-wanted/{classifiedId}": {
      "put": {
        "operationId": "updatePlayersWantedClassified",
        "summary": "Update Players Wanted classified",
        "description": "Update a Players Wanted classified for an authenticated account member.",
        "tags": [
          "Player Classifieds"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "classifiedId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPlayersWantedClassified"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Players Wanted classified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlayersWantedClassified"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Classified not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deletePlayersWantedClassified",
        "summary": "Delete Players Wanted classified",
        "description": "Delete a Players Wanted classified for an authenticated account member.",
        "tags": [
          "Player Classifieds"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "classifiedId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Players Wanted classified deleted"
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Classified not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/player-classifieds/teams-wanted/{classifiedId}/contact": {
      "get": {
        "operationId": "getTeamsWantedContactInfo",
        "summary": "Get Teams Wanted contact info",
        "description": "Retrieve Teams Wanted classified contact information using either account authentication or a valid access code.",
        "tags": [
          "Player Classifieds"
        ],
        "security": [
          {
            "bearerAuth": []
          },
          {}
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "classifiedId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "schema": {
              "type": "string",
              "minLength": 10,
              "maxLength": 1000
            },
            "required": false,
            "name": "accessCode",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Teams Wanted contact information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamsWantedContactInfo"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "404": {
            "description": "Classified not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/player-classifieds/players-wanted/{classifiedId}/contact": {
      "post": {
        "operationId": "contactPlayersWantedCreator",
        "summary": "Contact Players Wanted creator",
        "description": "Send a message to the creator of a Players Wanted classified.",
        "tags": [
          "Player Classifieds"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "classifiedId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactPlayersWantedCreator"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Contact request sent"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Classified not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/player-classifieds/positions": {
      "get": {
        "operationId": "listPlayerClassifiedPositions",
        "summary": "List baseball positions",
        "description": "Retrieve supported baseball positions for classifieds.",
        "tags": [
          "Player Classifieds"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Baseball positions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseballPosition"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/player-classifieds/experience-levels": {
      "get": {
        "operationId": "listPlayerClassifiedExperienceLevels",
        "summary": "List experience levels",
        "description": "Retrieve supported experience levels for classifieds.",
        "tags": [
          "Player Classifieds"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Experience levels",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExperienceLevel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/polls": {
      "get": {
        "operationId": "listAccountPolls",
        "summary": "List polls for an account",
        "tags": [
          "Polls"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Polls available for the account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountPoll"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createAccountPoll",
        "summary": "Create a poll for an account",
        "tags": [
          "Polls"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePoll"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Poll created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountPoll"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/polls/{pollId}": {
      "put": {
        "operationId": "updateAccountPoll",
        "summary": "Update an existing poll",
        "tags": [
          "Polls"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "pollId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePoll"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Poll updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountPoll"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Poll not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteAccountPoll",
        "summary": "Delete a poll",
        "tags": [
          "Polls"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "pollId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Poll deleted successfully"
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Poll not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/polls/active": {
      "get": {
        "operationId": "listActiveAccountPolls",
        "summary": "List active polls for an account",
        "tags": [
          "Polls"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Active polls for the account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountPoll"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/polls/{pollId}/vote": {
      "post": {
        "operationId": "voteOnAccountPoll",
        "summary": "Submit a vote for a poll",
        "tags": [
          "Polls"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "pollId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PollVoteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vote recorded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountPoll"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Poll not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/roster": {
      "get": {
        "description": "Get roster members for a specific team season.",
        "summary": "Get team roster members",
        "operationId": "getTeamRosterMembers",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Rosters"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Roster members returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamRosterMembers"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - Account admin required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Team season not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Sign a player to the team roster",
        "operationId": "signPlayer",
        "summary": "Sign player to roster",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Rosters"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignRosterMember"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Player signed to roster",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RosterMember"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - Account admin required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/available-players": {
      "get": {
        "description": "List contacts in the account who are not currently active on a roster in this season.",
        "summary": "List available roster players",
        "operationId": "listAvailableRosterPlayers",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Rosters"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 1
            },
            "description": "1-based page index to return."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            },
            "description": "Maximum number of contacts to return per page."
          },
          {
            "name": "firstName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter available contacts by first name."
          },
          {
            "name": "lastName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Filter available contacts by last name."
          }
        ],
        "responses": {
          "200": {
            "description": "Available players returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseContact"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - Account admin required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Team season not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/roster/{rosterMemberId}/release": {
      "put": {
        "description": "Release a player from the team for the given season",
        "operationId": "releasePlayer",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Rosters"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "rosterMemberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Player released",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RosterMember"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - Account admin required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Player not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/roster/{rosterMemberId}/activate": {
      "put": {
        "description": "Activate a released player from the team for the given season",
        "operationId": "activatePlayer",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Rosters"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "rosterMemberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Player activated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RosterMember"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - Account admin required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Player not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/roster/{rosterMemberId}": {
      "delete": {
        "description": "Delete a player from the team for the given season. This is a permanent action and cannot be undone. Use releasePlayer if you want to keep the player stats for the given team season.",
        "operationId": "deletePlayer",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Rosters"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "rosterMemberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Player deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - Account admin required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Player not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Update a roster entry for a team season",
        "operationId": "updateRosterMember",
        "summary": "Update roster entry",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Rosters"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "rosterMemberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRosterMember"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Roster entry updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RosterMember"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - Account admin required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Roster member or team not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons": {
      "get": {
        "operationId": "listAccountSeasons",
        "summary": "List account seasons",
        "description": "Fetch all seasons for the account. Optionally include division assignments for each league season.",
        "tags": [
          "Seasons"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "includeDivisions",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Include division assignments for each league season when true."
          }
        ],
        "responses": {
          "200": {
            "description": "Seasons for the account with optional league and division data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeagueSeasonWithDivision"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error while listing seasons.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createAccountSeason",
        "summary": "Create season",
        "description": "Create a season for the account. Only account administrators may perform this action.",
        "tags": [
          "Seasons"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertSeason"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Season created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeagueSeasonWithDivision"
                }
              }
            }
          },
          "400": {
            "description": "Season name is missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required to create a season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to create a season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "409": {
            "description": "A season with the same name already exists for the account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error while creating the season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/current": {
      "get": {
        "operationId": "getCurrentSeason",
        "summary": "Get current season",
        "description": "Return the account's current season with its active league assignments.",
        "tags": [
          "Seasons"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Current season and league assignments for the account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeagueSeasonWithDivision"
                }
              }
            }
          },
          "404": {
            "description": "No current season is configured for the account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error while retrieving the current season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}": {
      "get": {
        "operationId": "getAccountSeason",
        "summary": "Get season",
        "description": "Fetch a season and its league assignments within the account.",
        "tags": [
          "Seasons"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Season and its league assignments.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeagueSeasonWithDivision"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required to access the season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to view the season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Season not found for the account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error while retrieving the season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateAccountSeason",
        "summary": "Update season",
        "description": "Rename a season in the account. Only account administrators may perform this action.",
        "tags": [
          "Seasons"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertSeason"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Season updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Season"
                }
              }
            }
          },
          "400": {
            "description": "Season name is missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required to update the season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to update the season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Season not found for the account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Another season with the requested name already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error while updating the season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteAccountSeason",
        "summary": "Delete season",
        "description": "Delete a season from the account. The season must not be the current season and may fail if related data exists.",
        "tags": [
          "Seasons"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Season deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Season cannot be deleted in its current state.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required to delete the season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to delete the season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Season not found for the account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error while deleting the season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/copy": {
      "post": {
        "operationId": "copyAccountSeason",
        "summary": "Copy season",
        "description": "Copy an existing season, creating a new season with duplicated league assignments.",
        "tags": [
          "Seasons"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Season copied successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeagueSeasonWithDivision"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required to copy the season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to copy the season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Source season not found for the account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "A copied season with the generated name already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error while copying the season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/set-current": {
      "post": {
        "operationId": "setCurrentAccountSeason",
        "summary": "Set current season",
        "description": "Designate a season as the current season for the account.",
        "tags": [
          "Seasons"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Season has been set as current.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Season"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required to set the current season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to set the current season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Season not found for the account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error while setting the current season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/participants/count": {
      "get": {
        "operationId": "getSeasonParticipantCount",
        "summary": "Get season participant count",
        "description": "Return the number of participants (contacts) assigned to the season.",
        "tags": [
          "Seasons"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Participant count for the season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeasonParticipantCountData"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required to view the participant count.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions to view the participant count.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Season not found for the account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error while retrieving the participant count.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/sponsors": {
      "get": {
        "description": "List sponsors configured for an account",
        "operationId": "listAccountSponsors",
        "summary": "List account sponsors",
        "tags": [
          "Sponsors"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sponsors for the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SponsorList"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create an account sponsor",
        "operationId": "createAccountSponsor",
        "summary": "Create account sponsor",
        "tags": [
          "Sponsors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateSponsor"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "photo": {
                        "type": "string",
                        "format": "binary",
                        "description": "Sponsor photo file"
                      }
                    }
                  }
                ],
                "title": "CreateSponsor",
                "description": "Payload to create or update a sponsor"
              },
              "encoding": {
                "photo": {
                  "contentType": "image/*"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Sponsor created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sponsor"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - sponsor management permission required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/sponsors/{sponsorId}": {
      "get": {
        "description": "Retrieve a single account-level sponsor",
        "operationId": "getAccountSponsor",
        "summary": "Get account sponsor",
        "tags": [
          "Sponsors"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "sponsorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sponsor details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sponsor"
                }
              }
            }
          },
          "404": {
            "description": "Sponsor not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Update an account sponsor",
        "operationId": "updateAccountSponsor",
        "summary": "Update account sponsor",
        "tags": [
          "Sponsors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "sponsorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 50
                  },
                  "streetAddress": {
                    "type": "string",
                    "maxLength": 255
                  },
                  "cityStateZip": {
                    "type": "string",
                    "maxLength": 255
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 250
                  },
                  "email": {
                    "type": "string",
                    "maxLength": 100
                  },
                  "phone": {
                    "type": "string",
                    "maxLength": 255
                  },
                  "fax": {
                    "type": "string",
                    "maxLength": 255
                  },
                  "website": {
                    "type": "string",
                    "maxLength": 255
                  },
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "Sponsor photo file"
                  }
                }
              },
              "encoding": {
                "photo": {
                  "contentType": "image/*"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sponsor updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sponsor"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - sponsor management permission required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Sponsor not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete an account sponsor",
        "operationId": "deleteAccountSponsor",
        "summary": "Delete account sponsor",
        "tags": [
          "Sponsors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "sponsorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Sponsor deleted"
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - sponsor management permission required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Sponsor not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/sponsors": {
      "get": {
        "description": "List sponsors configured for a team season",
        "operationId": "listTeamSponsors",
        "summary": "List team sponsors",
        "tags": [
          "Sponsors"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sponsors for the team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SponsorList"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a team sponsor",
        "operationId": "createTeamSponsor",
        "summary": "Create team sponsor",
        "tags": [
          "Sponsors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 50
                  },
                  "streetAddress": {
                    "type": "string",
                    "maxLength": 255
                  },
                  "cityStateZip": {
                    "type": "string",
                    "maxLength": 255
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 250
                  },
                  "email": {
                    "type": "string",
                    "maxLength": 100
                  },
                  "phone": {
                    "type": "string",
                    "maxLength": 255
                  },
                  "fax": {
                    "type": "string",
                    "maxLength": 255
                  },
                  "website": {
                    "type": "string",
                    "maxLength": 255
                  },
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "Sponsor photo file"
                  }
                }
              },
              "encoding": {
                "photo": {
                  "contentType": "image/*"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Sponsor created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sponsor"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - team sponsor management permission required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/sponsors/{sponsorId}": {
      "put": {
        "description": "Update a team sponsor",
        "operationId": "updateTeamSponsor",
        "summary": "Update team sponsor",
        "tags": [
          "Sponsors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "sponsorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 50
                  },
                  "streetAddress": {
                    "type": "string",
                    "maxLength": 255
                  },
                  "cityStateZip": {
                    "type": "string",
                    "maxLength": 255
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 250
                  },
                  "email": {
                    "type": "string",
                    "maxLength": 100
                  },
                  "phone": {
                    "type": "string",
                    "maxLength": 255
                  },
                  "fax": {
                    "type": "string",
                    "maxLength": 255
                  },
                  "website": {
                    "type": "string",
                    "maxLength": 255
                  },
                  "photo": {
                    "type": "string",
                    "format": "binary",
                    "description": "Sponsor photo file"
                  }
                }
              },
              "encoding": {
                "photo": {
                  "contentType": "image/*"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sponsor updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sponsor"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - team sponsor management permission required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Sponsor not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a team sponsor",
        "operationId": "deleteTeamSponsor",
        "summary": "Delete team sponsor",
        "tags": [
          "Sponsors"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "sponsorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Sponsor deleted"
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied - team sponsor management permission required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Sponsor not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/statistics/leader-categories": {
      "get": {
        "operationId": "getLeaderCategories",
        "summary": "Get leader categories",
        "description": "Retrieve configured batting and pitching leader categories for an account.",
        "tags": [
          "Statistics"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leader categories retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderCategories"
                }
              }
            }
          },
          "400": {
            "description": "Invalid account id provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/statistics/batting/{leagueId}": {
      "get": {
        "operationId": "listBattingStatistics",
        "summary": "List batting statistics",
        "description": "Fetch batting statistics for a league, supporting optional division, team, and historical filters.",
        "tags": [
          "Statistics"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "leagueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "leagueId",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "divisionId",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "teamId",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false,
            "name": "isHistorical",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false,
            "name": "includeAllGameTypes",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "default": 1
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "default": 50
            },
            "required": false,
            "name": "pageSize",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "default": 10
            },
            "required": false,
            "name": "minAB",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "default": "avg"
            },
            "required": false,
            "name": "sortField",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "required": false,
            "name": "sortOrder",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Batting statistics retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerBattingStats"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/statistics/pitching/{leagueId}": {
      "get": {
        "operationId": "listPitchingStatistics",
        "summary": "List pitching statistics",
        "description": "Fetch pitching statistics for a league, supporting optional division, team, and historical filters.",
        "tags": [
          "Statistics"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "leagueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "leagueId",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "divisionId",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "teamId",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false,
            "name": "isHistorical",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false,
            "name": "includeAllGameTypes",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "default": 1
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "default": 50
            },
            "required": false,
            "name": "pageSize",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "default": 1
            },
            "required": false,
            "name": "minIP",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "default": "era"
            },
            "required": false,
            "name": "sortField",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "required": false,
            "name": "sortOrder",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Pitching statistics retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerPitchingStats"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/statistics/leaders/{leagueId}": {
      "get": {
        "operationId": "listStatisticalLeaders",
        "summary": "List statistical leaders",
        "description": "Retrieve statistical leaders for a category within a league with optional filters and limits.",
        "tags": [
          "Statistics"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "leagueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "category",
            "in": "query",
            "required": true,
            "description": "Statistic category key (for example: avg, era, hr).",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "leagueId",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "divisionId",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "required": false,
            "name": "teamId",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false,
            "name": "isHistorical",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false,
            "name": "includeAllGameTypes",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "default": 1
            },
            "required": false,
            "name": "page",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "default": 50
            },
            "required": false,
            "name": "pageSize",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "default": 0
            },
            "required": false,
            "name": "minAB",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "default": 0
            },
            "required": false,
            "name": "minIP",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "default": 5
            },
            "required": false,
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Leader board retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaderRow"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/record": {
      "get": {
        "operationId": "getTeamSeasonRecord",
        "summary": "Get team season record",
        "description": "Retrieve the win/loss/tie record for a specific team within a season.",
        "tags": [
          "Statistics"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team season record retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamSeasonRecord"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Team season not found for the provided account and season",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/games": {
      "get": {
        "operationId": "listTeamSeasonGames",
        "summary": "List team games",
        "description": "Return the recent and upcoming games for a team season with optional limits by category.",
        "tags": [
          "Statistics"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "schema": {
              "type": "boolean",
              "default": true,
              "description": "Include upcoming games"
            },
            "required": false,
            "description": "Include upcoming games",
            "name": "upcoming",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "default": true,
              "description": "Include recent games"
            },
            "required": false,
            "description": "Include recent games",
            "name": "recent",
            "in": "query"
          },
          {
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 20,
              "default": 5,
              "description": "Maximum number of games to return for each category"
            },
            "required": false,
            "description": "Maximum number of games to return for each category",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Team games retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecentGames"
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Team season not found for the provided account and season",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/batting-stats": {
      "get": {
        "operationId": "listTeamSeasonBattingStats",
        "summary": "List team batting statistics",
        "description": "Retrieve batting statistics for all players on a team season.",
        "tags": [
          "Statistics"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team batting statistics retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerBattingStats"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Team season not found for the provided account and season",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/pitching-stats": {
      "get": {
        "operationId": "listTeamSeasonPitchingStats",
        "summary": "List team pitching statistics",
        "description": "Retrieve pitching statistics for all players on a team season.",
        "tags": [
          "Statistics"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team pitching statistics retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlayerPitchingStats"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Team season not found for the provided account and season",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/teams": {
      "get": {
        "operationId": "listSeasonTeams",
        "summary": "List teams for a season",
        "description": "Retrieves all teams configured for the specified season.",
        "tags": [
          "Teams"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Teams retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamSeason"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Season not found for the provided identifiers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while retrieving teams.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/league": {
      "get": {
        "operationId": "getTeamSeasonLeague",
        "summary": "Get team league details",
        "description": "Retrieves the league information linked to the specified team season.",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "League information retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/League"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Account admin permission required.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "League information not found for the provided team season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while retrieving league information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}": {
      "delete": {
        "operationId": "deleteSeasonTeam",
        "summary": "Delete team season",
        "description": "Removes a team season from the specified season.",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Team season removed from the season"
          },
          "401": {
            "description": "Authentication required.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Account admin permission required.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Team season not found for the provided identifiers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while deleting the team season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getTeamSeasonDetails",
        "summary": "Get team season details",
        "description": "Retrieves detailed information and the current record for a team season.",
        "tags": [
          "Teams"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team season details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamSeasonRecord"
                }
              }
            }
          },
          "404": {
            "description": "Team season not found for the provided identifiers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while retrieving team season details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateTeamSeason",
        "summary": "Update team season",
        "description": "Updates team season metadata such as name and linked media. Supports optional logo uploads.",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertTeamSeason"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpsertTeamSeasonWithLogo"
              },
              "encoding": {
                "logo": {
                  "contentType": "image/*"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Team season updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamSeason"
                }
              }
            }
          },
          "400": {
            "description": "Invalid update payload provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Missing 'account.manage' permission for the target account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Team season not found for the provided identifiers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while updating the team season.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/logo": {
      "get": {
        "operationId": "getTeamSeasonLogo",
        "summary": "Get team season logo",
        "description": "Retrieves the logo for the specified team season.",
        "tags": [
          "Teams"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "seasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamSeasonId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logo retrieved successfully",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Team logo not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/users/{contactId}/roles": {
      "post": {
        "description": "Assign role to user in account",
        "operationId": "assignRoleToUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContactRole"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Role assigned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleWithContact"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/contacts/{contactId}/roles/{roleId}": {
      "delete": {
        "description": "Remove role from user in account",
        "operationId": "removeRoleFromUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "roleData": {
                    "type": "string",
                    "format": "number",
                    "description": "Context identifier for the role (for example, the team id when removing a TeamAdmin role)."
                  }
                },
                "required": [
                  "roleData"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactRole"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/roles/user-roles": {
      "get": {
        "description": "Get current user's roles",
        "operationId": "getCurrentUserRoles",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Current user's roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisteredUserWithRoles"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/roles/check-role": {
      "get": {
        "description": "Check if current user has a specific role",
        "operationId": "checkUserRole",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "teamId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "leagueId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role check result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCheck"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/roles/role-ids": {
      "get": {
        "description": "Get all available roles",
        "operationId": "listRoleIdentifiers",
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Available roles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseRole"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/roles/account-users/{accountId}": {
      "get": {
        "description": "Get all users with roles in a specific account",
        "operationId": "listAccountUsersWithRoles",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users with roles for the account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactWithContactRoles"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/roles/roles/metadata": {
      "get": {
        "description": "Get role metadata for frontend caching",
        "operationId": "getRoleMetadata",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Role metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleMetadata"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/webhooks/sendgrid": {
      "post": {
        "operationId": "processSendGridWebhook",
        "summary": "Process SendGrid webhook events",
        "description": "Receives webhook events from SendGrid and updates email delivery status for tracked recipients.",
        "tags": [
          "Webhooks"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "format": "email",
                        "description": "Recipient email address associated with the event."
                      },
                      "timestamp": {
                        "type": "integer",
                        "description": "Unix timestamp (in seconds) when the webhook event occurred."
                      },
                      "event": {
                        "type": "string",
                        "enum": [
                          "delivered",
                          "bounce",
                          "dropped",
                          "open",
                          "click",
                          "processed",
                          "deferred",
                          "spam_report",
                          "unsubscribe",
                          "group_unsubscribe",
                          "group_resubscribe"
                        ],
                        "description": "Event type emitted by SendGrid."
                      },
                      "sg_event_id": {
                        "type": "string",
                        "description": "Unique SendGrid event identifier."
                      },
                      "sg_message_id": {
                        "type": "string",
                        "description": "Unique SendGrid message identifier."
                      },
                      "smtp-id": {
                        "type": "string",
                        "description": "Optional SMTP identifier for the event."
                      },
                      "reason": {
                        "type": "string",
                        "description": "Reason provided for bounce or drop events."
                      },
                      "status": {
                        "type": "string",
                        "description": "SMTP status code returned by SendGrid."
                      },
                      "response": {
                        "type": "string",
                        "description": "SMTP response text returned by SendGrid."
                      },
                      "url": {
                        "type": "string",
                        "format": "uri",
                        "description": "URL the recipient clicked, when applicable."
                      },
                      "useragent": {
                        "type": "string",
                        "description": "User agent captured for open or click events."
                      }
                    },
                    "required": [
                      "email",
                      "timestamp",
                      "event",
                      "sg_event_id",
                      "sg_message_id"
                    ]
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "format": "email",
                          "description": "Recipient email address associated with the event."
                        },
                        "timestamp": {
                          "type": "integer",
                          "description": "Unix timestamp (in seconds) when the webhook event occurred."
                        },
                        "event": {
                          "type": "string",
                          "enum": [
                            "delivered",
                            "bounce",
                            "dropped",
                            "open",
                            "click",
                            "processed",
                            "deferred",
                            "spam_report",
                            "unsubscribe",
                            "group_unsubscribe",
                            "group_resubscribe"
                          ],
                          "description": "Event type emitted by SendGrid."
                        },
                        "sg_event_id": {
                          "type": "string",
                          "description": "Unique SendGrid event identifier."
                        },
                        "sg_message_id": {
                          "type": "string",
                          "description": "Unique SendGrid message identifier."
                        },
                        "smtp-id": {
                          "type": "string",
                          "description": "Optional SMTP identifier for the event."
                        },
                        "reason": {
                          "type": "string",
                          "description": "Reason provided for bounce or drop events."
                        },
                        "status": {
                          "type": "string",
                          "description": "SMTP status code returned by SendGrid."
                        },
                        "response": {
                          "type": "string",
                          "description": "SMTP response text returned by SendGrid."
                        },
                        "url": {
                          "type": "string",
                          "format": "uri",
                          "description": "URL the recipient clicked, when applicable."
                        },
                        "useragent": {
                          "type": "string",
                          "description": "User agent captured for open or click events."
                        }
                      },
                      "required": [
                        "email",
                        "timestamp",
                        "event",
                        "sg_event_id",
                        "sg_message_id"
                      ]
                    },
                    "minItems": 1
                  }
                ],
                "description": "SendGrid webhook payload containing one or more events."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook events were processed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Status message describing the processing outcome."
                    },
                    "processed": {
                      "type": "integer",
                      "minimum": 0,
                      "description": "Number of events successfully processed."
                    },
                    "total": {
                      "type": "integer",
                      "minimum": 0,
                      "description": "Total number of events received in the webhook payload."
                    },
                    "errors": {
                      "type": "integer",
                      "minimum": 0,
                      "description": "Number of events that encountered processing errors."
                    }
                  },
                  "required": [
                    "message",
                    "processed",
                    "total",
                    "errors"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The webhook payload was empty or malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "The webhook signature could not be validated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected server error occurred while processing webhook events.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/webhooks/health": {
      "get": {
        "operationId": "getWebhookHealth",
        "summary": "Webhook health check",
        "description": "Returns current configuration and availability details for webhook integrations.",
        "tags": [
          "Webhooks"
        ],
        "responses": {
          "200": {
            "description": "Webhook health status retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Overall webhook health status."
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "ISO 8601 timestamp describing when the health check was generated."
                    },
                    "provider": {
                      "type": "string",
                      "description": "Configured email provider handling outbound email and webhooks."
                    },
                    "webhooks": {
                      "type": "object",
                      "properties": {
                        "sendgrid": {
                          "type": "object",
                          "properties": {
                            "enabled": {
                              "type": "boolean",
                              "description": "Indicates whether the SendGrid webhook is enabled."
                            },
                            "endpoint": {
                              "type": "string",
                              "description": "Webhook endpoint path configured for SendGrid."
                            }
                          },
                          "required": [
                            "enabled",
                            "endpoint"
                          ]
                        }
                      },
                      "required": [
                        "sendgrid"
                      ]
                    }
                  },
                  "required": [
                    "status",
                    "timestamp",
                    "provider",
                    "webhooks"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while retrieving webhook health information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/webhooks/stats": {
      "get": {
        "operationId": "getWebhookStats",
        "summary": "Retrieve webhook processing statistics",
        "description": "Returns aggregated statistics about recently processed webhook events.",
        "tags": [
          "Webhooks"
        ],
        "responses": {
          "200": {
            "description": "Webhook statistics retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_events_processed": {
                      "type": "integer",
                      "minimum": 0,
                      "description": "Total number of webhook events processed by the system."
                    },
                    "last_event_timestamp": {
                      "type": "string",
                      "nullable": true,
                      "description": "Timestamp of the most recently processed webhook event, if available."
                    },
                    "provider_status": {
                      "type": "object",
                      "properties": {
                        "sendgrid": {
                          "type": "boolean",
                          "description": "Indicates whether SendGrid is the active outbound email provider."
                        }
                      },
                      "required": [
                        "sendgrid"
                      ]
                    }
                  },
                  "required": [
                    "total_events_processed",
                    "last_event_timestamp",
                    "provider_status"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error while retrieving webhook statistics.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/workouts": {
      "get": {
        "operationId": "listAccountWorkouts",
        "summary": "List account workouts",
        "description": "Retrieve workout announcements for the specified account.",
        "tags": [
          "Workouts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "upcoming",
                "past",
                "all"
              ],
              "description": "Filter workouts by upcoming, past, or all statuses"
            },
            "required": false,
            "description": "Filter workouts by upcoming, past, or all statuses",
            "name": "status",
            "in": "query"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 25
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false,
            "name": "after",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false,
            "name": "before",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false,
            "name": "includeRegistrationCounts",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Workouts retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkoutSummary"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createAccountWorkout",
        "summary": "Create workout",
        "description": "Create a workout announcement for an account.",
        "tags": [
          "Workouts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertWorkout"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Workout created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workout"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/workouts/sources": {
      "get": {
        "operationId": "getWorkoutSources",
        "summary": "Get workout registration sources",
        "description": "Fetch configured where-heard options for workout registrations.",
        "tags": [
          "Workouts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workout sources retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkoutSources"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateWorkoutSources",
        "summary": "Replace workout registration sources",
        "description": "Replace the full set of allowed where-heard options for workout registrations.",
        "tags": [
          "Workouts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkoutSources"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workout sources updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkoutSources"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "appendWorkoutSourceOption",
        "summary": "Add workout registration source option",
        "description": "Append an allowed where-heard option for workout registrations.",
        "tags": [
          "Workouts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkoutSourceOptionPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workout sources updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkoutSources"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/workouts/{workoutId}": {
      "get": {
        "operationId": "getAccountWorkout",
        "summary": "Get workout details",
        "description": "Retrieve a workout announcement for the specified account.",
        "tags": [
          "Workouts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "workoutId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workout retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workout"
                }
              }
            }
          },
          "404": {
            "description": "Workout not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateAccountWorkout",
        "summary": "Update workout",
        "description": "Update a workout announcement for an account.",
        "tags": [
          "Workouts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "workoutId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertWorkout"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workout updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workout"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Workout not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteAccountWorkout",
        "summary": "Delete workout",
        "description": "Delete a workout announcement for an account.",
        "tags": [
          "Workouts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "workoutId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Workout deleted"
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Workout not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/workouts/{workoutId}/registrations": {
      "post": {
        "operationId": "createWorkoutRegistration",
        "summary": "Register for a workout",
        "description": "Create a public registration for a workout announcement.",
        "tags": [
          "Workouts"
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "workoutId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkoutRegistrationUpsert"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registration created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkoutRegistration"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Workout not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "listWorkoutRegistrations",
        "summary": "List workout registrations",
        "description": "List registrations for a workout announcement for authorized account members.",
        "tags": [
          "Workouts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "workoutId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000,
              "default": 10000
            },
            "required": false,
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Workout registrations retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkoutRegistrations"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/accounts/{accountId}/workouts/{workoutId}/registrations/{registrationId}": {
      "put": {
        "operationId": "updateWorkoutRegistration",
        "summary": "Update workout registration",
        "description": "Update a workout registration for an authenticated account member.",
        "tags": [
          "Workouts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "workoutId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "registrationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkoutRegistrationUpsert"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Registration updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkoutRegistration"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Registration not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteWorkoutRegistration",
        "summary": "Delete workout registration",
        "description": "Delete a workout registration for an authenticated account member.",
        "tags": [
          "Workouts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "workoutId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          },
          {
            "name": "registrationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Registration deleted"
          },
          "401": {
            "description": "Authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Registration not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    }
  }
}