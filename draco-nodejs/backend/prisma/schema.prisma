generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

model accounthandouts {
  id          BigInt   @id @default(autoincrement())
  description String   @db.VarChar(255)
  filename    String   @db.VarChar(255)
  accountid   BigInt
  accounts    accounts @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_accounthandouts_accounts")
}

model accounts {
  id                      BigInt                    @id @default(autoincrement())
  name                    String                    @db.VarChar(75)
  firstyear               Int                       @default(0)
  accounttypeid           BigInt
  affiliationid           BigInt
  timezoneid              String                    @db.VarChar(50)
  twitteraccountname      String                    @db.VarChar(50)
  twitteroauthtoken       String                    @db.VarChar(50)
  twitteroauthsecretkey   String                    @db.VarChar(50)
  youtubeuserid           String?                   @db.VarChar(50)
  facebookfanpage         String?                   @db.VarChar(50)
  twitterwidgetscript     String?                   @db.VarChar(512)
  defaultvideo            String                    @default("") @db.VarChar(50)
  autoplayvideo           Boolean                   @default(false)
  owneruserid             String?                   @db.VarChar(128)
  accounthandouts         accounthandouts[]
  accounttypes            accounttypes              @relation(fields: [accounttypeid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_accounttypes_accounts")
  aspnetusers             aspnetusers?              @relation(fields: [owneruserid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_accounts_aspnetusers")
  accountsettings         accountsettings[]
  accountsurl             accountsurl[]
  accountwelcome          accountwelcome[]
  availablefields         availablefields[]
  contactroles            contactroles[]
  contacts                contacts[]
  currentseason           currentseason?
  divisiondefs            divisiondefs[]
  golfleaguecourses       golfleaguecourses[]
  golfleaguesetup         golfleaguesetup[]
  hof                     hof[]
  hofnomination           hofnomination[]
  hofnominationsetup      hofnominationsetup?
  league                  league[]
  leaguefaq               leaguefaq[]
  leaguenews              leaguenews[]
  leagueumpires           leagueumpires[]
  photogallery            photogallery[]
  playerswantedclassified playerswantedclassified[]
  profilecategory         profilecategory[]
  season                  season[]
  sponsors                sponsors[]
  teams                   teams[]
  teamswantedclassified   teamswantedclassified[]
  votequestion            votequestion[]
  workoutannouncement     workoutannouncement[]
  emails                  emails[]
  email_templates         email_templates[]
}

model accountsettings {
  accountid    BigInt
  settingkey   String   @db.VarChar(25)
  settingvalue String   @db.VarChar(25)
  accounts     accounts @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_accountsettings_accounts")

  @@id([accountid, settingkey])
}

model accountsurl {
  id        BigInt   @id @default(autoincrement())
  accountid BigInt
  url       String   @db.VarChar(200)
  accounts  accounts @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_accountsurl_accounts")
}

model accounttypes {
  id                BigInt     @id @default(autoincrement())
  name              String     @db.VarChar(75)
  filepath          String     @db.VarChar(255)
  facebookappid     String     @db.VarChar(50)
  facebooksecretkey String     @db.VarChar(50)
  twitterappid      String     @db.VarChar(50)
  twittersecret     String     @db.VarChar(50)
  accounts          accounts[]
}

model accountwelcome {
  id          BigInt   @id @default(autoincrement())
  accountid   BigInt
  orderno     Int      @db.SmallInt
  captionmenu String   @db.VarChar(50)
  welcometext String
  teamid      BigInt?
  accounts    accounts @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_accountwelcome_accounts")
  teams       teams?   @relation(fields: [teamid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_accountwelcome_teams")
}

model affiliations {
  id   BigInt @id @default(autoincrement())
  name String @unique @db.VarChar(75)
  url  String @db.VarChar(200)
}

model aspnetroles {
  id              String            @id @db.VarChar(128)
  name            String            @db.VarChar(256)
  aspnetuserroles aspnetuserroles[]
}

model aspnetuserroles {
  userid      String      @db.VarChar(128)
  roleid      String      @db.VarChar(128)
  aspnetroles aspnetroles @relation(fields: [roleid], references: [id], onDelete: Cascade, map: "fk_dbo_aspnetuserroles_dbo_aspnetroles_roleid")
  aspnetusers aspnetusers @relation(fields: [userid], references: [id], onDelete: Cascade, map: "fk_dbo_aspnetuserroles_dbo_aspnetusers_userid")

  @@id([userid, roleid])
}

model aspnetusers {
  id                   String            @id @db.VarChar(128)
  email                String?           @db.VarChar(256)
  emailconfirmed       Boolean
  passwordhash         String?
  securitystamp        String?
  phonenumber          String?           @db.VarChar(30)
  phonenumberconfirmed Boolean
  twofactorenabled     Boolean
  lockoutenddateutc    DateTime?         @db.Timestamptz(6)
  lockoutenabled       Boolean
  accessfailedcount    Int
  username             String?           @unique(map: "uq_aspnetusers_username") @db.VarChar(256)
  accounts             accounts[]
  aspnetuserroles      aspnetuserroles[]
  created_emails       emails[]          @relation("EmailCreatedBy")
  created_templates    email_templates[] @relation("EmailTemplateCreatedBy")
}

model availablefields {
  id                  BigInt                @id @default(autoincrement())
  accountid           BigInt
  name                String                @db.VarChar(25)
  shortname           String                @db.VarChar(5)
  comment             String                @db.VarChar(255)
  address             String                @db.VarChar(255)
  city                String                @db.VarChar(25)
  state               String                @db.VarChar(25)
  zipcode             String                @db.VarChar(10)
  directions          String                @db.VarChar(255)
  rainoutnumber       String                @db.VarChar(15)
  latitude            String                @db.VarChar(25)
  longitude           String                @db.VarChar(25)
  accounts            accounts              @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_availablefields_accounts")
  fieldcontacts       fieldcontacts[]
  leagueschedule      leagueschedule[]
  playoffgame         playoffgame[]
  workoutannouncement workoutannouncement[]
}

model batstatsum {
  id             BigInt         @id
  playerid       BigInt
  gameid         BigInt
  teamid         BigInt
  ab             Int
  h              Int
  r              Int
  d              Int
  t              Int
  hr             Int
  rbi            Int
  so             Int
  bb             Int
  re             Int
  hbp            Int
  intr           Int
  sf             Int
  sh             Int
  sb             Int
  cs             Int
  lob            Int
  tb             Int?           @default(dbgenerated("((((d * 2) + (t * 3)) + (hr * 4)) + (((h - d) - t) - hr))"))
  pa             Int?           @default(dbgenerated("((((ab + bb) + hbp) + (sh + sf)) + intr)"))
  obadenominator Int?           @default(dbgenerated("((ab + bb) + hbp)"))
  obanumerator   Int?           @default(dbgenerated("((h + bb) + hbp)"))
  leagueschedule leagueschedule @relation(fields: [gameid], references: [id], onDelete: Cascade, map: "fk_batstatsum_leagueschedule")
  rosterseason   rosterseason   @relation(fields: [playerid], references: [id], onDelete: Cascade, map: "fk_batstatsum_rosterseason")
  teamsseason    teamsseason    @relation(fields: [teamid], references: [id], onDelete: Cascade, map: "fk_batstatsum_teamsseason")

  @@unique([playerid, gameid, teamid])
}

model contactroles {
  id        BigInt   @id @default(autoincrement())
  contactid BigInt
  roleid    String   @db.VarChar(128)
  roledata  BigInt
  accountid BigInt
  accounts  accounts @relation(fields: [accountid], references: [id], onDelete: Cascade)
  contacts  contacts @relation(fields: [contactid], references: [id], onDelete: Cascade, map: "fk_contactroles_contacts")
}

model contacts {
  id                                                        BigInt                     @id @default(autoincrement())
  userid                                                    String?                    @db.VarChar(128)
  lastname                                                  String                     @db.Citext
  firstname                                                 String                     @db.Citext
  middlename                                                String                     @db.Citext
  phone1                                                    String?                    @db.VarChar(14)
  phone2                                                    String?                    @db.VarChar(14)
  phone3                                                    String?                    @db.VarChar(14)
  creatoraccountid                                          BigInt
  streetaddress                                             String?                    @db.VarChar(75)
  city                                                      String?                    @db.VarChar(25)
  state                                                     String?                    @db.VarChar(25)
  zip                                                       String?                    @db.VarChar(15)
  dateofbirth                                               DateTime                   @db.Timestamp(6)
  isfemale                                                  Boolean?                   @default(false)
  email                                                     String?                    @db.VarChar(50)
  contactroles                                              contactroles[]
  accounts                                                  accounts                   @relation(fields: [creatoraccountid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fieldcontacts                                             fieldcontacts[]
  golfcourseforcontact                                      golfcourseforcontact[]
  golferstatsconfiguration                                  golferstatsconfiguration[]
  golferstatsvalue                                          golferstatsvalue[]
  golfleaguesetup_golfleaguesetup_presidentidTocontacts     golfleaguesetup[]          @relation("golfleaguesetup_presidentidTocontacts")
  golfleaguesetup_golfleaguesetup_secretaryidTocontacts     golfleaguesetup[]          @relation("golfleaguesetup_secretaryidTocontacts")
  golfleaguesetup_golfleaguesetup_treasureridTocontacts     golfleaguesetup[]          @relation("golfleaguesetup_treasureridTocontacts")
  golfleaguesetup_golfleaguesetup_vicepresidentidTocontacts golfleaguesetup[]          @relation("golfleaguesetup_vicepresidentidTocontacts")
  golfroster                                                golfroster[]
  golfscore                                                 golfscore[]
  hof                                                       hof[]
  leagueumpires                                             leagueumpires[]
  memberbusiness                                            memberbusiness[]
  messagepost                                               messagepost[]
  messagetopic                                              messagetopic[]
  playerprofile                                             playerprofile[]
  playerswantedclassified                                   playerswantedclassified[]
  roster                                                    roster?
  teamseasonmanager                                         teamseasonmanager[]
  voteanswers                                               voteanswers[]
  email_recipients                                          email_recipients[]

  @@unique([lastname, firstname, middlename, creatoraccountid])
}

model currentseason {
  seasonid  BigInt
  accountid BigInt   @id
  accounts  accounts @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_currentseason_accounts")
}

model displayleagueleaders {
  fieldname   String  @db.VarChar(50)
  accountid   BigInt
  teamid      BigInt
  isbatleader Boolean

  @@id([fieldname, isbatleader, accountid, teamid])
}

model divisiondefs {
  id             BigInt           @id @default(autoincrement())
  accountid      BigInt
  name           String           @db.VarChar(25)
  accounts       accounts         @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_divisiondefs_accounts")
  divisionseason divisionseason[]
}

model divisionseason {
  id             BigInt        @id @default(autoincrement())
  divisionid     BigInt
  leagueseasonid BigInt
  priority       Int
  divisiondefs   divisiondefs  @relation(fields: [divisionid], references: [id], onDelete: Cascade, map: "fk_divisionseason_divisiondefs")
  leagueseason   leagueseason  @relation(fields: [leagueseasonid], references: [id], onDelete: Cascade, map: "fk_divisionseason_leagueseason")
  teamsseason    teamsseason[]
}

model fieldcontacts {
  id              BigInt          @id @default(autoincrement())
  fieldid         BigInt
  contactid       BigInt
  contacts        contacts        @relation(fields: [contactid], references: [id], onDelete: Cascade, map: "fk_fieldcontacts_contacts")
  availablefields availablefields @relation(fields: [fieldid], references: [id], onDelete: Cascade, map: "fk_fieldcontacts_availablefields")
}

model fieldstatsum {
  id             BigInt         @id @default(autoincrement())
  playerid       BigInt
  gameid         BigInt
  teamid         BigInt
  pos            Int
  ip             Int
  ip2            Int
  po             Int
  a              Int
  e              Int
  pb             Int
  sb             Int
  cs             Int
  leagueschedule leagueschedule @relation(fields: [gameid], references: [id], onDelete: Cascade, map: "fk_fieldstatsum_leagueschedule")
  rosterseason   rosterseason   @relation(fields: [playerid], references: [id], onDelete: Cascade, map: "fk_fieldstatsum_rosterseason")
  teamsseason    teamsseason    @relation(fields: [teamid], references: [id], onDelete: Cascade, map: "fk_fieldstatsum_teamsseason")

  @@unique([playerid, gameid, teamid, pos])
}

model gameejections {
  id             BigInt         @id @default(autoincrement())
  leagueseasonid BigInt
  gameid         BigInt
  playerseasonid BigInt
  umpireid       BigInt?
  comments       String
  leagueumpires  leagueumpires? @relation(fields: [umpireid], references: [id], map: "fk_gameejections_umpireid")
  leagueschedule leagueschedule @relation(fields: [gameid], references: [id], onDelete: Cascade, map: "fk_gameejections_leagueschedule")
  leagueseason   leagueseason   @relation(fields: [leagueseasonid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_gameejections_leagueseason")
  rosterseason   rosterseason   @relation(fields: [playerseasonid], references: [id], onDelete: Cascade, map: "fk_gameejections_rosterseason")
}

model gamerecap {
  gameid         BigInt
  teamid         BigInt
  recap          String
  leagueschedule leagueschedule @relation(fields: [gameid], references: [id], onDelete: Cascade, map: "fk_gamerecap_leagueschedule")
  teamsseason    teamsseason    @relation(fields: [teamid], references: [id], onDelete: Cascade, map: "fk_gamerecap_teamsseason")

  @@id([gameid, teamid])
}

model golfcourse {
  id                   BigInt                 @id @default(autoincrement())
  name                 String                 @db.VarChar(100)
  designer             String?                @db.VarChar(50)
  yearbuilt            Int?
  numberofholes        Int
  address              String?                @db.VarChar(50)
  city                 String?                @db.VarChar(50)
  state                String?                @db.VarChar(50)
  zip                  String?                @db.VarChar(20)
  country              String?                @db.VarChar(30)
  menspar1             Int
  menspar2             Int
  menspar3             Int
  menspar4             Int
  menspar5             Int
  menspar6             Int
  menspar7             Int
  menspar8             Int
  menspar9             Int
  menspar10            Int
  menspar11            Int
  menspar12            Int
  menspar13            Int
  menspar14            Int
  menspar15            Int
  menspar16            Int
  menspar17            Int
  menspar18            Int
  womanspar1           Int
  womanspar2           Int
  womanspar3           Int
  womanspar4           Int
  womanspar5           Int
  womanspar6           Int
  womanspar7           Int
  womanspar8           Int
  womanspar9           Int
  womanspar10          Int
  womanspar11          Int
  womanspar12          Int
  womanspar13          Int
  womanspar14          Int
  womanspar15          Int
  womanspar16          Int
  womanspar17          Int
  womanspar18          Int
  menshandicap1        Int
  menshandicap2        Int
  menshandicap3        Int
  menshandicap4        Int
  menshandicap5        Int
  menshandicap6        Int
  menshandicap7        Int
  menshandicap8        Int
  menshandicap9        Int
  menshandicap10       Int
  menshandicap11       Int
  menshandicap12       Int
  menshandicap13       Int
  menshandicap14       Int
  menshandicap15       Int
  menshandicap16       Int
  menshandicap17       Int
  menshandicap18       Int
  womanshandicap1      Int
  womanshandicap2      Int
  womanshandicap3      Int
  womanshandicap4      Int
  womanshandicap5      Int
  womanshandicap6      Int
  womanshandicap7      Int
  womanshandicap8      Int
  womanshandicap9      Int
  womanshandicap10     Int
  womanshandicap11     Int
  womanshandicap12     Int
  womanshandicap13     Int
  womanshandicap14     Int
  womanshandicap15     Int
  womanshandicap16     Int
  womanshandicap17     Int
  womanshandicap18     Int
  golfcourseforcontact golfcourseforcontact[]
  golfleaguecourses    golfleaguecourses[]
  golfmatch            golfmatch[]
  golfscore            golfscore[]
  golfteeinformation   golfteeinformation[]
}

model golfcourseforcontact {
  id         BigInt     @id @default(autoincrement())
  contactid  BigInt
  courseid   BigInt
  contacts   contacts   @relation(fields: [contactid], references: [id], onDelete: Cascade, map: "fk_golfcourseforcontact_contacts")
  golfcourse golfcourse @relation(fields: [courseid], references: [id], onDelete: Cascade, map: "fk_golfcourseforcontact_golfcourse")
}

model golferstatsconfiguration {
  id          BigInt      @id @default(autoincrement())
  contactid   BigInt
  statid      BigInt
  contacts    contacts    @relation(fields: [contactid], references: [id], onDelete: Cascade, map: "fk_golferstatsconfiguration_contacts")
  golfstatdef golfstatdef @relation(fields: [statid], references: [id], onDelete: Cascade, map: "fk_golferstatsconfiguration_golfstatdef")
}

model golferstatsvalue {
  id        BigInt    @id @default(autoincrement())
  scoreid   BigInt
  contactid BigInt
  holeno    Int
  value     String    @db.VarChar(100)
  contacts  contacts  @relation(fields: [contactid], references: [id], onDelete: Cascade, map: "fk_golferstatsvalue_contacts")
  golfscore golfscore @relation(fields: [scoreid], references: [id], onDelete: Cascade, map: "fk_golferstatsvalue_golfscore")
}

model golfleaguecourses {
  accountid        BigInt
  courseid         BigInt
  defaultmenstee   BigInt?
  defaultwomanstee BigInt?
  accounts         accounts   @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_golfleaguecourses_accounts")
  golfcourse       golfcourse @relation(fields: [courseid], references: [id], onDelete: Cascade, map: "fk_golfleaguecourses_golfcourse")

  @@id([accountid, courseid])
}

model golfleaguesetup {
  id                                                 BigInt   @id
  accountid                                          BigInt
  presidentid                                        BigInt
  vicepresidentid                                    BigInt
  secretaryid                                        BigInt
  treasurerid                                        BigInt
  leagueday                                          Int
  firstteetime                                       DateTime @db.Timestamp(6)
  timebetweenteetimes                                Int
  holespermatch                                      Int
  teeoffformat                                       Int
  indnetperholepts                                   Int
  indnetperninepts                                   Int
  indnetpermatchpts                                  Int
  indnettotalholespts                                Int
  indnetagainstfieldpts                              Int
  indnetagainstfielddescpts                          Int
  indactperholepts                                   Int
  indactperninepts                                   Int
  indactpermatchpts                                  Int
  indacttotalholespts                                Int
  indactagainstfieldpts                              Int
  indactagainstfielddescpts                          Int
  teamnetperholepts                                  Int
  teamnetperninepts                                  Int
  teamnetpermatchpts                                 Int
  teamnettotalholespts                               Int
  teamnetagainstfieldpts                             Int
  teamactperholepts                                  Int
  teamactperninepts                                  Int
  teamactpermatchpts                                 Int
  teamacttotalholespts                               Int
  teamactagainstfieldpts                             Int
  teamagainstfielddescpts                            Int
  teamnetbestballperholepts                          Int
  teamactbestballperholepts                          Int
  useteamscoring                                     Boolean
  useindividualscoring                               Boolean
  accounts                                           accounts @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_golfleaguesetup_accounts")
  contacts_golfleaguesetup_presidentidTocontacts     contacts @relation("golfleaguesetup_presidentidTocontacts", fields: [presidentid], references: [id], onDelete: Cascade, map: "fk_golfleaguesetup_contacts")
  contacts_golfleaguesetup_secretaryidTocontacts     contacts @relation("golfleaguesetup_secretaryidTocontacts", fields: [secretaryid], references: [id], onDelete: Cascade, map: "fk_golfleaguesetup_contacts2")
  contacts_golfleaguesetup_treasureridTocontacts     contacts @relation("golfleaguesetup_treasureridTocontacts", fields: [treasurerid], references: [id], onDelete: Cascade, map: "fk_golfleaguesetup_contacts3")
  contacts_golfleaguesetup_vicepresidentidTocontacts contacts @relation("golfleaguesetup_vicepresidentidTocontacts", fields: [vicepresidentid], references: [id], onDelete: Cascade, map: "fk_golfleaguesetup_contacts1")
}

model golfmatch {
  id                                       BigInt            @id @default(autoincrement())
  team1                                    BigInt
  team2                                    BigInt
  leagueid                                 BigInt
  matchdate                                DateTime          @db.Timestamp(6)
  matchtime                                DateTime          @db.Timestamp(6)
  courseid                                 BigInt?
  matchstatus                              Int
  matchtype                                Int
  comment                                  String            @db.VarChar(255)
  golfcourse                               golfcourse?       @relation(fields: [courseid], references: [id], map: "fk_golfmatch_golfcourse")
  leagueseason                             leagueseason      @relation(fields: [leagueid], references: [id], onDelete: Cascade, map: "fk_golfmatch_leagueseason")
  teamsseason_golfmatch_team1Toteamsseason teamsseason       @relation("golfmatch_team1Toteamsseason", fields: [team1], references: [id], onDelete: Cascade, map: "fk_golfmatch_teamsseason")
  teamsseason_golfmatch_team2Toteamsseason teamsseason       @relation("golfmatch_team2Toteamsseason", fields: [team2], references: [id], onDelete: Cascade, map: "fk_golfmatch_teams")
  golfmatchscores                          golfmatchscores[]
}

model golfmatchscores {
  matchid     BigInt
  teamid      BigInt
  playerid    BigInt
  scoreid     BigInt
  golfmatch   golfmatch   @relation(fields: [matchid], references: [id], onDelete: Cascade, map: "fk_golfmatchscores_golfmatch")
  golfroster  golfroster  @relation(fields: [playerid], references: [id], onDelete: Cascade, map: "fk_golfmatchscores_golfroster")
  golfscore   golfscore   @relation(fields: [scoreid], references: [id], onDelete: Cascade, map: "fk_golfmatchscores_golfscore")
  teamsseason teamsseason @relation(fields: [teamid], references: [id], onDelete: Cascade, map: "fk_golfmatchscores_teamsseason")

  @@id([matchid, teamid, playerid, scoreid])
}

model golfroster {
  id                  BigInt            @id @default(autoincrement())
  contactid           BigInt
  teamseasonid        BigInt
  isactive            Boolean
  initialdifferential Float?
  issub               Boolean           @default(false)
  subseasonid         BigInt?
  golfmatchscores     golfmatchscores[]
  contacts            contacts          @relation(fields: [contactid], references: [id], onDelete: Cascade, map: "fk_golfroster_contacts")
  leagueseason        leagueseason?     @relation(fields: [subseasonid], references: [id])
  teamsseason         teamsseason       @relation(fields: [teamseasonid], references: [id], onDelete: Cascade, map: "fk_golfroster_teamsseason")
}

model golfscore {
  id                 BigInt             @id @default(autoincrement())
  courseid           BigInt
  contactid          BigInt
  teeid              BigInt
  dateplayed         DateTime           @db.Timestamp(6)
  holesplayed        Int
  totalscore         Int
  totalsonly         Boolean
  holescrore1        Int
  holescrore2        Int
  holescrore3        Int
  holescrore4        Int
  holescrore5        Int
  holescrore6        Int
  holescrore7        Int
  holescrore8        Int
  holescrore9        Int
  holescrore10       Int
  holescrore11       Int
  holescrore12       Int
  holescrore13       Int
  holescrore14       Int
  holescrore15       Int
  holescrore16       Int
  holescrore17       Int
  holescrore18       Int
  startindex         Float?
  startindex9        Float?
  golferstatsvalue   golferstatsvalue[]
  golfmatchscores    golfmatchscores[]
  contacts           contacts           @relation(fields: [contactid], references: [id], onDelete: Cascade, map: "fk_golfscore_contacts")
  golfcourse         golfcourse         @relation(fields: [courseid], references: [id], onDelete: Cascade, map: "fk_golfscore_golfcourse")
  golfteeinformation golfteeinformation @relation(fields: [teeid], references: [id], onDelete: Cascade, map: "fk_golfscore_golfteeinformation")
}

model golfstatdef {
  id                       BigInt                     @id @default(autoincrement())
  name                     String                     @db.VarChar(50)
  shortname                String                     @db.VarChar(5)
  datatype                 Int
  iscalculated             Boolean
  isperholevalue           Boolean
  formulacode              String                     @db.VarChar(255)
  validationcode           String                     @db.VarChar(255)
  listvalues               String                     @db.VarChar(255)
  golferstatsconfiguration golferstatsconfiguration[]
}

model golfteeinformation {
  id                 BigInt      @id @default(autoincrement())
  courseid           BigInt
  teecolor           String      @db.VarChar(20)
  teename            String      @db.VarChar(20)
  mensrating         Float
  menslope           Float
  womansrating       Float
  womanslope         Float
  mensratingfront9   Float
  menslopefront9     Float
  womansratingfront9 Float
  womanslopefront9   Float
  mensratingback9    Float
  menslopeback9      Float
  womansratingback9  Float
  womanslopeback9    Float
  distancehole1      Int
  distancehole2      Int
  distancehole3      Int
  distancehole4      Int
  distancehole5      Int
  distancehole6      Int
  distancehole7      Int
  distancehole8      Int
  distancehole9      Int
  distancehole10     Int
  distancehole11     Int
  distancehole12     Int
  distancehole13     Int
  distancehole14     Int
  distancehole15     Int
  distancehole16     Int
  distancehole17     Int
  distancehole18     Int
  priority           Int
  golfscore          golfscore[]
  golfcourse         golfcourse  @relation(fields: [courseid], references: [id], onDelete: Cascade, map: "fk_golfteeinformation_golfcourse")
}

model hof {
  id           BigInt   @id @default(autoincrement())
  accountid    BigInt
  yearinducted Int
  contactid    BigInt
  bio          String
  accounts     accounts @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_hof_accounts")
  contacts     contacts @relation(fields: [contactid], references: [id], onDelete: Cascade, map: "fk_hof_contacts")
}

model hofnomination {
  id          BigInt   @id @default(autoincrement())
  accountid   BigInt
  nominator   String   @db.VarChar(50)
  phonenumber String   @db.VarChar(14)
  email       String   @db.VarChar(75)
  nominee     String   @db.VarChar(50)
  reason      String
  accounts    accounts @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_hofnomination_accounts")
}

model hofnominationsetup {
  accountid        BigInt   @id
  enablenomination Boolean
  criteriatext     String
  accounts         accounts @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_hofnominationsetup_accounts")
}

model league {
  id           BigInt         @id @default(autoincrement())
  accountid    BigInt
  name         String         @db.VarChar(25)
  accounts     accounts       @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_league_accounts")
  leagueseason leagueseason[]
}

model leagueevents {
  id             BigInt       @id @default(autoincrement())
  eventdate      DateTime     @db.Timestamp(6)
  description    String       @db.VarChar(25)
  leagueseasonid BigInt
  leagueseason   leagueseason @relation(fields: [leagueseasonid], references: [id], onDelete: Cascade, map: "fk_leagueevents_leagueseason")
}

model leaguefaq {
  id        BigInt   @id @default(autoincrement())
  accountid BigInt
  question  String
  answer    String
  accounts  accounts @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_leaguefaq_accounts")
}

model leaguenews {
  id              BigInt   @id @default(autoincrement())
  accountid       BigInt
  date            DateTime @db.Timestamp(6)
  title           String   @db.VarChar(100)
  text            String
  specialannounce Boolean
  accounts        accounts @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_leaguenews_accounts")
}

model leagueschedule {
  id                                                  BigInt           @id @default(autoincrement())
  gamedate                                            DateTime         @db.Timestamp(6)
  hteamid                                             BigInt
  vteamid                                             BigInt
  hscore                                              Int              @default(0)
  vscore                                              Int              @default(0)
  comment                                             String           @default("") @db.VarChar(255)
  fieldid                                             BigInt?
  leagueid                                            BigInt
  gamestatus                                          Int
  gametype                                            BigInt
  umpire1                                             BigInt?
  umpire2                                             BigInt?
  umpire3                                             BigInt?
  umpire4                                             BigInt?
  batstatsum                                          batstatsum[]
  fieldstatsum                                        fieldstatsum[]
  gameejections                                       gameejections[]
  gamerecap                                           gamerecap[]
  availablefields                                     availablefields? @relation(fields: [fieldid], references: [id], map: "fk_leagueschedule_fieldid")
  leagueumpires_leagueschedule_umpire1Toleagueumpires leagueumpires?   @relation("leagueschedule_umpire1Toleagueumpires", fields: [umpire1], references: [id], map: "fk_leagueschedule_umpire1")
  leagueumpires_leagueschedule_umpire2Toleagueumpires leagueumpires?   @relation("leagueschedule_umpire2Toleagueumpires", fields: [umpire2], references: [id], map: "fk_leagueschedule_umpire2")
  leagueumpires_leagueschedule_umpire3Toleagueumpires leagueumpires?   @relation("leagueschedule_umpire3Toleagueumpires", fields: [umpire3], references: [id], map: "fk_leagueschedule_umpire3")
  leagueumpires_leagueschedule_umpire4Toleagueumpires leagueumpires?   @relation("leagueschedule_umpire4Toleagueumpires", fields: [umpire4], references: [id], map: "fk_leagueschedule_umpire4")
  leagueseason                                        leagueseason     @relation(fields: [leagueid], references: [id], onDelete: Cascade, map: "fk_leagueschedule_leagueseason")
  pitchstatsum                                        pitchstatsum[]
  playerrecap                                         playerrecap[]
}

model leagueseason {
  id             BigInt           @id @default(autoincrement())
  leagueid       BigInt
  seasonid       BigInt
  divisionseason divisionseason[]
  gameejections  gameejections[]
  golfmatch      golfmatch[]
  golfroster     golfroster[]
  leagueevents   leagueevents[]
  leagueschedule leagueschedule[]
  league         league           @relation(fields: [leagueid], references: [id], onDelete: Cascade, map: "fk_leagueseason_league")
  season         season           @relation(fields: [seasonid], references: [id], onDelete: Cascade, map: "fk_leagueseason_season")
  playoffsetup   playoffsetup[]
  teamsseason    teamsseason[]

  @@unique([leagueid, seasonid], map: "league_season")
}

model leagueumpires {
  id                                                   BigInt           @id @default(autoincrement())
  accountid                                            BigInt
  contactid                                            BigInt
  gameejections                                        gameejections[]
  leagueschedule_leagueschedule_umpire1Toleagueumpires leagueschedule[] @relation("leagueschedule_umpire1Toleagueumpires")
  leagueschedule_leagueschedule_umpire2Toleagueumpires leagueschedule[] @relation("leagueschedule_umpire2Toleagueumpires")
  leagueschedule_leagueschedule_umpire3Toleagueumpires leagueschedule[] @relation("leagueschedule_umpire3Toleagueumpires")
  leagueschedule_leagueschedule_umpire4Toleagueumpires leagueschedule[] @relation("leagueschedule_umpire4Toleagueumpires")
  accounts                                             accounts         @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_leagueumpires_accounts")
  contacts                                             contacts         @relation(fields: [contactid], references: [id], onDelete: Cascade, map: "fk_leagueumpires_contacts")
}

model memberbusiness {
  id            BigInt   @id @default(autoincrement())
  contactid     BigInt
  name          String   @db.VarChar(50)
  streetaddress String   @db.VarChar(100)
  citystatezip  String   @db.VarChar(100)
  description   String
  email         String   @db.VarChar(100)
  phone         String   @db.VarChar(14)
  fax           String   @db.VarChar(14)
  website       String   @db.VarChar(100)
  contacts      contacts @relation(fields: [contactid], references: [id], onDelete: Cascade, map: "fk_memberbusiness_contacts")
}

model messagecategory {
  id                  BigInt         @id @default(autoincrement())
  accountid           BigInt
  categoryorder       Int
  categoryname        String         @db.VarChar(50)
  categorydescription String         @db.VarChar(255)
  allowanonymouspost  Boolean
  allowanonymoustopic Boolean
  isteam              Boolean
  ismoderated         Boolean
  messagepost         messagepost[]
  messagetopic        messagetopic[]
}

model messagepost {
  id               BigInt          @id @default(autoincrement())
  topicid          BigInt
  postorder        Int
  contactcreatorid BigInt
  postdate         DateTime        @db.Timestamp(6)
  posttext         String
  editdate         DateTime        @db.Timestamp(6)
  postsubject      String          @db.VarChar(255)
  categoryid       BigInt
  messagecategory  messagecategory @relation(fields: [categoryid], references: [id], onDelete: Cascade, map: "fk_messagepost_messagecategory")
  contacts         contacts        @relation(fields: [contactcreatorid], references: [id], onDelete: Cascade, map: "fk_messagepost_contacts")
  messagetopic     messagetopic    @relation(fields: [topicid], references: [id], onDelete: Cascade, map: "fk_messagepost_messagetopic")
}

model messagetopic {
  id               BigInt          @id @default(autoincrement())
  categoryid       BigInt
  contactcreatorid BigInt
  topiccreatedate  DateTime        @db.Timestamp(6)
  topic            String          @db.VarChar(255)
  stickytopic      Boolean
  numberofviews    BigInt
  messagepost      messagepost[]
  messagecategory  messagecategory @relation(fields: [categoryid], references: [id], onDelete: Cascade, map: "fk_messagetopic_messagecategory")
  contacts         contacts        @relation(fields: [contactcreatorid], references: [id], onDelete: Cascade, map: "fk_messagetopic_contacts")
}

model photogallery {
  id                BigInt             @id @default(autoincrement())
  accountid         BigInt
  title             String             @db.VarChar(50)
  caption           String             @db.VarChar(255)
  albumid           BigInt?
  photogalleryalbum photogalleryalbum? @relation(fields: [albumid], references: [id], map: "fk_photogallery_albumid")
  accounts          accounts           @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_photogallery_accounts")
}

model photogalleryalbum {
  id            BigInt         @id @default(autoincrement())
  accountid     BigInt
  title         String         @db.VarChar(25)
  parentalbumid BigInt
  teamid        BigInt
  photogallery  photogallery[]
}

model pitchstatsum {
  id             BigInt         @id
  playerid       BigInt
  gameid         BigInt
  teamid         BigInt
  ip             Int
  ip2            Int
  bf             Int
  w              Int
  l              Int
  s              Int
  h              Int
  r              Int
  er             Int
  d              Int
  t              Int
  hr             Int
  so             Int
  bb             Int
  wp             Int
  hbp            Int
  bk             Int
  sc             Int
  tb             Int?           @default(dbgenerated("((((d * 2) + (t * 3)) + (hr * 4)) + (((h - d) - t) - hr))"))
  ab             Int?           @default(dbgenerated("(((bf - bb) - hbp) - sc)"))
  whipnumerator  Int?           @default(dbgenerated("(h + bb)"))
  ipnumerator    Int?           @default(dbgenerated("((ip * 3) + ip2)"))
  leagueschedule leagueschedule @relation(fields: [gameid], references: [id], onDelete: Cascade, map: "fk_pitchstatsum_leagueschedule")
  rosterseason   rosterseason   @relation(fields: [playerid], references: [id], onDelete: Cascade, map: "fk_pitchstatsum_rosterseason")
  teamsseason    teamsseason    @relation(fields: [teamid], references: [id], onDelete: Cascade, map: "fk_pitchstatsum_teamsseason")

  @@unique([playerid, gameid, teamid])
}

model playerprofile {
  id              BigInt          @id @default(autoincrement())
  playerid        BigInt
  questionid      BigInt
  answer          String
  contacts        contacts        @relation(fields: [playerid], references: [id], onDelete: Cascade, map: "fk_playerprofile_contacts")
  profilequestion profilequestion @relation(fields: [questionid], references: [id], onDelete: Cascade, map: "fk_playerprofile_profilequestion")
}

model playerrecap {
  playerid       BigInt
  teamid         BigInt
  gameid         BigInt
  leagueschedule leagueschedule @relation(fields: [gameid], references: [id], onDelete: Cascade, map: "fk_playerrecap_leagueschedule")
  rosterseason   rosterseason   @relation(fields: [playerid], references: [id], onDelete: Cascade, map: "fk_playerrecap_rosterseason")
  teamsseason    teamsseason    @relation(fields: [teamid], references: [id], onDelete: Cascade, map: "fk_playerrecap_teamsseason")

  @@id([playerid, teamid, gameid])
}

model playerseasonaffiliationdues {
  playerid            BigInt
  seasonid            BigInt
  affiliationduespaid String @db.VarChar(50)
  roster              roster @relation(fields: [playerid], references: [id], onDelete: Cascade, map: "fk_playerseasonaffiliationdues_roster")
  season              season @relation(fields: [seasonid], references: [id], onDelete: Cascade, map: "fk_playerseasonaffiliationdues_season")

  @@id([playerid, seasonid])
}

model playerswantedclassified {
  id                 BigInt   @id @default(autoincrement())
  accountid          BigInt
  datecreated        DateTime @db.Date
  createdbycontactid BigInt
  teameventname      String   @db.VarChar(50)
  description        String
  positionsneeded    String   @db.VarChar(50)
  accounts           accounts @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_playerswantedclassified_accounts")
  contacts           contacts @relation(fields: [createdbycontactid], references: [id], onDelete: Cascade, map: "fk_playerswantedclassified_contacts")
}

model playoffbracket {
  id               BigInt        @id @default(autoincrement())
  playoffid        BigInt
  team1id          BigInt
  team1idtype      String        @db.VarChar(5)
  team2id          BigInt
  team2idtype      String        @db.VarChar(5)
  gameno           Int
  roundno          Int
  numgamesinseries Int
  playoffsetup     playoffsetup  @relation(fields: [playoffid], references: [id], onDelete: Cascade, map: "fk_playoffbracket_playoffsetup")
  playoffgame      playoffgame[]
}

model playoffgame {
  id              BigInt           @id @default(autoincrement())
  bracketid       BigInt
  fieldid         BigInt?
  gamedate        DateTime         @db.Timestamp(6)
  gametime        DateTime         @db.Timestamp(6)
  gameid          BigInt
  playoffid       BigInt
  seriesgameno    Int
  team1hometeam   Boolean
  availablefields availablefields? @relation(fields: [fieldid], references: [id], map: "fk_playoffgame_fieldid")
  playoffbracket  playoffbracket   @relation(fields: [bracketid], references: [id], onDelete: Cascade, map: "fk_playoffgame_playoffgame")
  playoffsetup    playoffsetup     @relation(fields: [playoffid], references: [id], onDelete: Cascade)
}

model playoffseeds {
  id           BigInt       @id @default(autoincrement())
  playoffid    BigInt
  teamid       BigInt
  seedno       Int
  playoffsetup playoffsetup @relation(fields: [playoffid], references: [id], onDelete: Cascade, map: "fk_playoffseeds_playoffsetup")
}

model playoffsetup {
  id             BigInt           @id @default(autoincrement())
  leagueseasonid BigInt
  numteams       Int
  description    String           @db.VarChar(50)
  active         Boolean
  playoffbracket playoffbracket[]
  playoffgame    playoffgame[]
  playoffseeds   playoffseeds[]
  leagueseason   leagueseason     @relation(fields: [leagueseasonid], references: [id], onDelete: Cascade, map: "fk_playoffsetup_leagueseason")
}

model profilecategory {
  id              BigInt            @id @default(autoincrement())
  accountid       BigInt
  categoryname    String            @db.VarChar(40)
  priority        Int
  accounts        accounts          @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_profilecategory_accounts")
  profilequestion profilequestion[]
}

model profilequestion {
  id              BigInt          @id @default(autoincrement())
  categoryid      BigInt
  question        String          @db.VarChar(255)
  questionnum     Int
  playerprofile   playerprofile[]
  profilecategory profilecategory @relation(fields: [categoryid], references: [id], onDelete: Cascade, map: "fk_profilequestion_profilecategory")
}

model roster {
  id                          BigInt                        @id @default(autoincrement())
  contactid                   BigInt                        @unique(map: "roster_contactid")
  submitteddriverslicense     Boolean
  firstyear                   Int
  playerseasonaffiliationdues playerseasonaffiliationdues[]
  contacts                    contacts                      @relation(fields: [contactid], references: [id], onDelete: Cascade, map: "fk_roster_contacts")
  rosterseason                rosterseason[]
}

model rosterseason {
  id              BigInt          @id @default(autoincrement())
  playerid        BigInt
  teamseasonid    BigInt
  playernumber    Int
  inactive        Boolean
  submittedwaiver Boolean
  dateadded       DateTime?       @db.Timestamp(6)
  batstatsum      batstatsum[]
  fieldstatsum    fieldstatsum[]
  gameejections   gameejections[]
  pitchstatsum    pitchstatsum[]
  playerrecap     playerrecap[]
  roster          roster          @relation(fields: [playerid], references: [id], onDelete: Cascade, map: "fk_rosterseason_roster")
  teamsseason     teamsseason     @relation(fields: [teamseasonid], references: [id], onDelete: Cascade)

  @@index([playerid, teamseasonid], map: "idx_rosterseason_playerid_teamseasonid")
  @@index([teamseasonid], map: "idx_rosterseason_teamseasonid")
}

model season {
  id                          BigInt                        @id @default(autoincrement())
  accountid                   BigInt
  name                        String                        @db.VarChar(25)
  leagueseason                leagueseason[]
  playerseasonaffiliationdues playerseasonaffiliationdues[]
  accounts                    accounts                      @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_season_accounts")
}

model sponsors {
  id            BigInt   @id @default(autoincrement())
  accountid     BigInt
  name          String   @db.VarChar(50)
  streetaddress String   @db.VarChar(100)
  citystatezip  String   @db.VarChar(100)
  description   String
  email         String   @db.VarChar(100)
  phone         String   @db.VarChar(14)
  fax           String   @db.VarChar(14)
  website       String   @db.VarChar(100)
  teamid        BigInt?
  teams         teams?   @relation(fields: [teamid], references: [id], onDelete: Cascade, map: "fk_sponsors_teamid")
  accounts      accounts @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_sponsors_accounts")
}

model teamhandouts {
  id          BigInt @id @default(autoincrement())
  description String @db.VarChar(255)
  filename    String @db.VarChar(255)
  teamid      BigInt
  teams       teams  @relation(fields: [teamid], references: [id], onDelete: Cascade, map: "fk_teamhandouts_teams")
}

model teamnews {
  id              BigInt   @id @default(autoincrement())
  teamid          BigInt
  date            DateTime @db.Timestamp(6)
  text            String
  title           String   @db.VarChar(100)
  specialannounce Boolean
  teams           teams    @relation(fields: [teamid], references: [id], onDelete: Cascade, map: "fk_teamnews_teams")
}

model teams {
  id             BigInt           @id @default(autoincrement())
  accountid      BigInt
  webaddress     String           @db.VarChar(100)
  youtubeuserid  String?          @db.VarChar(100)
  defaultvideo   String           @default("") @db.VarChar(50)
  autoplayvideo  Boolean          @default(false)
  accountwelcome accountwelcome[]
  sponsors       sponsors[]
  teamhandouts   teamhandouts[]
  teamnews       teamnews[]
  accounts       accounts         @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_teams_accounts")
  teamsseason    teamsseason[]
}

model teamseasonmanager {
  id           BigInt      @id @default(autoincrement())
  teamseasonid BigInt
  contactid    BigInt
  contacts     contacts    @relation(fields: [contactid], references: [id], onDelete: Cascade, map: "fk_teamseasonmanager_contacts")
  teamsseason  teamsseason @relation(fields: [teamseasonid], references: [id], onDelete: Cascade, map: "fk_teamseasonmanager_teamsseason")
}

model teamsseason {
  id                                     BigInt              @id @default(autoincrement())
  leagueseasonid                         BigInt
  teamid                                 BigInt
  name                                   String              @db.VarChar(25)
  divisionseasonid                       BigInt?
  batstatsum                             batstatsum[]
  fieldstatsum                           fieldstatsum[]
  gamerecap                              gamerecap[]
  golfmatch_golfmatch_team1Toteamsseason golfmatch[]         @relation("golfmatch_team1Toteamsseason")
  golfmatch_golfmatch_team2Toteamsseason golfmatch[]         @relation("golfmatch_team2Toteamsseason")
  golfmatchscores                        golfmatchscores[]
  golfroster                             golfroster[]
  pitchstatsum                           pitchstatsum[]
  playerrecap                            playerrecap[]
  rosterseason                           rosterseason[]
  teamseasonmanager                      teamseasonmanager[]
  divisionseason                         divisionseason?     @relation(fields: [divisionseasonid], references: [id], map: "fk_teamsseason_divisionseasonid")
  leagueseason                           leagueseason        @relation(fields: [leagueseasonid], references: [id], onDelete: Cascade, map: "fk_teamsseason_leagueseason")
  teams                                  teams               @relation(fields: [teamid], references: [id], onDelete: Cascade, map: "fk_teamsseason_teams")

  @@index([leagueseasonid], map: "idx_teamsseason_leagueseasonid")
}

model teamswantedclassified {
  id              BigInt   @id @default(autoincrement())
  accountid       BigInt
  datecreated     DateTime @db.Date
  name            String   @db.VarChar(50)
  email           String   @db.VarChar(50)
  phone           String   @db.VarChar(15)
  experience      String
  positionsplayed String   @db.VarChar(50)
  accesscode      String   @db.Uuid
  birthdate       DateTime @db.Date
  accounts        accounts @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_teamswantedclassified_accounts")
}

model voteanswers {
  id           BigInt       @id @default(autoincrement())
  questionid   BigInt
  optionid     BigInt
  contactid    BigInt
  contacts     contacts     @relation(fields: [contactid], references: [id], onDelete: Cascade, map: "fk_voteanswers_contacts")
  voteoptions  voteoptions  @relation(fields: [optionid], references: [id], onDelete: Cascade, map: "fk_voteanswers_voteoptions")
  votequestion votequestion @relation(fields: [questionid], references: [id], onDelete: Cascade, map: "fk_voteanswers_votequestion")

  @@unique([questionid, optionid, contactid])
}

model voteoptions {
  id           BigInt        @id @default(autoincrement())
  questionid   BigInt
  optiontext   String        @db.VarChar(255)
  priority     Int
  voteanswers  voteanswers[]
  votequestion votequestion  @relation(fields: [questionid], references: [id], onDelete: Cascade, map: "fk_voteoptions_votequestion")
}

model votequestion {
  id          BigInt        @id @default(autoincrement())
  accountid   BigInt
  question    String        @db.VarChar(255)
  active      Boolean
  voteanswers voteanswers[]
  voteoptions voteoptions[]
  accounts    accounts      @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_votequestion_accounts")
}

model workoutannouncement {
  id                  BigInt                @id @default(autoincrement())
  accountid           BigInt
  workoutdesc         String
  workoutdate         DateTime              @db.Timestamp(6)
  fieldid             BigInt?
  comments            String
  accounts            accounts              @relation(fields: [accountid], references: [id], onDelete: Cascade, map: "fk_workoutannouncement_accounts")
  availablefields     availablefields?      @relation(fields: [fieldid], references: [id], map: "fk_workoutannouncement_availablefields")
  workoutregistration workoutregistration[]
}

model workoutregistration {
  id                  BigInt              @id @default(autoincrement())
  name                String              @db.VarChar(100)
  email               String              @db.VarChar(100)
  age                 Int
  phone1              String              @db.VarChar(14)
  phone2              String              @db.VarChar(14)
  phone3              String              @db.VarChar(14)
  phone4              String              @db.VarChar(14)
  positions           String              @db.VarChar(50)
  ismanager           Boolean
  workoutid           BigInt
  dateregistered      DateTime            @db.Timestamp(6)
  whereheard          String              @db.VarChar(25)
  workoutannouncement workoutannouncement @relation(fields: [workoutid], references: [id], onDelete: Cascade, map: "fk_workoutregistration_workoutannouncement")
}

model passwordresettokens {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userid    String   @db.VarChar(128)
  token     String   @db.VarChar(255)
  expiresat DateTime @db.Timestamptz(6)
  used      Boolean  @default(false)
  createdat DateTime @default(now()) @db.Timestamptz(6)
}

// Email system models
model emails {
  id                    BigInt               @id @default(autoincrement())
  account_id            BigInt
  created_by_user_id    String?              @db.VarChar(128)
  subject               String               @db.VarChar(500)
  body_html             String               @db.Text
  body_text             String?              @db.Text
  template_id           BigInt?
  status                String               @default("draft") @db.VarChar(20)
  scheduled_send_at     DateTime?
  created_at            DateTime             @default(now())
  sent_at               DateTime?
  total_recipients      Int                  @default(0)
  successful_deliveries Int                  @default(0)
  failed_deliveries     Int                  @default(0)
  bounce_count          Int                  @default(0)
  open_count            Int                  @default(0)
  click_count           Int                  @default(0)
  
  // Relations
  accounts              accounts             @relation(fields: [account_id], references: [id], onDelete: Cascade)
  created_by            aspnetusers?         @relation(fields: [created_by_user_id], references: [id], name: "EmailCreatedBy")
  template              email_templates?     @relation(fields: [template_id], references: [id])
  recipients            email_recipients[]
  attachments           email_attachments[]
  
  @@index([account_id, status])
  @@index([scheduled_send_at])
}

model email_templates {
  id                    BigInt               @id @default(autoincrement())
  account_id            BigInt
  name                  String               @db.VarChar(255)
  description           String?              @db.Text
  subject_template      String?              @db.VarChar(500)
  body_template         String               @db.Text
  created_by_user_id    String?              @db.VarChar(128)
  created_at            DateTime             @default(now())
  updated_at            DateTime             @default(now()) @updatedAt
  is_active             Boolean              @default(true)
  
  // Relations
  accounts              accounts             @relation(fields: [account_id], references: [id], onDelete: Cascade)
  created_by            aspnetusers?         @relation(fields: [created_by_user_id], references: [id], name: "EmailTemplateCreatedBy")
  emails                emails[]
  
  @@index([account_id, is_active])
}

model email_recipients {
  id                    BigInt               @id @default(autoincrement())
  email_id              BigInt
  contact_id            BigInt
  email_address         String               @db.VarChar(255)
  contact_name          String?              @db.VarChar(255)
  recipient_type        String?              @db.VarChar(50)
  status                String               @default("pending") @db.VarChar(20)
  sent_at               DateTime?
  delivered_at          DateTime?
  opened_at             DateTime?
  clicked_at            DateTime?
  bounce_reason         String?              @db.Text
  error_message         String?              @db.Text
  
  // Relations
  email                 emails               @relation(fields: [email_id], references: [id], onDelete: Cascade)
  contact               contacts             @relation(fields: [contact_id], references: [id])
  events                email_events[]
  
  @@index([email_id, status])
  @@index([contact_id])
}

model email_attachments {
  id                    BigInt               @id @default(autoincrement())
  email_id              BigInt
  filename              String               @db.VarChar(255)
  original_name         String               @db.VarChar(255)
  file_size             BigInt
  mime_type             String?              @db.VarChar(100)
  storage_path          String               @db.VarChar(500)
  uploaded_at           DateTime             @default(now())
  
  // Relations
  email                 emails               @relation(fields: [email_id], references: [id], onDelete: Cascade)
  
  @@index([email_id])
}

model email_events {
  id                    BigInt               @id @default(autoincrement())
  email_recipient_id    BigInt
  event_type            String               @db.VarChar(20)
  event_data            Json?
  occurred_at           DateTime             @default(now())
  user_agent            String?              @db.Text
  ip_address            String?              @db.Inet
  
  // Relations
  recipient             email_recipients     @relation(fields: [email_recipient_id], references: [id], onDelete: Cascade)
  
  @@index([email_recipient_id, event_type])
  @@index([occurred_at])
}
