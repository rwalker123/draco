// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Client, TDataShape } from './client';
import type {
  GetApiUsersByIdData,
  GetApiUsersByIdResponses,
  PostApiUsersData,
  PostApiUsersResponses,
} from './types.gen';
import { client } from './client.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get a user by ID
 * Retrieve a user by their unique ID
 */
export const getApiUsersById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiUsersByIdData, ThrowOnError>,
) => {
  return (options.client ?? client).get<GetApiUsersByIdResponses, unknown, ThrowOnError>({
    url: '/api/users/{id}',
    ...options,
  });
};

/**
 * Create a new user
 * Create a new user in the system
 */
export const postApiUsers = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiUsersData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<PostApiUsersResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};
