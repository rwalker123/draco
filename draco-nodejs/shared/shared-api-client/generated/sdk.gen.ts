// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Client, TDataShape } from './client';
import type {
  CreateContactData,
  CreateContactResponses,
  CreateContactErrors,
  UpdateContactData,
  UpdateContactResponses,
  UpdateContactErrors,
  DeleteContactPhotoData,
  DeleteContactPhotoResponses,
  DeleteContactPhotoErrors,
  GetContactRosterData,
  GetContactRosterResponses,
  GetContactRosterErrors,
  DeletePlayerData,
  DeletePlayerResponses,
  DeletePlayerErrors,
  UpdateRosterMemberData,
  UpdateRosterMemberResponses,
  UpdateRosterMemberErrors,
  SignPlayerData,
  SignPlayerResponses,
  SignPlayerErrors,
  ReleasePlayerData,
  ReleasePlayerResponses,
  ReleasePlayerErrors,
  ActivatePlayerData,
  ActivatePlayerResponses,
  ActivatePlayerErrors,
  AddManagerData,
  AddManagerResponses,
  AddManagerErrors,
  RemoveManagerData,
  RemoveManagerResponses,
  RemoveManagerErrors,
} from './types.gen';
import { client } from './client.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Create a new contact
 */
export const createContact = <ThrowOnError extends boolean = false>(
  options: Options<CreateContactData, ThrowOnError>,
) => {
  return (options.client ?? client).post<CreateContactResponses, CreateContactErrors, ThrowOnError>(
    {
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/accounts/{accountId}/contacts',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    },
  );
};

/**
 * Update Contact
 * Update an account contact
 */
export const updateContact = <ThrowOnError extends boolean = false>(
  options: Options<UpdateContactData, ThrowOnError>,
) => {
  return (options.client ?? client).put<UpdateContactResponses, UpdateContactErrors, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/accounts/{accountId}/contacts/{contactId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete a contact photo
 */
export const deleteContactPhoto = <ThrowOnError extends boolean = false>(
  options: Options<DeleteContactPhotoData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    DeleteContactPhotoResponses,
    DeleteContactPhotoErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/accounts/{accountId}/contacts/{contactId}/photo',
    ...options,
  });
};

/**
 * Get a roster entry for a contact. This is information that is global to a player once they are on a team, it is not season specfic
 */
export const getContactRoster = <ThrowOnError extends boolean = false>(
  options: Options<GetContactRosterData, ThrowOnError>,
) => {
  return (options.client ?? client).get<
    GetContactRosterResponses,
    GetContactRosterErrors,
    ThrowOnError
  >({
    url: '/api/accounts/{accountId}/contacts/{contactId}/roster',
    ...options,
  });
};

/**
 * Delete a player from the team for the given season. This is a permanent action and cannot be undone. Use releasePlayer if you want to keep the player stats for the given team season.
 */
export const deletePlayer = <ThrowOnError extends boolean = false>(
  options: Options<DeletePlayerData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<DeletePlayerResponses, DeletePlayerErrors, ThrowOnError>(
    {
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/roster/{rosterMemberId}',
      ...options,
    },
  );
};

/**
 * Update roster entry
 * Update a roster entry for a team season
 */
export const updateRosterMember = <ThrowOnError extends boolean = false>(
  options: Options<UpdateRosterMemberData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    UpdateRosterMemberResponses,
    UpdateRosterMemberErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/roster/{rosterMemberId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Sing player to roster
 * Sign a player to the team roster
 */
export const signPlayer = <ThrowOnError extends boolean = false>(
  options: Options<SignPlayerData, ThrowOnError>,
) => {
  return (options.client ?? client).post<SignPlayerResponses, SignPlayerErrors, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/roster',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Release a player from the team for the given season
 */
export const releasePlayer = <ThrowOnError extends boolean = false>(
  options: Options<ReleasePlayerData, ThrowOnError>,
) => {
  return (options.client ?? client).put<ReleasePlayerResponses, ReleasePlayerErrors, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/roster/{rosterMemberId}/release',
    ...options,
  });
};

/**
 * Activate a released player from the team for the given season
 */
export const activatePlayer = <ThrowOnError extends boolean = false>(
  options: Options<ActivatePlayerData, ThrowOnError>,
) => {
  return (options.client ?? client).put<
    ActivatePlayerResponses,
    ActivatePlayerErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/roster/{rosterMemberId}/activate',
    ...options,
  });
};

/**
 * Add a manager to the team for the given season
 */
export const addManager = <ThrowOnError extends boolean = false>(
  options: Options<AddManagerData, ThrowOnError>,
) => {
  return (options.client ?? client).post<AddManagerResponses, AddManagerErrors, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/managers',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Remove a manager from the team for the given season
 */
export const removeManager = <ThrowOnError extends boolean = false>(
  options: Options<RemoveManagerData, ThrowOnError>,
) => {
  return (options.client ?? client).delete<
    RemoveManagerResponses,
    RemoveManagerErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/managers/{managerId}',
    ...options,
  });
};
