// This file is auto-generated by @hey-api/openapi-ts

/**
 * Schema for a roster member including player details
 */
export type RosterMember = {
  id: string;
  playerNumber?: number;
  inactive?: boolean;
  submittedWaiver?: boolean;
  dateAdded?: string | null;
  /**
   * Schema for a player who is or was on a team roster. This contains details that only ever need to be supplied once
   */
  player: {
    id: string;
    submittedDriversLicense?: boolean;
    firstYear: number;
    contact: {
      id: string;
      firstName: string;
      lastName: string;
      middleName?: string;
      email?: string;
      userId?: string;
      photoUrl?: string;
      contactDetails?: {
        phone1?: string | null;
        phone2?: string | null;
        phone3?: string | null;
        streetaddress?: string | null;
        city?: string | null;
        state?: string | null;
        zip?: string | null;
        dateofbirth?: string | null;
      };
    };
  };
};

/**
 * Schema for a player who is or was on a team roster. This contains details that only ever need to be supplied once
 */
export type RosterPlayer = {
  id: string;
  submittedDriversLicense?: boolean;
  firstYear: number;
  contact: {
    id: string;
    firstName: string;
    lastName: string;
    middleName?: string;
    email?: string;
    userId?: string;
    photoUrl?: string;
    contactDetails?: {
      phone1?: string | null;
      phone2?: string | null;
      phone3?: string | null;
      streetaddress?: string | null;
      city?: string | null;
      state?: string | null;
      zip?: string | null;
      dateofbirth?: string | null;
    };
  };
};

/**
 * Schema for signing a contact to a roster and providing player details
 */
export type SignRosterMember = {
  playerNumber?: number;
  submittedWaiver?: boolean;
  player: {
    submittedDriversLicense: boolean;
    firstYear: number;
    contact:
      | {
          id: string;
        }
      | {
          firstName?: string;
          lastName?: string;
          middleName?: string;
          email?: string;
          userId?: string;
          photoUrl?: string;
          contactDetails?: {
            phone1?: string | null;
            phone2?: string | null;
            phone3?: string | null;
            streetaddress?: string | null;
            city?: string | null;
            state?: string | null;
            zip?: string | null;
            dateofbirth?: string | null;
          };
        };
  };
};

export type Contact = {
  id: string;
  firstName: string;
  lastName: string;
  middleName?: string;
  email?: string;
  userId?: string;
  photoUrl?: string;
  contactDetails?: {
    phone1?: string | null;
    phone2?: string | null;
    phone3?: string | null;
    streetaddress?: string | null;
    city?: string | null;
    state?: string | null;
    zip?: string | null;
    dateofbirth?: string | null;
  };
  contactroles?: Array<{
    id: string;
    roleId: string;
    roleName?: string;
    roleData: string;
    contextName?: string;
  }>;
  creatoraccountid?: string;
};

/**
 * Schema for a manager of a team for a given season
 */
export type TeamManager = {
  id: string;
  teamSeasonId: string;
  contact: {
    id: string;
    firstName: string;
    lastName: string;
    middleName?: string;
    email?: string;
    userId?: string;
    photoUrl?: string;
    contactDetails?: {
      phone1?: string | null;
      phone2?: string | null;
      phone3?: string | null;
      streetaddress?: string | null;
      city?: string | null;
      state?: string | null;
      zip?: string | null;
      dateofbirth?: string | null;
    };
  };
};

/**
 * Schema for creating a manager
 */
export type CreateTeamManager = {
  contact: {
    id: string;
  };
};

export type CreateContact = {
  firstName: string;
  lastName: string;
  middleName?: string;
  email?: string;
  contactDetails?: {
    phone1?: string | null;
    phone2?: string | null;
    phone3?: string | null;
    streetaddress?: string | null;
    city?: string | null;
    state?: string | null;
    zip?: string | null;
    dateofbirth?: string | null;
  };
  /**
   * Contact photo file
   */
  photo?: Blob | File;
};

/**
 * Validation error (400)
 */
export type ValidationError = {
  message: string;
  statusCode: 400;
  isRetryable: false;
};

/**
 * Authentication error (401)
 */
export type AuthenticationError = {
  message: string;
  statusCode: 401;
  isRetryable: false;
};

/**
 * Authorization error (403)
 */
export type AuthorizationError = {
  message: string;
  statusCode: 403;
  isRetryable: false;
};

/**
 * Resource not found error (404)
 */
export type NotFoundError = {
  message: string;
  statusCode: 404;
  isRetryable: false;
};

/**
 * Resource conflict error (409)
 */
export type ConflictError = {
  message: string;
  statusCode: 409;
  isRetryable: false;
};

/**
 * Internal server error (500)
 */
export type InternalServerError = {
  message: string;
  statusCode: 500;
  isRetryable: true;
};

export type CreateContactData = {
  body?: {
    firstName?: string;
    lastName?: string;
    middleName?: string;
    email?: string;
    contactDetails?: {
      phone1?: string | null;
      phone2?: string | null;
      phone3?: string | null;
      streetaddress?: string | null;
      city?: string | null;
      state?: string | null;
      zip?: string | null;
      dateofbirth?: string | null;
    };
    /**
     * Contact photo file
     */
    photo?: Blob | File;
  };
  path: {
    accountId: string;
  };
  query?: never;
  url: '/api/accounts/{accountId}/contacts';
};

export type CreateContactErrors = {
  /**
   * Validation error
   */
  400: ValidationError;
  /**
   * Authentication required
   */
  401: AuthenticationError;
  /**
   * Access denied - Account admin required
   */
  403: AuthorizationError;
  /**
   * Contact not found
   */
  404: NotFoundError;
  /**
   * Conflict error - e.g. duplicate email
   */
  409: ConflictError;
  /**
   * Internal server error
   */
  500: InternalServerError;
};

export type CreateContactError = CreateContactErrors[keyof CreateContactErrors];

export type CreateContactResponses = {
  /**
   * Contact created
   */
  200: Contact;
};

export type CreateContactResponse = CreateContactResponses[keyof CreateContactResponses];

export type UpdateContactData = {
  body?: {
    firstName?: string;
    lastName?: string;
    middleName?: string;
    email?: string;
    contactDetails?: {
      phone1?: string | null;
      phone2?: string | null;
      phone3?: string | null;
      streetaddress?: string | null;
      city?: string | null;
      state?: string | null;
      zip?: string | null;
      dateofbirth?: string | null;
    };
    /**
     * Contact photo file
     */
    photo?: Blob | File;
  };
  path: {
    accountId: string;
    contactId: string;
  };
  query?: never;
  url: '/api/accounts/{accountId}/contacts/{contactId}';
};

export type UpdateContactErrors = {
  /**
   * Validation error
   */
  400: ValidationError;
  /**
   * Authentication required
   */
  401: AuthenticationError;
  /**
   * Access denied - Account admin required
   */
  403: AuthorizationError;
  /**
   * Contact not found
   */
  404: NotFoundError;
  /**
   * Conflict error - e.g. duplicate email
   */
  409: ConflictError;
  /**
   * Internal server error
   */
  500: InternalServerError;
};

export type UpdateContactError = UpdateContactErrors[keyof UpdateContactErrors];

export type UpdateContactResponses = {
  /**
   * Contact updated
   */
  200: Contact;
};

export type UpdateContactResponse = UpdateContactResponses[keyof UpdateContactResponses];

export type DeleteContactPhotoData = {
  body?: never;
  path: {
    accountId: string;
    contactId: string;
  };
  query?: never;
  url: '/api/accounts/{accountId}/contacts/{contactId}/photo';
};

export type DeleteContactPhotoErrors = {
  /**
   * Authentication required
   */
  401: AuthenticationError;
  /**
   * Access denied - Account admin required
   */
  403: AuthorizationError;
  /**
   * Contact not found
   */
  404: NotFoundError;
  /**
   * Internal server error
   */
  500: InternalServerError;
};

export type DeleteContactPhotoError = DeleteContactPhotoErrors[keyof DeleteContactPhotoErrors];

export type DeleteContactPhotoResponses = {
  /**
   * Contact photo deleted
   */
  200: string;
};

export type DeleteContactPhotoResponse =
  DeleteContactPhotoResponses[keyof DeleteContactPhotoResponses];

export type GetContactRosterData = {
  body?: never;
  path: {
    accountId: string;
    contactId: string;
  };
  query?: never;
  url: '/api/accounts/{accountId}/contacts/{contactId}/roster';
};

export type GetContactRosterErrors = {
  /**
   * Validation error
   */
  400: ValidationError;
  /**
   * Roster member or team not found
   */
  404: NotFoundError;
  /**
   * Internal server error
   */
  500: InternalServerError;
};

export type GetContactRosterError = GetContactRosterErrors[keyof GetContactRosterErrors];

export type GetContactRosterResponses = {
  /**
   * Roster entry found
   */
  200: RosterPlayer;
};

export type GetContactRosterResponse = GetContactRosterResponses[keyof GetContactRosterResponses];

export type DeletePlayerData = {
  body?: never;
  path: {
    accountId: string;
    seasonId: string;
    teamSeasonId: string;
    rosterMemberId: string;
  };
  query?: never;
  url: '/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/roster/{rosterMemberId}';
};

export type DeletePlayerErrors = {
  /**
   * Authentication required
   */
  401: AuthenticationError;
  /**
   * Access denied - Account admin required
   */
  403: AuthorizationError;
  /**
   * Player not found
   */
  404: NotFoundError;
  /**
   * Internal server error
   */
  500: InternalServerError;
};

export type DeletePlayerError = DeletePlayerErrors[keyof DeletePlayerErrors];

export type DeletePlayerResponses = {
  /**
   * Player deleted
   */
  200: string;
};

export type DeletePlayerResponse = DeletePlayerResponses[keyof DeletePlayerResponses];

export type UpdateRosterMemberData = {
  body?: {
    id?: string;
    playerNumber?: number;
    inactive?: boolean;
    submittedWaiver?: boolean;
    dateAdded?: string | null;
    /**
     * Schema for a player who is or was on a team roster. This contains details that only ever need to be supplied once
     */
    player?: {
      id: string;
      submittedDriversLicense?: boolean;
      firstYear: number;
      contact: {
        id: string;
        firstName: string;
        lastName: string;
        middleName?: string;
        email?: string;
        userId?: string;
        photoUrl?: string;
        contactDetails?: {
          phone1?: string | null;
          phone2?: string | null;
          phone3?: string | null;
          streetaddress?: string | null;
          city?: string | null;
          state?: string | null;
          zip?: string | null;
          dateofbirth?: string | null;
        };
      };
    };
  };
  path: {
    accountId: string;
    seasonId: string;
    teamSeasonId: string;
    rosterMemberId: string;
  };
  query?: never;
  url: '/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/roster/{rosterMemberId}';
};

export type UpdateRosterMemberErrors = {
  /**
   * Validation error
   */
  400: ValidationError;
  /**
   * Authentication required
   */
  401: AuthenticationError;
  /**
   * Access denied - Account admin required
   */
  403: AuthorizationError;
  /**
   * Roster member or team not found
   */
  404: NotFoundError;
  /**
   * Internal server error
   */
  500: InternalServerError;
};

export type UpdateRosterMemberError = UpdateRosterMemberErrors[keyof UpdateRosterMemberErrors];

export type UpdateRosterMemberResponses = {
  /**
   * Roster entry updated
   */
  200: RosterMember;
};

export type UpdateRosterMemberResponse =
  UpdateRosterMemberResponses[keyof UpdateRosterMemberResponses];

export type SignPlayerData = {
  body?: SignRosterMember;
  path: {
    accountId: string;
    seasonId: string;
    teamSeasonId: string;
  };
  query?: never;
  url: '/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/roster';
};

export type SignPlayerErrors = {
  /**
   * Validation error
   */
  400: ValidationError;
  /**
   * Authentication required
   */
  401: AuthenticationError;
  /**
   * Access denied - Account admin required
   */
  403: AuthorizationError;
  /**
   * Contact not found
   */
  404: NotFoundError;
  /**
   * Internal server error
   */
  500: InternalServerError;
};

export type SignPlayerError = SignPlayerErrors[keyof SignPlayerErrors];

export type SignPlayerResponses = {
  /**
   * Player signed to roster
   */
  201: RosterMember;
};

export type SignPlayerResponse = SignPlayerResponses[keyof SignPlayerResponses];

export type ReleasePlayerData = {
  body?: never;
  path: {
    accountId: string;
    seasonId: string;
    teamSeasonId: string;
    rosterMemberId: string;
  };
  query?: never;
  url: '/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/roster/{rosterMemberId}/release';
};

export type ReleasePlayerErrors = {
  /**
   * Authentication required
   */
  401: AuthenticationError;
  /**
   * Access denied - Account admin required
   */
  403: AuthorizationError;
  /**
   * Player not found
   */
  404: NotFoundError;
  /**
   * Internal server error
   */
  500: InternalServerError;
};

export type ReleasePlayerError = ReleasePlayerErrors[keyof ReleasePlayerErrors];

export type ReleasePlayerResponses = {
  /**
   * Player released
   */
  200: RosterMember;
};

export type ReleasePlayerResponse = ReleasePlayerResponses[keyof ReleasePlayerResponses];

export type ActivatePlayerData = {
  body?: never;
  path: {
    accountId: string;
    seasonId: string;
    teamSeasonId: string;
    rosterMemberId: string;
  };
  query?: never;
  url: '/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/roster/{rosterMemberId}/activate';
};

export type ActivatePlayerErrors = {
  /**
   * Authentication required
   */
  401: AuthenticationError;
  /**
   * Access denied - Account admin required
   */
  403: AuthorizationError;
  /**
   * Player not found
   */
  404: NotFoundError;
  /**
   * Internal server error
   */
  500: InternalServerError;
};

export type ActivatePlayerError = ActivatePlayerErrors[keyof ActivatePlayerErrors];

export type ActivatePlayerResponses = {
  /**
   * Player activated
   */
  200: RosterMember;
};

export type ActivatePlayerResponse = ActivatePlayerResponses[keyof ActivatePlayerResponses];

export type AddManagerData = {
  body?: CreateTeamManager;
  path: {
    accountId: string;
    seasonId: string;
    teamSeasonId: string;
  };
  query?: never;
  url: '/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/managers';
};

export type AddManagerErrors = {
  /**
   * Validation error
   */
  400: ValidationError;
  /**
   * Authentication required
   */
  401: AuthenticationError;
  /**
   * Access denied - Account admin required
   */
  403: AuthorizationError;
  /**
   * Manager not found
   */
  404: NotFoundError;
  /**
   * Internal server error
   */
  500: InternalServerError;
};

export type AddManagerError = AddManagerErrors[keyof AddManagerErrors];

export type AddManagerResponses = {
  /**
   * Manager added
   */
  200: TeamManager;
};

export type AddManagerResponse = AddManagerResponses[keyof AddManagerResponses];

export type RemoveManagerData = {
  body?: never;
  path: {
    accountId: string;
    seasonId: string;
    teamSeasonId: string;
    managerId: string;
  };
  query?: never;
  url: '/api/accounts/{accountId}/seasons/{seasonId}/teams/{teamSeasonId}/managers/{managerId}';
};

export type RemoveManagerErrors = {
  /**
   * Authentication required
   */
  401: AuthenticationError;
  /**
   * Access denied - Account admin required
   */
  403: AuthorizationError;
  /**
   * Manager not found
   */
  404: NotFoundError;
  /**
   * Internal server error
   */
  500: InternalServerError;
};

export type RemoveManagerError = RemoveManagerErrors[keyof RemoveManagerErrors];

export type RemoveManagerResponses = {
  /**
   * Manager removed
   */
  200: string;
};

export type RemoveManagerResponse = RemoveManagerResponses[keyof RemoveManagerResponses];

export type ClientOptions = {
  baseUrl: 'https://localhost:3001' | (string & {});
};
