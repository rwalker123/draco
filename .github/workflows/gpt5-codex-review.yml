name: GPT-5 Codex Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  codex-review:
    runs-on: ubuntu-latest
    steps:
      - name: Run GPT-5 Codex Review
        uses: actions/github-script@v7
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          script: |
            const pullNumber = context.payload.pull_request?.number;
            if (!pullNumber) {
              core.notice('No pull request context; skipping GPT-5 Codex review.');
              return;
            }

            if (!process.env.OPENAI_API_KEY) {
              core.setFailed('OPENAI_API_KEY secret is not configured.');
              return;
            }

            const diffResponse = await github.request('GET /repos/{owner}/{repo}/pulls/{pull_number}', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pullNumber,
              mediaType: { format: 'diff' },
            });

            let diff = diffResponse.data || '';
            if (!diff.trim()) {
              core.notice('PR diff is empty; skipping GPT-5 Codex review.');
              return;
            }

            const maxChars = 60000;
            if (diff.length > maxChars) {
              core.warning(`Diff longer than ${maxChars} characters; truncating for review.`);
              diff = diff.slice(0, maxChars);
            }

            const prompt = [
              {
                role: 'system',
                content: 'You are GPT-5 Codex, an expert software engineer tasked with reviewing pull requests. Identify defects, risky changes, missing tests, and adherence to repository conventions. Focus on actionable, specific feedback tied to the provided diff.',
              },
              {
                role: 'user',
                content: `Repository: ${context.repo.owner}/${context.repo.repo}\nPull Request #${pullNumber}\n\nDiff:\n${diff}`,
              },
            ];

            const response = await fetch('https://api.openai.com/v1/responses', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
              },
              body: JSON.stringify({
                model: 'gpt-5',
                input: prompt,
                max_output_tokens: 1200,
              }),
            });

            if (!response.ok) {
              const errorText = await response.text();
              core.setFailed(`OpenAI API request failed: ${response.status} ${response.statusText} - ${errorText}`);
              return;
            }

            const data = await response.json();
            let reviewBody = '';

            if (typeof data.output_text === 'string') {
              reviewBody = data.output_text;
            } else if (Array.isArray(data.output)) {
              reviewBody = data.output
                .map(block => {
                  if (!block?.content) return '';
                  return block.content
                    .map(part => part?.text ?? '')
                    .join('');
                })
                .join('\n');
            }

            reviewBody = (reviewBody || '').trim();
            if (!reviewBody) {
              core.notice('GPT-5 Codex returned no content; no comment will be posted.');
              return;
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pullNumber,
              body: reviewBody,
            });

            core.notice('Posted GPT-5 Codex review comment.');
