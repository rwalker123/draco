name: Auto-merge PRs

on:
  workflow_run:
    workflows: ["PR Validation"]
    types:
      - completed

jobs:
  auto-merge:
    name: Auto-merge approved PRs
    runs-on: ubuntu-latest
    
    # Only run if the PR validation workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Get PR information
        id: pr-info
        uses: actions/github-script@v7
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${context.payload.workflow_run.head_branch}`,
              state: 'open'
            });
            
            if (prs.length === 0) {
              console.log('No open PR found for this branch');
              return;
            }
            
            const pr = prs[0];
            console.log(`Found PR #${pr.number}: ${pr.title}`);
            
            // Check if PR has auto-merge label
            const hasAutoMergeLabel = pr.labels.some(label => 
              label.name === 'auto-merge' || label.name === 'automerge'
            );
            
            if (!hasAutoMergeLabel) {
              console.log('PR does not have auto-merge label, skipping');
              return;
            }
            
            return {
              number: pr.number,
              mergeable: pr.mergeable,
              mergeable_state: pr.mergeable_state
            };
            
      - name: Auto-merge PR
        if: steps.pr-info.outputs.result != 'undefined'
        uses: actions/github-script@v7
        with:
          script: |
            const prInfo = JSON.parse('${{ steps.pr-info.outputs.result }}');
            
            if (!prInfo) {
              console.log('No PR information available, skipping');
              return;
            }
            
            const { number, mergeable, mergeable_state } = prInfo;
            
            if (!mergeable || mergeable_state !== 'clean') {
              console.log(`PR #${number} is not mergeable (state: ${mergeable_state}), skipping`);
              return;
            }
            
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: number,
                merge_method: 'squash',
                commit_title: `Auto-merge PR #${number}`,
                commit_message: `ü§ñ Auto-merged after successful validation\n\nGenerated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>`
              });
              
              console.log(`Successfully auto-merged PR #${number}`);
              
            } catch (error) {
              console.log(`Failed to auto-merge PR #${number}: ${error.message}`);
              
              // Comment on the PR about the failure
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: number,
                body: `‚ö†Ô∏è Auto-merge failed: ${error.message}\n\nPlease merge manually or check the requirements.`
              });
            }