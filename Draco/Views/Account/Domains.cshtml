@model SportsManager.ViewModels.DomainsViewModel

@{
    ViewBag.Title = @Model.AccountName + " Domains";
}

@section head
{
}


<div class="jumbotron">
    @Header.DisplayHeader("Domains", Model.AccountName, Model.AccountLogoUrl)
    <p class="help-block">Map domains you own to your league website.</p>
</div> <!-- content-wrapper -->

<form class="form-inline" role="form" style="margin-top:20px">
    <small>add domain</small><br />
    <div class="form-group col-sm-12">
        <label for="urlField" class="sr-only">Domain Name</label>
        <div class="input-group col-sm-12">
            <input id="urlField" data-bind="value: newUrl" type="url" class="form-control" placeholder="ex: http://www.yourdomain.com" pattern=".{1,}" title="Must supply a url" />
            <span class="input-group-btn">
                <button type="button" class="btn btn-primary" data-bind="click: addUrl" title="add new mapped url"><span class="glyphicon glyphicon-plus"></span></button>
            </span>
        </div>
    </div>
</form>

<hr />
<div data-bind="foreach: mappedUrls" class="list-group">
    <div class="list-group-item col-sm-12">
        <form class="form-inline" role="form">
            <div class="form-group col-sm-12">
                <div class="input-group col-sm-12">
                    <input readonly="readonly" data-bind="value: URL" type="url" class="form-control" placeholder="ex: http://www.yourdomain.com" />
                    <span class="input-group-btn">
                        <button type="button" class="btn btn-danger" data-bind="click: $parent.deleteUrl" title="delete mapped URL"><span class="glyphicon glyphicon-remove"></span></button>
                    </span>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- ko if: mappedUrls().length == 0 -->
<h3 class="alert alert-info">No domains mapped to this account.</h3>
<!-- /ko -->

@section scripts
{
@Scripts.Render("~/bundles/knockout")

<script type="text/javascript">

    var UrlViewModel = function(accountId, accountName) {
        var self = this;

        self.accountId = accountId;
        self.accountName = accountName,
        self.newUrl = ko.observable();
        self.mappedUrls = ko.observableArray();

        self.updateUrl = function(url) {
            $.ajax({
                type: "PUT",
                url: window.config.rootUri + '/api/AccountAPI/@Model.AccountId/AccountUrl/' + url.Id,
                data: JSON.stringify({
                    Id: url.Id,
                    AccountId: url.AccountId,
                    URL: url.URL
                }),
                success: function (accountUrl) {
                }
            });
        }

        self.deleteUrl = function (url) {

            $.ajax({
                type: "DELETE",
                url: window.config.rootUri + '/api/AccountAPI/@Model.AccountId/AccountUrl/' + url.Id,
                success: function () {
                    var foundUrl = ko.utils.arrayFirst(self.mappedUrls(), function (aUrl) {
                        return (url.Id == aUrl().Id);
                    });

                    self.mappedUrls.remove(foundUrl);
                }
            });
        }
    };

    var vm;

    $(document).ready(function () {
        initKOHelpers();
        vm = new UrlViewModel(@Model.AccountId, '@Model.AccountName');

        @foreach (var url in Model.AccountUrls)
        {
            <text>
            var accountUrl = {
                Id: @url.Id,
                AccountId: @url.AccountId,
                URL: '@url.URL'
            };
            var x = ko.observable(accountUrl);
            x.subscribe(function(vm) {
                vm.updateUrl(vm);
            });
            vm.mappedUrls.push(x);
            </text>
        }

        ko.applyBindings(vm);
    });

    function addUrl() {
        if (!vm.newUrl())
            return;

        var data = {
            Id: 0,
            AccountId: @Model.AccountId,
            URL: vm.newUrl()
        };
        $.ajax({
            type: "POST",
            url: window.config.rootUri + '/api/AccountAPI/@Model.AccountId/AccountUrl',
            data: data,
            success: function (accountUrl) {
                window.location.hash = 'update';
                var x = ko.observable(accountUrl);
                x.subscribe(function(vm) {
                    vm.updateUrl(vm);
                });
                vm.mappedUrls.push(x);
                vm.newUrl('');
            }
        });
    }

</script>
}
