#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SportsManager
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="detroitmsbl")]
	public partial class DB : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccountHandout(SportsManager.Model.AccountHandout instance);
    partial void UpdateAccountHandout(SportsManager.Model.AccountHandout instance);
    partial void DeleteAccountHandout(SportsManager.Model.AccountHandout instance);
    partial void InsertAccount(SportsManager.Model.Account instance);
    partial void UpdateAccount(SportsManager.Model.Account instance);
    partial void DeleteAccount(SportsManager.Model.Account instance);
    partial void InsertAccountSetting(SportsManager.Model.AccountSetting instance);
    partial void UpdateAccountSetting(SportsManager.Model.AccountSetting instance);
    partial void DeleteAccountSetting(SportsManager.Model.AccountSetting instance);
    partial void InsertAccountType(SportsManager.Model.AccountType instance);
    partial void UpdateAccountType(SportsManager.Model.AccountType instance);
    partial void DeleteAccountType(SportsManager.Model.AccountType instance);
    partial void InsertAccountWelcome(SportsManager.Model.AccountWelcome instance);
    partial void UpdateAccountWelcome(SportsManager.Model.AccountWelcome instance);
    partial void DeleteAccountWelcome(SportsManager.Model.AccountWelcome instance);
    partial void InsertGameRecap(SportsManager.Model.GameRecap instance);
    partial void UpdateGameRecap(SportsManager.Model.GameRecap instance);
    partial void DeleteGameRecap(SportsManager.Model.GameRecap instance);
    partial void InsertAffiliation(SportsManager.Model.Affiliation instance);
    partial void UpdateAffiliation(SportsManager.Model.Affiliation instance);
    partial void DeleteAffiliation(SportsManager.Model.Affiliation instance);
    partial void InsertAspNetRole(SportsManager.Model.AspNetRole instance);
    partial void UpdateAspNetRole(SportsManager.Model.AspNetRole instance);
    partial void DeleteAspNetRole(SportsManager.Model.AspNetRole instance);
    partial void InsertAspNetUserClaim(SportsManager.Model.AspNetUserClaim instance);
    partial void UpdateAspNetUserClaim(SportsManager.Model.AspNetUserClaim instance);
    partial void DeleteAspNetUserClaim(SportsManager.Model.AspNetUserClaim instance);
    partial void InsertAspNetUserLogin(SportsManager.Model.AspNetUserLogin instance);
    partial void UpdateAspNetUserLogin(SportsManager.Model.AspNetUserLogin instance);
    partial void DeleteAspNetUserLogin(SportsManager.Model.AspNetUserLogin instance);
    partial void InsertAspNetUserRole(SportsManager.Model.AspNetUserRole instance);
    partial void UpdateAspNetUserRole(SportsManager.Model.AspNetUserRole instance);
    partial void DeleteAspNetUserRole(SportsManager.Model.AspNetUserRole instance);
    partial void InsertAvailableField(SportsManager.Model.AvailableField instance);
    partial void UpdateAvailableField(SportsManager.Model.AvailableField instance);
    partial void DeleteAvailableField(SportsManager.Model.AvailableField instance);
    partial void Insertbatstatsum(SportsManager.Model.batstatsum instance);
    partial void Updatebatstatsum(SportsManager.Model.batstatsum instance);
    partial void Deletebatstatsum(SportsManager.Model.batstatsum instance);
    partial void InsertContactRole(SportsManager.Model.ContactRole instance);
    partial void UpdateContactRole(SportsManager.Model.ContactRole instance);
    partial void DeleteContactRole(SportsManager.Model.ContactRole instance);
    partial void InsertContact(SportsManager.Model.Contact instance);
    partial void UpdateContact(SportsManager.Model.Contact instance);
    partial void DeleteContact(SportsManager.Model.Contact instance);
    partial void InsertCurrentSeason(SportsManager.Model.CurrentSeason instance);
    partial void UpdateCurrentSeason(SportsManager.Model.CurrentSeason instance);
    partial void DeleteCurrentSeason(SportsManager.Model.CurrentSeason instance);
    partial void InsertDivisionDef(SportsManager.Model.DivisionDef instance);
    partial void UpdateDivisionDef(SportsManager.Model.DivisionDef instance);
    partial void DeleteDivisionDef(SportsManager.Model.DivisionDef instance);
    partial void InsertDivisionSeason(SportsManager.Model.DivisionSeason instance);
    partial void UpdateDivisionSeason(SportsManager.Model.DivisionSeason instance);
    partial void DeleteDivisionSeason(SportsManager.Model.DivisionSeason instance);
    partial void InsertFieldContact(SportsManager.Model.FieldContact instance);
    partial void UpdateFieldContact(SportsManager.Model.FieldContact instance);
    partial void DeleteFieldContact(SportsManager.Model.FieldContact instance);
    partial void Insertfieldstatsum(SportsManager.Model.fieldstatsum instance);
    partial void Updatefieldstatsum(SportsManager.Model.fieldstatsum instance);
    partial void Deletefieldstatsum(SportsManager.Model.fieldstatsum instance);
    partial void InsertGameEjection(SportsManager.Model.GameEjection instance);
    partial void UpdateGameEjection(SportsManager.Model.GameEjection instance);
    partial void DeleteGameEjection(SportsManager.Model.GameEjection instance);
    partial void InsertGolfCourse(SportsManager.Model.GolfCourse instance);
    partial void UpdateGolfCourse(SportsManager.Model.GolfCourse instance);
    partial void DeleteGolfCourse(SportsManager.Model.GolfCourse instance);
    partial void InsertWorkoutRegistration(SportsManager.Model.WorkoutRegistration instance);
    partial void UpdateWorkoutRegistration(SportsManager.Model.WorkoutRegistration instance);
    partial void DeleteWorkoutRegistration(SportsManager.Model.WorkoutRegistration instance);
    partial void InsertGolfCourseForContact(SportsManager.Model.GolfCourseForContact instance);
    partial void UpdateGolfCourseForContact(SportsManager.Model.GolfCourseForContact instance);
    partial void DeleteGolfCourseForContact(SportsManager.Model.GolfCourseForContact instance);
    partial void InsertGolferStatsConfiguration(SportsManager.Model.GolferStatsConfiguration instance);
    partial void UpdateGolferStatsConfiguration(SportsManager.Model.GolferStatsConfiguration instance);
    partial void DeleteGolferStatsConfiguration(SportsManager.Model.GolferStatsConfiguration instance);
    partial void InsertGolferStatsValue(SportsManager.Model.GolferStatsValue instance);
    partial void UpdateGolferStatsValue(SportsManager.Model.GolferStatsValue instance);
    partial void DeleteGolferStatsValue(SportsManager.Model.GolferStatsValue instance);
    partial void InsertGolfLeagueCourse(SportsManager.Model.GolfLeagueCourse instance);
    partial void UpdateGolfLeagueCourse(SportsManager.Model.GolfLeagueCourse instance);
    partial void DeleteGolfLeagueCourse(SportsManager.Model.GolfLeagueCourse instance);
    partial void InsertGolfLeagueSetup(SportsManager.Model.GolfLeagueSetup instance);
    partial void UpdateGolfLeagueSetup(SportsManager.Model.GolfLeagueSetup instance);
    partial void DeleteGolfLeagueSetup(SportsManager.Model.GolfLeagueSetup instance);
    partial void InsertGolfMatch(SportsManager.Model.GolfMatch instance);
    partial void UpdateGolfMatch(SportsManager.Model.GolfMatch instance);
    partial void DeleteGolfMatch(SportsManager.Model.GolfMatch instance);
    partial void InsertGolfMatchScore(SportsManager.Model.GolfMatchScore instance);
    partial void UpdateGolfMatchScore(SportsManager.Model.GolfMatchScore instance);
    partial void DeleteGolfMatchScore(SportsManager.Model.GolfMatchScore instance);
    partial void InsertGolfRoster(SportsManager.Model.GolfRoster instance);
    partial void UpdateGolfRoster(SportsManager.Model.GolfRoster instance);
    partial void DeleteGolfRoster(SportsManager.Model.GolfRoster instance);
    partial void InsertGolfScore(SportsManager.Model.GolfScore instance);
    partial void UpdateGolfScore(SportsManager.Model.GolfScore instance);
    partial void DeleteGolfScore(SportsManager.Model.GolfScore instance);
    partial void InsertGolfStatDef(SportsManager.Model.GolfStatDef instance);
    partial void UpdateGolfStatDef(SportsManager.Model.GolfStatDef instance);
    partial void DeleteGolfStatDef(SportsManager.Model.GolfStatDef instance);
    partial void InsertGolfTeeInformation(SportsManager.Model.GolfTeeInformation instance);
    partial void UpdateGolfTeeInformation(SportsManager.Model.GolfTeeInformation instance);
    partial void DeleteGolfTeeInformation(SportsManager.Model.GolfTeeInformation instance);
    partial void Inserthof(SportsManager.Model.hof instance);
    partial void Updatehof(SportsManager.Model.hof instance);
    partial void Deletehof(SportsManager.Model.hof instance);
    partial void InsertHOFNomination(SportsManager.Model.HOFNomination instance);
    partial void UpdateHOFNomination(SportsManager.Model.HOFNomination instance);
    partial void DeleteHOFNomination(SportsManager.Model.HOFNomination instance);
    partial void InsertHOFNominationSetup(SportsManager.Model.HOFNominationSetup instance);
    partial void UpdateHOFNominationSetup(SportsManager.Model.HOFNominationSetup instance);
    partial void DeleteHOFNominationSetup(SportsManager.Model.HOFNominationSetup instance);
    partial void InsertLeague(SportsManager.Model.League instance);
    partial void UpdateLeague(SportsManager.Model.League instance);
    partial void DeleteLeague(SportsManager.Model.League instance);
    partial void InsertLeagueEvent(SportsManager.Model.LeagueEvent instance);
    partial void UpdateLeagueEvent(SportsManager.Model.LeagueEvent instance);
    partial void DeleteLeagueEvent(SportsManager.Model.LeagueEvent instance);
    partial void InsertLeagueFAQ(SportsManager.Model.LeagueFAQ instance);
    partial void UpdateLeagueFAQ(SportsManager.Model.LeagueFAQ instance);
    partial void DeleteLeagueFAQ(SportsManager.Model.LeagueFAQ instance);
    partial void InsertLeagueNew(SportsManager.Model.LeagueNew instance);
    partial void UpdateLeagueNew(SportsManager.Model.LeagueNew instance);
    partial void DeleteLeagueNew(SportsManager.Model.LeagueNew instance);
    partial void InsertLeagueSchedule(SportsManager.Model.LeagueSchedule instance);
    partial void UpdateLeagueSchedule(SportsManager.Model.LeagueSchedule instance);
    partial void DeleteLeagueSchedule(SportsManager.Model.LeagueSchedule instance);
    partial void InsertLeagueSeason(SportsManager.Model.LeagueSeason instance);
    partial void UpdateLeagueSeason(SportsManager.Model.LeagueSeason instance);
    partial void DeleteLeagueSeason(SportsManager.Model.LeagueSeason instance);
    partial void InsertLeagueUmpire(SportsManager.Model.LeagueUmpire instance);
    partial void UpdateLeagueUmpire(SportsManager.Model.LeagueUmpire instance);
    partial void DeleteLeagueUmpire(SportsManager.Model.LeagueUmpire instance);
    partial void InsertMemberBusiness(SportsManager.Model.MemberBusiness instance);
    partial void UpdateMemberBusiness(SportsManager.Model.MemberBusiness instance);
    partial void DeleteMemberBusiness(SportsManager.Model.MemberBusiness instance);
    partial void InsertMessageCategory(SportsManager.Model.MessageCategory instance);
    partial void UpdateMessageCategory(SportsManager.Model.MessageCategory instance);
    partial void DeleteMessageCategory(SportsManager.Model.MessageCategory instance);
    partial void InsertMessagePost(SportsManager.Model.MessagePost instance);
    partial void UpdateMessagePost(SportsManager.Model.MessagePost instance);
    partial void DeleteMessagePost(SportsManager.Model.MessagePost instance);
    partial void InsertMessageTopic(SportsManager.Model.MessageTopic instance);
    partial void UpdateMessageTopic(SportsManager.Model.MessageTopic instance);
    partial void DeleteMessageTopic(SportsManager.Model.MessageTopic instance);
    partial void InsertPhotoGallery(SportsManager.Model.PhotoGallery instance);
    partial void UpdatePhotoGallery(SportsManager.Model.PhotoGallery instance);
    partial void DeletePhotoGallery(SportsManager.Model.PhotoGallery instance);
    partial void InsertPhotoGalleryAlbum(SportsManager.Model.PhotoGalleryAlbum instance);
    partial void UpdatePhotoGalleryAlbum(SportsManager.Model.PhotoGalleryAlbum instance);
    partial void DeletePhotoGalleryAlbum(SportsManager.Model.PhotoGalleryAlbum instance);
    partial void Insertpitchstatsum(SportsManager.Model.pitchstatsum instance);
    partial void Updatepitchstatsum(SportsManager.Model.pitchstatsum instance);
    partial void Deletepitchstatsum(SportsManager.Model.pitchstatsum instance);
    partial void InsertPlayerProfile(SportsManager.Model.PlayerProfile instance);
    partial void UpdatePlayerProfile(SportsManager.Model.PlayerProfile instance);
    partial void DeletePlayerProfile(SportsManager.Model.PlayerProfile instance);
    partial void InsertPlayerRecap(SportsManager.Model.PlayerRecap instance);
    partial void UpdatePlayerRecap(SportsManager.Model.PlayerRecap instance);
    partial void DeletePlayerRecap(SportsManager.Model.PlayerRecap instance);
    partial void InsertPlayerSeasonAffiliationDue(SportsManager.Model.PlayerSeasonAffiliationDue instance);
    partial void UpdatePlayerSeasonAffiliationDue(SportsManager.Model.PlayerSeasonAffiliationDue instance);
    partial void DeletePlayerSeasonAffiliationDue(SportsManager.Model.PlayerSeasonAffiliationDue instance);
    partial void InsertPlayoffBracket(SportsManager.Model.PlayoffBracket instance);
    partial void UpdatePlayoffBracket(SportsManager.Model.PlayoffBracket instance);
    partial void DeletePlayoffBracket(SportsManager.Model.PlayoffBracket instance);
    partial void InsertPlayoffGame(SportsManager.Model.PlayoffGame instance);
    partial void UpdatePlayoffGame(SportsManager.Model.PlayoffGame instance);
    partial void DeletePlayoffGame(SportsManager.Model.PlayoffGame instance);
    partial void InsertPlayoffSeed(SportsManager.Model.PlayoffSeed instance);
    partial void UpdatePlayoffSeed(SportsManager.Model.PlayoffSeed instance);
    partial void DeletePlayoffSeed(SportsManager.Model.PlayoffSeed instance);
    partial void InsertPlayoffSetup(SportsManager.Model.PlayoffSetup instance);
    partial void UpdatePlayoffSetup(SportsManager.Model.PlayoffSetup instance);
    partial void DeletePlayoffSetup(SportsManager.Model.PlayoffSetup instance);
    partial void InsertProfileCategory(SportsManager.Model.ProfileCategory instance);
    partial void UpdateProfileCategory(SportsManager.Model.ProfileCategory instance);
    partial void DeleteProfileCategory(SportsManager.Model.ProfileCategory instance);
    partial void InsertProfileQuestion(SportsManager.Model.ProfileQuestion instance);
    partial void UpdateProfileQuestion(SportsManager.Model.ProfileQuestion instance);
    partial void DeleteProfileQuestion(SportsManager.Model.ProfileQuestion instance);
    partial void InsertRoster(SportsManager.Model.Roster instance);
    partial void UpdateRoster(SportsManager.Model.Roster instance);
    partial void DeleteRoster(SportsManager.Model.Roster instance);
    partial void InsertRosterSeason(SportsManager.Model.RosterSeason instance);
    partial void UpdateRosterSeason(SportsManager.Model.RosterSeason instance);
    partial void DeleteRosterSeason(SportsManager.Model.RosterSeason instance);
    partial void InsertSeason(SportsManager.Model.Season instance);
    partial void UpdateSeason(SportsManager.Model.Season instance);
    partial void DeleteSeason(SportsManager.Model.Season instance);
    partial void InsertSponsor(SportsManager.Model.Sponsor instance);
    partial void UpdateSponsor(SportsManager.Model.Sponsor instance);
    partial void DeleteSponsor(SportsManager.Model.Sponsor instance);
    partial void InsertTeamHandout(SportsManager.Model.TeamHandout instance);
    partial void UpdateTeamHandout(SportsManager.Model.TeamHandout instance);
    partial void DeleteTeamHandout(SportsManager.Model.TeamHandout instance);
    partial void InsertTeamNew(SportsManager.Model.TeamNew instance);
    partial void UpdateTeamNew(SportsManager.Model.TeamNew instance);
    partial void DeleteTeamNew(SportsManager.Model.TeamNew instance);
    partial void InsertTeam(SportsManager.Model.Team instance);
    partial void UpdateTeam(SportsManager.Model.Team instance);
    partial void DeleteTeam(SportsManager.Model.Team instance);
    partial void InsertTeamSeasonManager(SportsManager.Model.TeamSeasonManager instance);
    partial void UpdateTeamSeasonManager(SportsManager.Model.TeamSeasonManager instance);
    partial void DeleteTeamSeasonManager(SportsManager.Model.TeamSeasonManager instance);
    partial void InsertTeamsSeason(SportsManager.Model.TeamsSeason instance);
    partial void UpdateTeamsSeason(SportsManager.Model.TeamsSeason instance);
    partial void DeleteTeamsSeason(SportsManager.Model.TeamsSeason instance);
    partial void InsertVoteAnswer(SportsManager.Model.VoteAnswer instance);
    partial void UpdateVoteAnswer(SportsManager.Model.VoteAnswer instance);
    partial void DeleteVoteAnswer(SportsManager.Model.VoteAnswer instance);
    partial void InsertVoteOption(SportsManager.Model.VoteOption instance);
    partial void UpdateVoteOption(SportsManager.Model.VoteOption instance);
    partial void DeleteVoteOption(SportsManager.Model.VoteOption instance);
    partial void InsertVoteQuestion(SportsManager.Model.VoteQuestion instance);
    partial void UpdateVoteQuestion(SportsManager.Model.VoteQuestion instance);
    partial void DeleteVoteQuestion(SportsManager.Model.VoteQuestion instance);
    partial void InsertAspNetUser(SportsManager.Model.AspNetUser instance);
    partial void UpdateAspNetUser(SportsManager.Model.AspNetUser instance);
    partial void DeleteAspNetUser(SportsManager.Model.AspNetUser instance);
    partial void InsertWorkoutAnnouncement(SportsManager.Model.WorkoutAnnouncement instance);
    partial void UpdateWorkoutAnnouncement(SportsManager.Model.WorkoutAnnouncement instance);
    partial void DeleteWorkoutAnnouncement(SportsManager.Model.WorkoutAnnouncement instance);
    partial void InsertDisplayLeagueLeader(SportsManager.Model.DisplayLeagueLeader instance);
    partial void UpdateDisplayLeagueLeader(SportsManager.Model.DisplayLeagueLeader instance);
    partial void DeleteDisplayLeagueLeader(SportsManager.Model.DisplayLeagueLeader instance);
    #endregion
		
		public DB() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["webDBConnection"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DB(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SportsManager.Model.AccountHandout> AccountHandouts
		{
			get
			{
				return this.GetTable<SportsManager.Model.AccountHandout>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.Account> Accounts
		{
			get
			{
				return this.GetTable<SportsManager.Model.Account>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.AccountSetting> AccountSettings
		{
			get
			{
				return this.GetTable<SportsManager.Model.AccountSetting>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.AccountType> AccountTypes
		{
			get
			{
				return this.GetTable<SportsManager.Model.AccountType>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.AccountWelcome> AccountWelcomes
		{
			get
			{
				return this.GetTable<SportsManager.Model.AccountWelcome>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.GameRecap> GameRecaps
		{
			get
			{
				return this.GetTable<SportsManager.Model.GameRecap>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.Affiliation> Affiliations
		{
			get
			{
				return this.GetTable<SportsManager.Model.Affiliation>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.AspNetRole> AspNetRoles
		{
			get
			{
				return this.GetTable<SportsManager.Model.AspNetRole>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.AspNetUserClaim> AspNetUserClaims
		{
			get
			{
				return this.GetTable<SportsManager.Model.AspNetUserClaim>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.AspNetUserLogin> AspNetUserLogins
		{
			get
			{
				return this.GetTable<SportsManager.Model.AspNetUserLogin>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this.GetTable<SportsManager.Model.AspNetUserRole>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.AvailableField> AvailableFields
		{
			get
			{
				return this.GetTable<SportsManager.Model.AvailableField>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.batstatsum> batstatsums
		{
			get
			{
				return this.GetTable<SportsManager.Model.batstatsum>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.ContactRole> ContactRoles
		{
			get
			{
				return this.GetTable<SportsManager.Model.ContactRole>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.Contact> Contacts
		{
			get
			{
				return this.GetTable<SportsManager.Model.Contact>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.CurrentSeason> CurrentSeasons
		{
			get
			{
				return this.GetTable<SportsManager.Model.CurrentSeason>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.DivisionDef> DivisionDefs
		{
			get
			{
				return this.GetTable<SportsManager.Model.DivisionDef>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.DivisionSeason> DivisionSeasons
		{
			get
			{
				return this.GetTable<SportsManager.Model.DivisionSeason>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.FieldContact> FieldContacts
		{
			get
			{
				return this.GetTable<SportsManager.Model.FieldContact>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.fieldstatsum> fieldstatsums
		{
			get
			{
				return this.GetTable<SportsManager.Model.fieldstatsum>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.GameEjection> GameEjections
		{
			get
			{
				return this.GetTable<SportsManager.Model.GameEjection>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.GolfCourse> GolfCourses
		{
			get
			{
				return this.GetTable<SportsManager.Model.GolfCourse>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.WorkoutRegistration> WorkoutRegistrations
		{
			get
			{
				return this.GetTable<SportsManager.Model.WorkoutRegistration>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.GolfCourseForContact> GolfCourseForContacts
		{
			get
			{
				return this.GetTable<SportsManager.Model.GolfCourseForContact>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.GolferStatsConfiguration> GolferStatsConfigurations
		{
			get
			{
				return this.GetTable<SportsManager.Model.GolferStatsConfiguration>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.GolferStatsValue> GolferStatsValues
		{
			get
			{
				return this.GetTable<SportsManager.Model.GolferStatsValue>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.GolfLeagueCourse> GolfLeagueCourses
		{
			get
			{
				return this.GetTable<SportsManager.Model.GolfLeagueCourse>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.GolfLeagueSetup> GolfLeagueSetups
		{
			get
			{
				return this.GetTable<SportsManager.Model.GolfLeagueSetup>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.GolfMatch> GolfMatches
		{
			get
			{
				return this.GetTable<SportsManager.Model.GolfMatch>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.GolfMatchScore> GolfMatchScores
		{
			get
			{
				return this.GetTable<SportsManager.Model.GolfMatchScore>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.GolfRoster> GolfRosters
		{
			get
			{
				return this.GetTable<SportsManager.Model.GolfRoster>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.GolfScore> GolfScores
		{
			get
			{
				return this.GetTable<SportsManager.Model.GolfScore>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.GolfStatDef> GolfStatDefs
		{
			get
			{
				return this.GetTable<SportsManager.Model.GolfStatDef>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.GolfTeeInformation> GolfTeeInformations
		{
			get
			{
				return this.GetTable<SportsManager.Model.GolfTeeInformation>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.hof> hofs
		{
			get
			{
				return this.GetTable<SportsManager.Model.hof>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.HOFNomination> HOFNominations
		{
			get
			{
				return this.GetTable<SportsManager.Model.HOFNomination>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.HOFNominationSetup> HOFNominationSetups
		{
			get
			{
				return this.GetTable<SportsManager.Model.HOFNominationSetup>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.League> Leagues
		{
			get
			{
				return this.GetTable<SportsManager.Model.League>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.LeagueEvent> LeagueEvents
		{
			get
			{
				return this.GetTable<SportsManager.Model.LeagueEvent>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.LeagueFAQ> LeagueFAQs
		{
			get
			{
				return this.GetTable<SportsManager.Model.LeagueFAQ>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.LeagueNew> LeagueNews
		{
			get
			{
				return this.GetTable<SportsManager.Model.LeagueNew>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.LeagueSchedule> LeagueSchedules
		{
			get
			{
				return this.GetTable<SportsManager.Model.LeagueSchedule>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.LeagueSeason> LeagueSeasons
		{
			get
			{
				return this.GetTable<SportsManager.Model.LeagueSeason>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.LeagueUmpire> LeagueUmpires
		{
			get
			{
				return this.GetTable<SportsManager.Model.LeagueUmpire>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.MemberBusiness> MemberBusinesses
		{
			get
			{
				return this.GetTable<SportsManager.Model.MemberBusiness>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.MessageCategory> MessageCategories
		{
			get
			{
				return this.GetTable<SportsManager.Model.MessageCategory>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.MessagePost> MessagePosts
		{
			get
			{
				return this.GetTable<SportsManager.Model.MessagePost>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.MessageTopic> MessageTopics
		{
			get
			{
				return this.GetTable<SportsManager.Model.MessageTopic>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.PhotoGallery> PhotoGalleries
		{
			get
			{
				return this.GetTable<SportsManager.Model.PhotoGallery>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.PhotoGalleryAlbum> PhotoGalleryAlbums
		{
			get
			{
				return this.GetTable<SportsManager.Model.PhotoGalleryAlbum>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.pitchstatsum> pitchstatsums
		{
			get
			{
				return this.GetTable<SportsManager.Model.pitchstatsum>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.PlayerProfile> PlayerProfiles
		{
			get
			{
				return this.GetTable<SportsManager.Model.PlayerProfile>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.PlayerRecap> PlayerRecaps
		{
			get
			{
				return this.GetTable<SportsManager.Model.PlayerRecap>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.PlayerSeasonAffiliationDue> PlayerSeasonAffiliationDues
		{
			get
			{
				return this.GetTable<SportsManager.Model.PlayerSeasonAffiliationDue>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.PlayoffBracket> PlayoffBrackets
		{
			get
			{
				return this.GetTable<SportsManager.Model.PlayoffBracket>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.PlayoffGame> PlayoffGames
		{
			get
			{
				return this.GetTable<SportsManager.Model.PlayoffGame>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.PlayoffSeed> PlayoffSeeds
		{
			get
			{
				return this.GetTable<SportsManager.Model.PlayoffSeed>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.PlayoffSetup> PlayoffSetups
		{
			get
			{
				return this.GetTable<SportsManager.Model.PlayoffSetup>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.ProfileCategory> ProfileCategories
		{
			get
			{
				return this.GetTable<SportsManager.Model.ProfileCategory>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.ProfileQuestion> ProfileQuestions
		{
			get
			{
				return this.GetTable<SportsManager.Model.ProfileQuestion>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.Roster> Rosters
		{
			get
			{
				return this.GetTable<SportsManager.Model.Roster>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.RosterSeason> RosterSeasons
		{
			get
			{
				return this.GetTable<SportsManager.Model.RosterSeason>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.Season> Seasons
		{
			get
			{
				return this.GetTable<SportsManager.Model.Season>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.Sponsor> Sponsors
		{
			get
			{
				return this.GetTable<SportsManager.Model.Sponsor>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.TeamHandout> TeamHandouts
		{
			get
			{
				return this.GetTable<SportsManager.Model.TeamHandout>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.TeamNew> TeamNews
		{
			get
			{
				return this.GetTable<SportsManager.Model.TeamNew>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.Team> Teams
		{
			get
			{
				return this.GetTable<SportsManager.Model.Team>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.TeamSeasonManager> TeamSeasonManagers
		{
			get
			{
				return this.GetTable<SportsManager.Model.TeamSeasonManager>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.TeamsSeason> TeamsSeasons
		{
			get
			{
				return this.GetTable<SportsManager.Model.TeamsSeason>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.VoteAnswer> VoteAnswers
		{
			get
			{
				return this.GetTable<SportsManager.Model.VoteAnswer>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.VoteOption> VoteOptions
		{
			get
			{
				return this.GetTable<SportsManager.Model.VoteOption>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.VoteQuestion> VoteQuestions
		{
			get
			{
				return this.GetTable<SportsManager.Model.VoteQuestion>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.AspNetUser> AspNetUsers
		{
			get
			{
				return this.GetTable<SportsManager.Model.AspNetUser>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.WorkoutAnnouncement> WorkoutAnnouncements
		{
			get
			{
				return this.GetTable<SportsManager.Model.WorkoutAnnouncement>();
			}
		}
		
		public System.Data.Linq.Table<SportsManager.Model.DisplayLeagueLeader> DisplayLeagueLeaders
		{
			get
			{
				return this.GetTable<SportsManager.Model.DisplayLeagueLeader>();
			}
		}
	}
}
namespace SportsManager.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountHandouts")]
	public partial class AccountHandout : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Description;
		
		private long _AccountId;
		
		private string _FileName;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    #endregion
		
		public AccountHandout()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountHandout", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AccountHandouts.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AccountHandouts.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accounts")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _OwnerId;
		
		private string _Name;
		
		private string _URL;
		
		private int _FirstYear;
		
		private long _AccountTypeId;
		
		private long _AffiliationId;
		
		private string _TimeZoneId;
		
		private string _TwitterAccountName;
		
		private string _TwitterOauthToken;
		
		private string _TwitterOauthSecretKey;
		
		private string _YouTubeUserId;
		
		private string _FacebookFanPage;
		
		private string _TwitterWidgetScript;
		
		private EntitySet<AccountHandout> _AccountHandouts;
		
		private EntitySet<AccountSetting> _AccountSettings;
		
		private EntitySet<AccountWelcome> _AccountWelcomes;
		
		private EntitySet<AvailableField> _AvailableFields;
		
		private EntityRef<CurrentSeason> _CurrentSeason;
		
		private EntitySet<DivisionDef> _DivisionDefs;
		
		private EntitySet<GolfLeagueCourse> _GolfLeagueCourses;
		
		private EntitySet<GolfLeagueSetup> _GolfLeagueSetups;
		
		private EntitySet<hof> _hofs;
		
		private EntitySet<HOFNomination> _HOFNominations;
		
		private EntityRef<HOFNominationSetup> _HOFNominationSetup;
		
		private EntitySet<League> _Leagues;
		
		private EntitySet<LeagueFAQ> _LeagueFAQs;
		
		private EntitySet<LeagueNew> _LeagueNews;
		
		private EntitySet<LeagueUmpire> _LeagueUmpires;
		
		private EntitySet<PhotoGallery> _PhotoGalleries;
		
		private EntitySet<ProfileCategory> _ProfileCategories;
		
		private EntitySet<Roster> _Rosters;
		
		private EntitySet<Season> _Seasons;
		
		private EntitySet<Sponsor> _Sponsors;
		
		private EntitySet<Team> _Teams;
		
		private EntitySet<VoteQuestion> _VoteQuestions;
		
		private EntitySet<WorkoutAnnouncement> _WorkoutAnnouncements;
		
		private EntityRef<AccountType> _AccountType;
		
		private EntityRef<Affiliation> _Affiliation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnOwnerIdChanging(long value);
    partial void OnOwnerIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnFirstYearChanging(int value);
    partial void OnFirstYearChanged();
    partial void OnAccountTypeIdChanging(long value);
    partial void OnAccountTypeIdChanged();
    partial void OnAffiliationIdChanging(long value);
    partial void OnAffiliationIdChanged();
    partial void OnTimeZoneIdChanging(string value);
    partial void OnTimeZoneIdChanged();
    partial void OnTwitterAccountNameChanging(string value);
    partial void OnTwitterAccountNameChanged();
    partial void OnTwitterOauthTokenChanging(string value);
    partial void OnTwitterOauthTokenChanged();
    partial void OnTwitterOauthSecretKeyChanging(string value);
    partial void OnTwitterOauthSecretKeyChanged();
    partial void OnYouTubeUserIdChanging(string value);
    partial void OnYouTubeUserIdChanged();
    partial void OnFacebookFanPageChanging(string value);
    partial void OnFacebookFanPageChanged();
    partial void OnTwitterWidgetScriptChanging(string value);
    partial void OnTwitterWidgetScriptChanged();
    #endregion
		
		public Account()
		{
			this._AccountHandouts = new EntitySet<AccountHandout>(new Action<AccountHandout>(this.attach_AccountHandouts), new Action<AccountHandout>(this.detach_AccountHandouts));
			this._AccountSettings = new EntitySet<AccountSetting>(new Action<AccountSetting>(this.attach_AccountSettings), new Action<AccountSetting>(this.detach_AccountSettings));
			this._AccountWelcomes = new EntitySet<AccountWelcome>(new Action<AccountWelcome>(this.attach_AccountWelcomes), new Action<AccountWelcome>(this.detach_AccountWelcomes));
			this._AvailableFields = new EntitySet<AvailableField>(new Action<AvailableField>(this.attach_AvailableFields), new Action<AvailableField>(this.detach_AvailableFields));
			this._CurrentSeason = default(EntityRef<CurrentSeason>);
			this._DivisionDefs = new EntitySet<DivisionDef>(new Action<DivisionDef>(this.attach_DivisionDefs), new Action<DivisionDef>(this.detach_DivisionDefs));
			this._GolfLeagueCourses = new EntitySet<GolfLeagueCourse>(new Action<GolfLeagueCourse>(this.attach_GolfLeagueCourses), new Action<GolfLeagueCourse>(this.detach_GolfLeagueCourses));
			this._GolfLeagueSetups = new EntitySet<GolfLeagueSetup>(new Action<GolfLeagueSetup>(this.attach_GolfLeagueSetups), new Action<GolfLeagueSetup>(this.detach_GolfLeagueSetups));
			this._hofs = new EntitySet<hof>(new Action<hof>(this.attach_hofs), new Action<hof>(this.detach_hofs));
			this._HOFNominations = new EntitySet<HOFNomination>(new Action<HOFNomination>(this.attach_HOFNominations), new Action<HOFNomination>(this.detach_HOFNominations));
			this._HOFNominationSetup = default(EntityRef<HOFNominationSetup>);
			this._Leagues = new EntitySet<League>(new Action<League>(this.attach_Leagues), new Action<League>(this.detach_Leagues));
			this._LeagueFAQs = new EntitySet<LeagueFAQ>(new Action<LeagueFAQ>(this.attach_LeagueFAQs), new Action<LeagueFAQ>(this.detach_LeagueFAQs));
			this._LeagueNews = new EntitySet<LeagueNew>(new Action<LeagueNew>(this.attach_LeagueNews), new Action<LeagueNew>(this.detach_LeagueNews));
			this._LeagueUmpires = new EntitySet<LeagueUmpire>(new Action<LeagueUmpire>(this.attach_LeagueUmpires), new Action<LeagueUmpire>(this.detach_LeagueUmpires));
			this._PhotoGalleries = new EntitySet<PhotoGallery>(new Action<PhotoGallery>(this.attach_PhotoGalleries), new Action<PhotoGallery>(this.detach_PhotoGalleries));
			this._ProfileCategories = new EntitySet<ProfileCategory>(new Action<ProfileCategory>(this.attach_ProfileCategories), new Action<ProfileCategory>(this.detach_ProfileCategories));
			this._Rosters = new EntitySet<Roster>(new Action<Roster>(this.attach_Rosters), new Action<Roster>(this.detach_Rosters));
			this._Seasons = new EntitySet<Season>(new Action<Season>(this.attach_Seasons), new Action<Season>(this.detach_Seasons));
			this._Sponsors = new EntitySet<Sponsor>(new Action<Sponsor>(this.attach_Sponsors), new Action<Sponsor>(this.detach_Sponsors));
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			this._VoteQuestions = new EntitySet<VoteQuestion>(new Action<VoteQuestion>(this.attach_VoteQuestions), new Action<VoteQuestion>(this.detach_VoteQuestions));
			this._WorkoutAnnouncements = new EntitySet<WorkoutAnnouncement>(new Action<WorkoutAnnouncement>(this.attach_WorkoutAnnouncements), new Action<WorkoutAnnouncement>(this.detach_WorkoutAnnouncements));
			this._AccountType = default(EntityRef<AccountType>);
			this._Affiliation = default(EntityRef<Affiliation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerId", DbType="BigInt NOT NULL")]
		public long OwnerId
		{
			get
			{
				return this._OwnerId;
			}
			set
			{
				if ((this._OwnerId != value))
				{
					this.OnOwnerIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerId = value;
					this.SendPropertyChanged("OwnerId");
					this.OnOwnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(75) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstYear", DbType="Int NOT NULL")]
		public int FirstYear
		{
			get
			{
				return this._FirstYear;
			}
			set
			{
				if ((this._FirstYear != value))
				{
					this.OnFirstYearChanging(value);
					this.SendPropertyChanging();
					this._FirstYear = value;
					this.SendPropertyChanged("FirstYear");
					this.OnFirstYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountTypeId", DbType="BigInt NOT NULL")]
		public long AccountTypeId
		{
			get
			{
				return this._AccountTypeId;
			}
			set
			{
				if ((this._AccountTypeId != value))
				{
					if (this._AccountType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountTypeIdChanging(value);
					this.SendPropertyChanging();
					this._AccountTypeId = value;
					this.SendPropertyChanged("AccountTypeId");
					this.OnAccountTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AffiliationId", DbType="BigInt NOT NULL")]
		public long AffiliationId
		{
			get
			{
				return this._AffiliationId;
			}
			set
			{
				if ((this._AffiliationId != value))
				{
					if (this._Affiliation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAffiliationIdChanging(value);
					this.SendPropertyChanging();
					this._AffiliationId = value;
					this.SendPropertyChanged("AffiliationId");
					this.OnAffiliationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeZoneId", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TimeZoneId
		{
			get
			{
				return this._TimeZoneId;
			}
			set
			{
				if ((this._TimeZoneId != value))
				{
					this.OnTimeZoneIdChanging(value);
					this.SendPropertyChanging();
					this._TimeZoneId = value;
					this.SendPropertyChanged("TimeZoneId");
					this.OnTimeZoneIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwitterAccountName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TwitterAccountName
		{
			get
			{
				return this._TwitterAccountName;
			}
			set
			{
				if ((this._TwitterAccountName != value))
				{
					this.OnTwitterAccountNameChanging(value);
					this.SendPropertyChanging();
					this._TwitterAccountName = value;
					this.SendPropertyChanged("TwitterAccountName");
					this.OnTwitterAccountNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwitterOauthToken", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TwitterOauthToken
		{
			get
			{
				return this._TwitterOauthToken;
			}
			set
			{
				if ((this._TwitterOauthToken != value))
				{
					this.OnTwitterOauthTokenChanging(value);
					this.SendPropertyChanging();
					this._TwitterOauthToken = value;
					this.SendPropertyChanged("TwitterOauthToken");
					this.OnTwitterOauthTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwitterOauthSecretKey", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TwitterOauthSecretKey
		{
			get
			{
				return this._TwitterOauthSecretKey;
			}
			set
			{
				if ((this._TwitterOauthSecretKey != value))
				{
					this.OnTwitterOauthSecretKeyChanging(value);
					this.SendPropertyChanging();
					this._TwitterOauthSecretKey = value;
					this.SendPropertyChanged("TwitterOauthSecretKey");
					this.OnTwitterOauthSecretKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YouTubeUserId", DbType="VarChar(50)")]
		public string YouTubeUserId
		{
			get
			{
				return this._YouTubeUserId;
			}
			set
			{
				if ((this._YouTubeUserId != value))
				{
					this.OnYouTubeUserIdChanging(value);
					this.SendPropertyChanging();
					this._YouTubeUserId = value;
					this.SendPropertyChanged("YouTubeUserId");
					this.OnYouTubeUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacebookFanPage", DbType="VarChar(50)")]
		public string FacebookFanPage
		{
			get
			{
				return this._FacebookFanPage;
			}
			set
			{
				if ((this._FacebookFanPage != value))
				{
					this.OnFacebookFanPageChanging(value);
					this.SendPropertyChanging();
					this._FacebookFanPage = value;
					this.SendPropertyChanged("FacebookFanPage");
					this.OnFacebookFanPageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwitterWidgetScript", DbType="VarChar(512)")]
		public string TwitterWidgetScript
		{
			get
			{
				return this._TwitterWidgetScript;
			}
			set
			{
				if ((this._TwitterWidgetScript != value))
				{
					this.OnTwitterWidgetScriptChanging(value);
					this.SendPropertyChanging();
					this._TwitterWidgetScript = value;
					this.SendPropertyChanged("TwitterWidgetScript");
					this.OnTwitterWidgetScriptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountHandout", Storage="_AccountHandouts", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<AccountHandout> AccountHandouts
		{
			get
			{
				return this._AccountHandouts;
			}
			set
			{
				this._AccountHandouts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountSetting", Storage="_AccountSettings", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<AccountSetting> AccountSettings
		{
			get
			{
				return this._AccountSettings;
			}
			set
			{
				this._AccountSettings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountWelcome", Storage="_AccountWelcomes", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<AccountWelcome> AccountWelcomes
		{
			get
			{
				return this._AccountWelcomes;
			}
			set
			{
				this._AccountWelcomes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AvailableField", Storage="_AvailableFields", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<AvailableField> AvailableFields
		{
			get
			{
				return this._AvailableFields;
			}
			set
			{
				this._AvailableFields.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_CurrentSeason", Storage="_CurrentSeason", ThisKey="Id", OtherKey="AccountId", IsUnique=true, IsForeignKey=false)]
		public CurrentSeason CurrentSeason
		{
			get
			{
				return this._CurrentSeason.Entity;
			}
			set
			{
				CurrentSeason previousValue = this._CurrentSeason.Entity;
				if (((previousValue != value) 
							|| (this._CurrentSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CurrentSeason.Entity = null;
						previousValue.Account = null;
					}
					this._CurrentSeason.Entity = value;
					if ((value != null))
					{
						value.Account = this;
					}
					this.SendPropertyChanged("CurrentSeason");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_DivisionDef", Storage="_DivisionDefs", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<DivisionDef> DivisionDefs
		{
			get
			{
				return this._DivisionDefs;
			}
			set
			{
				this._DivisionDefs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_GolfLeagueCourse", Storage="_GolfLeagueCourses", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<GolfLeagueCourse> GolfLeagueCourses
		{
			get
			{
				return this._GolfLeagueCourses;
			}
			set
			{
				this._GolfLeagueCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_GolfLeagueSetup", Storage="_GolfLeagueSetups", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<GolfLeagueSetup> GolfLeagueSetups
		{
			get
			{
				return this._GolfLeagueSetups;
			}
			set
			{
				this._GolfLeagueSetups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_hof", Storage="_hofs", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<hof> hofs
		{
			get
			{
				return this._hofs;
			}
			set
			{
				this._hofs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_HOFNomination", Storage="_HOFNominations", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<HOFNomination> HOFNominations
		{
			get
			{
				return this._HOFNominations;
			}
			set
			{
				this._HOFNominations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_HOFNominationSetup", Storage="_HOFNominationSetup", ThisKey="Id", OtherKey="AccountId", IsUnique=true, IsForeignKey=false)]
		public HOFNominationSetup HOFNominationSetup
		{
			get
			{
				return this._HOFNominationSetup.Entity;
			}
			set
			{
				HOFNominationSetup previousValue = this._HOFNominationSetup.Entity;
				if (((previousValue != value) 
							|| (this._HOFNominationSetup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HOFNominationSetup.Entity = null;
						previousValue.Account = null;
					}
					this._HOFNominationSetup.Entity = value;
					if ((value != null))
					{
						value.Account = this;
					}
					this.SendPropertyChanged("HOFNominationSetup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_League", Storage="_Leagues", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<League> Leagues
		{
			get
			{
				return this._Leagues;
			}
			set
			{
				this._Leagues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_LeagueFAQ", Storage="_LeagueFAQs", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<LeagueFAQ> LeagueFAQs
		{
			get
			{
				return this._LeagueFAQs;
			}
			set
			{
				this._LeagueFAQs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_LeagueNew", Storage="_LeagueNews", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<LeagueNew> LeagueNews
		{
			get
			{
				return this._LeagueNews;
			}
			set
			{
				this._LeagueNews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_LeagueUmpire", Storage="_LeagueUmpires", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<LeagueUmpire> LeagueUmpires
		{
			get
			{
				return this._LeagueUmpires;
			}
			set
			{
				this._LeagueUmpires.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_PhotoGallery", Storage="_PhotoGalleries", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<PhotoGallery> PhotoGalleries
		{
			get
			{
				return this._PhotoGalleries;
			}
			set
			{
				this._PhotoGalleries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_ProfileCategory", Storage="_ProfileCategories", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<ProfileCategory> ProfileCategories
		{
			get
			{
				return this._ProfileCategories;
			}
			set
			{
				this._ProfileCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Roster", Storage="_Rosters", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<Roster> Rosters
		{
			get
			{
				return this._Rosters;
			}
			set
			{
				this._Rosters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Season", Storage="_Seasons", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<Season> Seasons
		{
			get
			{
				return this._Seasons;
			}
			set
			{
				this._Seasons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Sponsor", Storage="_Sponsors", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<Sponsor> Sponsors
		{
			get
			{
				return this._Sponsors;
			}
			set
			{
				this._Sponsors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Team", Storage="_Teams", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_VoteQuestion", Storage="_VoteQuestions", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<VoteQuestion> VoteQuestions
		{
			get
			{
				return this._VoteQuestions;
			}
			set
			{
				this._VoteQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_WorkoutAnnouncement", Storage="_WorkoutAnnouncements", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<WorkoutAnnouncement> WorkoutAnnouncements
		{
			get
			{
				return this._WorkoutAnnouncements;
			}
			set
			{
				this._WorkoutAnnouncements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountType_Account", Storage="_AccountType", ThisKey="AccountTypeId", OtherKey="Id", IsForeignKey=true)]
		public AccountType AccountType
		{
			get
			{
				return this._AccountType.Entity;
			}
			set
			{
				AccountType previousValue = this._AccountType.Entity;
				if (((previousValue != value) 
							|| (this._AccountType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountType.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._AccountType.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._AccountTypeId = value.Id;
					}
					else
					{
						this._AccountTypeId = default(long);
					}
					this.SendPropertyChanged("AccountType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Affiliation_Account", Storage="_Affiliation", ThisKey="AffiliationId", OtherKey="Id", IsForeignKey=true)]
		public Affiliation Affiliation
		{
			get
			{
				return this._Affiliation.Entity;
			}
			set
			{
				Affiliation previousValue = this._Affiliation.Entity;
				if (((previousValue != value) 
							|| (this._Affiliation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Affiliation.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Affiliation.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._AffiliationId = value.Id;
					}
					else
					{
						this._AffiliationId = default(long);
					}
					this.SendPropertyChanged("Affiliation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountHandouts(AccountHandout entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_AccountHandouts(AccountHandout entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_AccountSettings(AccountSetting entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_AccountSettings(AccountSetting entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_AccountWelcomes(AccountWelcome entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_AccountWelcomes(AccountWelcome entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_AvailableFields(AvailableField entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_AvailableFields(AvailableField entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_DivisionDefs(DivisionDef entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_DivisionDefs(DivisionDef entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_GolfLeagueCourses(GolfLeagueCourse entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_GolfLeagueCourses(GolfLeagueCourse entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_GolfLeagueSetups(GolfLeagueSetup entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_GolfLeagueSetups(GolfLeagueSetup entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_hofs(hof entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_hofs(hof entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_HOFNominations(HOFNomination entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_HOFNominations(HOFNomination entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Leagues(League entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Leagues(League entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_LeagueFAQs(LeagueFAQ entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_LeagueFAQs(LeagueFAQ entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_LeagueNews(LeagueNew entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_LeagueNews(LeagueNew entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_LeagueUmpires(LeagueUmpire entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_LeagueUmpires(LeagueUmpire entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_PhotoGalleries(PhotoGallery entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_PhotoGalleries(PhotoGallery entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_ProfileCategories(ProfileCategory entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_ProfileCategories(ProfileCategory entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Rosters(Roster entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Rosters(Roster entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Seasons(Season entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Seasons(Season entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Sponsors(Sponsor entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Sponsors(Sponsor entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_VoteQuestions(VoteQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_VoteQuestions(VoteQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_WorkoutAnnouncements(WorkoutAnnouncement entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_WorkoutAnnouncements(WorkoutAnnouncement entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountSettings")]
	public partial class AccountSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AccountId;
		
		private string _SettingKey;
		
		private string _SettingValue;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnSettingKeyChanging(string value);
    partial void OnSettingKeyChanged();
    partial void OnSettingValueChanging(string value);
    partial void OnSettingValueChanged();
    #endregion
		
		public AccountSetting()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingKey", DbType="VarChar(25) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SettingKey
		{
			get
			{
				return this._SettingKey;
			}
			set
			{
				if ((this._SettingKey != value))
				{
					this.OnSettingKeyChanging(value);
					this.SendPropertyChanging();
					this._SettingKey = value;
					this.SendPropertyChanged("SettingKey");
					this.OnSettingKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingValue", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string SettingValue
		{
			get
			{
				return this._SettingValue;
			}
			set
			{
				if ((this._SettingValue != value))
				{
					this.OnSettingValueChanging(value);
					this.SendPropertyChanging();
					this._SettingValue = value;
					this.SendPropertyChanged("SettingValue");
					this.OnSettingValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountSetting", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AccountSettings.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AccountSettings.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountTypes")]
	public partial class AccountType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private string _FilePath;
		
		private string _FacebookAppId;
		
		private string _FacebookSecretKey;
		
		private string _TwitterAppId;
		
		private string _TwitterSecret;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnFacebookAppIdChanging(string value);
    partial void OnFacebookAppIdChanged();
    partial void OnFacebookSecretKeyChanging(string value);
    partial void OnFacebookSecretKeyChanged();
    partial void OnTwitterAppIdChanging(string value);
    partial void OnTwitterAppIdChanged();
    partial void OnTwitterSecretChanging(string value);
    partial void OnTwitterSecretChanged();
    #endregion
		
		public AccountType()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(75) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePath", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacebookAppId", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FacebookAppId
		{
			get
			{
				return this._FacebookAppId;
			}
			set
			{
				if ((this._FacebookAppId != value))
				{
					this.OnFacebookAppIdChanging(value);
					this.SendPropertyChanging();
					this._FacebookAppId = value;
					this.SendPropertyChanged("FacebookAppId");
					this.OnFacebookAppIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacebookSecretKey", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FacebookSecretKey
		{
			get
			{
				return this._FacebookSecretKey;
			}
			set
			{
				if ((this._FacebookSecretKey != value))
				{
					this.OnFacebookSecretKeyChanging(value);
					this.SendPropertyChanging();
					this._FacebookSecretKey = value;
					this.SendPropertyChanged("FacebookSecretKey");
					this.OnFacebookSecretKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwitterAppId", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TwitterAppId
		{
			get
			{
				return this._TwitterAppId;
			}
			set
			{
				if ((this._TwitterAppId != value))
				{
					this.OnTwitterAppIdChanging(value);
					this.SendPropertyChanging();
					this._TwitterAppId = value;
					this.SendPropertyChanged("TwitterAppId");
					this.OnTwitterAppIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwitterSecret", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TwitterSecret
		{
			get
			{
				return this._TwitterSecret;
			}
			set
			{
				if ((this._TwitterSecret != value))
				{
					this.OnTwitterSecretChanging(value);
					this.SendPropertyChanging();
					this._TwitterSecret = value;
					this.SendPropertyChanged("TwitterSecret");
					this.OnTwitterSecretChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountType_Account", Storage="_Accounts", ThisKey="Id", OtherKey="AccountTypeId")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.AccountType = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.AccountType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountWelcome")]
	public partial class AccountWelcome : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private short _OrderNo;
		
		private string _CaptionMenu;
		
		private string _WelcomeText;
		
		private System.Nullable<long> _TeamId;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnOrderNoChanging(short value);
    partial void OnOrderNoChanged();
    partial void OnCaptionMenuChanging(string value);
    partial void OnCaptionMenuChanged();
    partial void OnWelcomeTextChanging(string value);
    partial void OnWelcomeTextChanged();
    partial void OnTeamIdChanging(System.Nullable<long> value);
    partial void OnTeamIdChanged();
    #endregion
		
		public AccountWelcome()
		{
			this._Account = default(EntityRef<Account>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNo", DbType="SmallInt NOT NULL")]
		public short OrderNo
		{
			get
			{
				return this._OrderNo;
			}
			set
			{
				if ((this._OrderNo != value))
				{
					this.OnOrderNoChanging(value);
					this.SendPropertyChanging();
					this._OrderNo = value;
					this.SendPropertyChanged("OrderNo");
					this.OnOrderNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaptionMenu", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CaptionMenu
		{
			get
			{
				return this._CaptionMenu;
			}
			set
			{
				if ((this._CaptionMenu != value))
				{
					this.OnCaptionMenuChanging(value);
					this.SendPropertyChanging();
					this._CaptionMenu = value;
					this.SendPropertyChanged("CaptionMenu");
					this.OnCaptionMenuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WelcomeText", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string WelcomeText
		{
			get
			{
				return this._WelcomeText;
			}
			set
			{
				if ((this._WelcomeText != value))
				{
					this.OnWelcomeTextChanging(value);
					this.SendPropertyChanging();
					this._WelcomeText = value;
					this.SendPropertyChanged("WelcomeText");
					this.OnWelcomeTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="BigInt")]
		public System.Nullable<long> TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountWelcome", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AccountWelcomes.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AccountWelcomes.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_AccountWelcome", Storage="_Team", ThisKey="TeamId", OtherKey="Id", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.AccountWelcomes.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.AccountWelcomes.Add(this);
						this._TeamId = value.Id;
					}
					else
					{
						this._TeamId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GameRecap")]
	public partial class GameRecap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _GameId;
		
		private long _TeamId;
		
		private string _Recap;
		
		private EntityRef<LeagueSchedule> _LeagueSchedule;
		
		private EntityRef<TeamsSeason> _TeamsSeason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIdChanging(long value);
    partial void OnGameIdChanged();
    partial void OnTeamIdChanging(long value);
    partial void OnTeamIdChanged();
    partial void OnRecapChanging(string value);
    partial void OnRecapChanged();
    #endregion
		
		public GameRecap()
		{
			this._LeagueSchedule = default(EntityRef<LeagueSchedule>);
			this._TeamsSeason = default(EntityRef<TeamsSeason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._LeagueSchedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._TeamsSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recap", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Recap
		{
			get
			{
				return this._Recap;
			}
			set
			{
				if ((this._Recap != value))
				{
					this.OnRecapChanging(value);
					this.SendPropertyChanging();
					this._Recap = value;
					this.SendPropertyChanged("Recap");
					this.OnRecapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSchedule_GameRecap", Storage="_LeagueSchedule", ThisKey="GameId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LeagueSchedule LeagueSchedule
		{
			get
			{
				return this._LeagueSchedule.Entity;
			}
			set
			{
				LeagueSchedule previousValue = this._LeagueSchedule.Entity;
				if (((previousValue != value) 
							|| (this._LeagueSchedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueSchedule.Entity = null;
						previousValue.GameRecaps.Remove(this);
					}
					this._LeagueSchedule.Entity = value;
					if ((value != null))
					{
						value.GameRecaps.Add(this);
						this._GameId = value.Id;
					}
					else
					{
						this._GameId = default(long);
					}
					this.SendPropertyChanged("LeagueSchedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsSeason_GameRecap", Storage="_TeamsSeason", ThisKey="TeamId", OtherKey="Id", IsForeignKey=true)]
		public TeamsSeason TeamsSeason
		{
			get
			{
				return this._TeamsSeason.Entity;
			}
			set
			{
				TeamsSeason previousValue = this._TeamsSeason.Entity;
				if (((previousValue != value) 
							|| (this._TeamsSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamsSeason.Entity = null;
						previousValue.GameRecaps.Remove(this);
					}
					this._TeamsSeason.Entity = value;
					if ((value != null))
					{
						value.GameRecaps.Add(this);
						this._TeamId = value.Id;
					}
					else
					{
						this._TeamId = default(long);
					}
					this.SendPropertyChanged("TeamsSeason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Affiliations")]
	public partial class Affiliation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Affiliation()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(75) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Affiliation_Account", Storage="_Accounts", ThisKey="Id", OtherKey="AffiliationId")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Affiliation = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Affiliation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetRoles")]
	public partial class AspNetRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Name;
		
		private EntitySet<AspNetUserRole> _AspNetUserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AspNetRole()
		{
			this._AspNetUserRoles = new EntitySet<AspNetUserRole>(new Action<AspNetUserRole>(this.attach_AspNetUserRoles), new Action<AspNetUserRole>(this.detach_AspNetUserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_AspNetUserRole", Storage="_AspNetUserRoles", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this._AspNetUserRoles;
			}
			set
			{
				this._AspNetUserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = this;
		}
		
		private void detach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserClaims")]
	public partial class AspNetUserClaim : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ClaimType;
		
		private string _ClaimValue;
		
		private string _UserId;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClaimTypeChanging(string value);
    partial void OnClaimTypeChanged();
    partial void OnClaimValueChanging(string value);
    partial void OnClaimValueChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    #endregion
		
		public AspNetUserClaim()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimType", DbType="NVarChar(MAX)")]
		public string ClaimType
		{
			get
			{
				return this._ClaimType;
			}
			set
			{
				if ((this._ClaimType != value))
				{
					this.OnClaimTypeChanging(value);
					this.SendPropertyChanging();
					this._ClaimType = value;
					this.SendPropertyChanged("ClaimType");
					this.OnClaimTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimValue", DbType="NVarChar(MAX)")]
		public string ClaimValue
		{
			get
			{
				return this._ClaimValue;
			}
			set
			{
				if ((this._ClaimValue != value))
				{
					this.OnClaimValueChanging(value);
					this.SendPropertyChanging();
					this._ClaimValue = value;
					this.SendPropertyChanged("ClaimValue");
					this.OnClaimValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserClaim", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserClaims.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserClaims.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserLogins")]
	public partial class AspNetUserLogin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserId;
		
		private string _LoginProvider;
		
		private string _ProviderKey;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnLoginProviderChanging(string value);
    partial void OnLoginProviderChanged();
    partial void OnProviderKeyChanging(string value);
    partial void OnProviderKeyChanged();
    #endregion
		
		public AspNetUserLogin()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginProvider", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoginProvider
		{
			get
			{
				return this._LoginProvider;
			}
			set
			{
				if ((this._LoginProvider != value))
				{
					this.OnLoginProviderChanging(value);
					this.SendPropertyChanging();
					this._LoginProvider = value;
					this.SendPropertyChanged("LoginProvider");
					this.OnLoginProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderKey", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProviderKey
		{
			get
			{
				return this._ProviderKey;
			}
			set
			{
				if ((this._ProviderKey != value))
				{
					this.OnProviderKeyChanging(value);
					this.SendPropertyChanging();
					this._ProviderKey = value;
					this.SendPropertyChanged("ProviderKey");
					this.OnProviderKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserLogin", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserLogins.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserLogins.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserRoles")]
	public partial class AspNetUserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserId;
		
		private string _RoleId;
		
		private EntityRef<AspNetRole> _AspNetRole;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(string value);
    partial void OnRoleIdChanged();
    #endregion
		
		public AspNetUserRole()
		{
			this._AspNetRole = default(EntityRef<AspNetRole>);
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._AspNetRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_AspNetUserRole", Storage="_AspNetRole", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetRole AspNetRole
		{
			get
			{
				return this._AspNetRole.Entity;
			}
			set
			{
				AspNetRole previousValue = this._AspNetRole.Entity;
				if (((previousValue != value) 
							|| (this._AspNetRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetRole.Entity = null;
						previousValue.AspNetUserRoles.Remove(this);
					}
					this._AspNetRole.Entity = value;
					if ((value != null))
					{
						value.AspNetUserRoles.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(string);
					}
					this.SendPropertyChanged("AspNetRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserRole", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserRoles.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserRoles.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AvailableFields")]
	public partial class AvailableField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private string _Name;
		
		private string _ShortName;
		
		private string _Comment;
		
		private string _Address;
		
		private string _City;
		
		private string _State;
		
		private string _ZipCode;
		
		private string _Directions;
		
		private string _RainoutNumber;
		
		private string _Latitude;
		
		private string _Longitude;
		
		private EntitySet<FieldContact> _FieldContacts;
		
		private EntitySet<WorkoutAnnouncement> _WorkoutAnnouncements;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnDirectionsChanging(string value);
    partial void OnDirectionsChanged();
    partial void OnRainoutNumberChanging(string value);
    partial void OnRainoutNumberChanged();
    partial void OnLatitudeChanging(string value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(string value);
    partial void OnLongitudeChanged();
    #endregion
		
		public AvailableField()
		{
			this._FieldContacts = new EntitySet<FieldContact>(new Action<FieldContact>(this.attach_FieldContacts), new Action<FieldContact>(this.detach_FieldContacts));
			this._WorkoutAnnouncements = new EntitySet<WorkoutAnnouncement>(new Action<WorkoutAnnouncement>(this.attach_WorkoutAnnouncements), new Action<WorkoutAnnouncement>(this.detach_WorkoutAnnouncements));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Directions", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Directions
		{
			get
			{
				return this._Directions;
			}
			set
			{
				if ((this._Directions != value))
				{
					this.OnDirectionsChanging(value);
					this.SendPropertyChanging();
					this._Directions = value;
					this.SendPropertyChanged("Directions");
					this.OnDirectionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RainoutNumber", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string RainoutNumber
		{
			get
			{
				return this._RainoutNumber;
			}
			set
			{
				if ((this._RainoutNumber != value))
				{
					this.OnRainoutNumberChanging(value);
					this.SendPropertyChanging();
					this._RainoutNumber = value;
					this.SendPropertyChanged("RainoutNumber");
					this.OnRainoutNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AvailableField_FieldContact", Storage="_FieldContacts", ThisKey="Id", OtherKey="FieldId")]
		public EntitySet<FieldContact> FieldContacts
		{
			get
			{
				return this._FieldContacts;
			}
			set
			{
				this._FieldContacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AvailableField_WorkoutAnnouncement", Storage="_WorkoutAnnouncements", ThisKey="Id", OtherKey="FieldId")]
		public EntitySet<WorkoutAnnouncement> WorkoutAnnouncements
		{
			get
			{
				return this._WorkoutAnnouncements;
			}
			set
			{
				this._WorkoutAnnouncements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AvailableField", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AvailableFields.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AvailableFields.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FieldContacts(FieldContact entity)
		{
			this.SendPropertyChanging();
			entity.AvailableField = this;
		}
		
		private void detach_FieldContacts(FieldContact entity)
		{
			this.SendPropertyChanging();
			entity.AvailableField = null;
		}
		
		private void attach_WorkoutAnnouncements(WorkoutAnnouncement entity)
		{
			this.SendPropertyChanging();
			entity.AvailableField = this;
		}
		
		private void detach_WorkoutAnnouncements(WorkoutAnnouncement entity)
		{
			this.SendPropertyChanging();
			entity.AvailableField = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.batstatsum")]
	public partial class batstatsum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _PlayerId;
		
		private long _GameId;
		
		private long _TeamId;
		
		private int _AB;
		
		private int _H;
		
		private int _R;
		
		private int @__2B;
		
		private int @__3B;
		
		private int _HR;
		
		private int _RBI;
		
		private int _SO;
		
		private int _BB;
		
		private int _RE;
		
		private int _HBP;
		
		private int _INTR;
		
		private int _SF;
		
		private int _SH;
		
		private int _SB;
		
		private int _CS;
		
		private int _LOB;
		
		private System.Nullable<int> _TB;
		
		private System.Nullable<int> _PA;
		
		private System.Nullable<int> _OBADenominator;
		
		private System.Nullable<int> _OBANumerator;
		
		private EntityRef<LeagueSchedule> _LeagueSchedule;
		
		private EntityRef<RosterSeason> _RosterSeason;
		
		private EntityRef<TeamsSeason> _TeamsSeason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnGameIdChanging(long value);
    partial void OnGameIdChanged();
    partial void OnTeamIdChanging(long value);
    partial void OnTeamIdChanged();
    partial void OnABChanging(int value);
    partial void OnABChanged();
    partial void OnHChanging(int value);
    partial void OnHChanged();
    partial void OnRChanging(int value);
    partial void OnRChanged();
    partial void On_2BChanging(int value);
    partial void On_2BChanged();
    partial void On_3BChanging(int value);
    partial void On_3BChanged();
    partial void OnHRChanging(int value);
    partial void OnHRChanged();
    partial void OnRBIChanging(int value);
    partial void OnRBIChanged();
    partial void OnSOChanging(int value);
    partial void OnSOChanged();
    partial void OnBBChanging(int value);
    partial void OnBBChanged();
    partial void OnREChanging(int value);
    partial void OnREChanged();
    partial void OnHBPChanging(int value);
    partial void OnHBPChanged();
    partial void OnINTRChanging(int value);
    partial void OnINTRChanged();
    partial void OnSFChanging(int value);
    partial void OnSFChanged();
    partial void OnSHChanging(int value);
    partial void OnSHChanged();
    partial void OnSBChanging(int value);
    partial void OnSBChanged();
    partial void OnCSChanging(int value);
    partial void OnCSChanged();
    partial void OnLOBChanging(int value);
    partial void OnLOBChanged();
    partial void OnTBChanging(System.Nullable<int> value);
    partial void OnTBChanged();
    partial void OnPAChanging(System.Nullable<int> value);
    partial void OnPAChanged();
    partial void OnOBADenominatorChanging(System.Nullable<int> value);
    partial void OnOBADenominatorChanged();
    partial void OnOBANumeratorChanging(System.Nullable<int> value);
    partial void OnOBANumeratorChanged();
    #endregion
		
		public batstatsum()
		{
			this._LeagueSchedule = default(EntityRef<LeagueSchedule>);
			this._RosterSeason = default(EntityRef<RosterSeason>);
			this._TeamsSeason = default(EntityRef<TeamsSeason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._RosterSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="BigInt NOT NULL")]
		public long GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._LeagueSchedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="BigInt NOT NULL")]
		public long TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._TeamsSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AB", DbType="Int NOT NULL")]
		public int AB
		{
			get
			{
				return this._AB;
			}
			set
			{
				if ((this._AB != value))
				{
					this.OnABChanging(value);
					this.SendPropertyChanging();
					this._AB = value;
					this.SendPropertyChanged("AB");
					this.OnABChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H", DbType="Int NOT NULL")]
		public int H
		{
			get
			{
				return this._H;
			}
			set
			{
				if ((this._H != value))
				{
					this.OnHChanging(value);
					this.SendPropertyChanging();
					this._H = value;
					this.SendPropertyChanged("H");
					this.OnHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_R", DbType="Int NOT NULL")]
		public int R
		{
			get
			{
				return this._R;
			}
			set
			{
				if ((this._R != value))
				{
					this.OnRChanging(value);
					this.SendPropertyChanging();
					this._R = value;
					this.SendPropertyChanged("R");
					this.OnRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[2B]", Storage="__2B", DbType="Int NOT NULL")]
		public int _2B
		{
			get
			{
				return this.@__2B;
			}
			set
			{
				if ((this.@__2B != value))
				{
					this.On_2BChanging(value);
					this.SendPropertyChanging();
					this.@__2B = value;
					this.SendPropertyChanged("_2B");
					this.On_2BChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[3B]", Storage="__3B", DbType="Int NOT NULL")]
		public int _3B
		{
			get
			{
				return this.@__3B;
			}
			set
			{
				if ((this.@__3B != value))
				{
					this.On_3BChanging(value);
					this.SendPropertyChanging();
					this.@__3B = value;
					this.SendPropertyChanged("_3B");
					this.On_3BChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HR", DbType="Int NOT NULL")]
		public int HR
		{
			get
			{
				return this._HR;
			}
			set
			{
				if ((this._HR != value))
				{
					this.OnHRChanging(value);
					this.SendPropertyChanging();
					this._HR = value;
					this.SendPropertyChanged("HR");
					this.OnHRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RBI", DbType="Int NOT NULL")]
		public int RBI
		{
			get
			{
				return this._RBI;
			}
			set
			{
				if ((this._RBI != value))
				{
					this.OnRBIChanging(value);
					this.SendPropertyChanging();
					this._RBI = value;
					this.SendPropertyChanged("RBI");
					this.OnRBIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SO", DbType="Int NOT NULL")]
		public int SO
		{
			get
			{
				return this._SO;
			}
			set
			{
				if ((this._SO != value))
				{
					this.OnSOChanging(value);
					this.SendPropertyChanging();
					this._SO = value;
					this.SendPropertyChanged("SO");
					this.OnSOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BB", DbType="Int NOT NULL")]
		public int BB
		{
			get
			{
				return this._BB;
			}
			set
			{
				if ((this._BB != value))
				{
					this.OnBBChanging(value);
					this.SendPropertyChanging();
					this._BB = value;
					this.SendPropertyChanged("BB");
					this.OnBBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RE", DbType="Int NOT NULL")]
		public int RE
		{
			get
			{
				return this._RE;
			}
			set
			{
				if ((this._RE != value))
				{
					this.OnREChanging(value);
					this.SendPropertyChanging();
					this._RE = value;
					this.SendPropertyChanged("RE");
					this.OnREChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HBP", DbType="Int NOT NULL")]
		public int HBP
		{
			get
			{
				return this._HBP;
			}
			set
			{
				if ((this._HBP != value))
				{
					this.OnHBPChanging(value);
					this.SendPropertyChanging();
					this._HBP = value;
					this.SendPropertyChanged("HBP");
					this.OnHBPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_INTR", DbType="Int NOT NULL")]
		public int INTR
		{
			get
			{
				return this._INTR;
			}
			set
			{
				if ((this._INTR != value))
				{
					this.OnINTRChanging(value);
					this.SendPropertyChanging();
					this._INTR = value;
					this.SendPropertyChanged("INTR");
					this.OnINTRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SF", DbType="Int NOT NULL")]
		public int SF
		{
			get
			{
				return this._SF;
			}
			set
			{
				if ((this._SF != value))
				{
					this.OnSFChanging(value);
					this.SendPropertyChanging();
					this._SF = value;
					this.SendPropertyChanged("SF");
					this.OnSFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SH", DbType="Int NOT NULL")]
		public int SH
		{
			get
			{
				return this._SH;
			}
			set
			{
				if ((this._SH != value))
				{
					this.OnSHChanging(value);
					this.SendPropertyChanging();
					this._SH = value;
					this.SendPropertyChanged("SH");
					this.OnSHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SB", DbType="Int NOT NULL")]
		public int SB
		{
			get
			{
				return this._SB;
			}
			set
			{
				if ((this._SB != value))
				{
					this.OnSBChanging(value);
					this.SendPropertyChanging();
					this._SB = value;
					this.SendPropertyChanged("SB");
					this.OnSBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CS", DbType="Int NOT NULL")]
		public int CS
		{
			get
			{
				return this._CS;
			}
			set
			{
				if ((this._CS != value))
				{
					this.OnCSChanging(value);
					this.SendPropertyChanging();
					this._CS = value;
					this.SendPropertyChanged("CS");
					this.OnCSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LOB", DbType="Int NOT NULL")]
		public int LOB
		{
			get
			{
				return this._LOB;
			}
			set
			{
				if ((this._LOB != value))
				{
					this.OnLOBChanging(value);
					this.SendPropertyChanging();
					this._LOB = value;
					this.SendPropertyChanged("LOB");
					this.OnLOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TB", AutoSync=AutoSync.Always, DbType="Int", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> TB
		{
			get
			{
				return this._TB;
			}
			set
			{
				if ((this._TB != value))
				{
					this.OnTBChanging(value);
					this.SendPropertyChanging();
					this._TB = value;
					this.SendPropertyChanged("TB");
					this.OnTBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PA", AutoSync=AutoSync.Always, DbType="Int", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> PA
		{
			get
			{
				return this._PA;
			}
			set
			{
				if ((this._PA != value))
				{
					this.OnPAChanging(value);
					this.SendPropertyChanging();
					this._PA = value;
					this.SendPropertyChanged("PA");
					this.OnPAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OBADenominator", AutoSync=AutoSync.Always, DbType="Int", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> OBADenominator
		{
			get
			{
				return this._OBADenominator;
			}
			set
			{
				if ((this._OBADenominator != value))
				{
					this.OnOBADenominatorChanging(value);
					this.SendPropertyChanging();
					this._OBADenominator = value;
					this.SendPropertyChanged("OBADenominator");
					this.OnOBADenominatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OBANumerator", AutoSync=AutoSync.Always, DbType="Int", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> OBANumerator
		{
			get
			{
				return this._OBANumerator;
			}
			set
			{
				if ((this._OBANumerator != value))
				{
					this.OnOBANumeratorChanging(value);
					this.SendPropertyChanging();
					this._OBANumerator = value;
					this.SendPropertyChanged("OBANumerator");
					this.OnOBANumeratorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSchedule_batstatsum", Storage="_LeagueSchedule", ThisKey="GameId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LeagueSchedule LeagueSchedule
		{
			get
			{
				return this._LeagueSchedule.Entity;
			}
			set
			{
				LeagueSchedule previousValue = this._LeagueSchedule.Entity;
				if (((previousValue != value) 
							|| (this._LeagueSchedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueSchedule.Entity = null;
						previousValue.batstatsums.Remove(this);
					}
					this._LeagueSchedule.Entity = value;
					if ((value != null))
					{
						value.batstatsums.Add(this);
						this._GameId = value.Id;
					}
					else
					{
						this._GameId = default(long);
					}
					this.SendPropertyChanged("LeagueSchedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RosterSeason_batstatsum", Storage="_RosterSeason", ThisKey="PlayerId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RosterSeason RosterSeason
		{
			get
			{
				return this._RosterSeason.Entity;
			}
			set
			{
				RosterSeason previousValue = this._RosterSeason.Entity;
				if (((previousValue != value) 
							|| (this._RosterSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RosterSeason.Entity = null;
						previousValue.batstatsums.Remove(this);
					}
					this._RosterSeason.Entity = value;
					if ((value != null))
					{
						value.batstatsums.Add(this);
						this._PlayerId = value.Id;
					}
					else
					{
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("RosterSeason");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsSeason_batstatsum", Storage="_TeamsSeason", ThisKey="TeamId", OtherKey="Id", IsForeignKey=true)]
		public TeamsSeason TeamsSeason
		{
			get
			{
				return this._TeamsSeason.Entity;
			}
			set
			{
				TeamsSeason previousValue = this._TeamsSeason.Entity;
				if (((previousValue != value) 
							|| (this._TeamsSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamsSeason.Entity = null;
						previousValue.batstatsums.Remove(this);
					}
					this._TeamsSeason.Entity = value;
					if ((value != null))
					{
						value.batstatsums.Add(this);
						this._TeamId = value.Id;
					}
					else
					{
						this._TeamId = default(long);
					}
					this.SendPropertyChanged("TeamsSeason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContactRoles")]
	public partial class ContactRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ContactId;
		
		private string _RoleId;
		
		private long _RoleData;
		
		private long _AccountId;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnContactIdChanging(long value);
    partial void OnContactIdChanged();
    partial void OnRoleIdChanging(string value);
    partial void OnRoleIdChanged();
    partial void OnRoleDataChanging(long value);
    partial void OnRoleDataChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    #endregion
		
		public ContactRole()
		{
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="BigInt NOT NULL")]
		public long ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleData", DbType="BigInt NOT NULL")]
		public long RoleData
		{
			get
			{
				return this._RoleData;
			}
			set
			{
				if ((this._RoleData != value))
				{
					this.OnRoleDataChanging(value);
					this.SendPropertyChanging();
					this._RoleData = value;
					this.SendPropertyChanged("RoleData");
					this.OnRoleDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_ContactRole", Storage="_Contact", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.ContactRoles.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.ContactRoles.Add(this);
						this._ContactId = value.Id;
					}
					else
					{
						this._ContactId = default(long);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contacts")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Email;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _Phone1;
		
		private string _Phone2;
		
		private string _Phone3;
		
		private long _CreatorAccountId;
		
		private string _StreetAddress;
		
		private string _City;
		
		private string _State;
		
		private string _Zip;
		
		private System.Nullable<int> _FirstYear;
		
		private System.DateTime _DateOfBirth;
		
		private System.Nullable<bool> _IsFemale;
		
		private string _UserId;
		
		private EntitySet<ContactRole> _ContactRoles;
		
		private EntitySet<FieldContact> _FieldContacts;
		
		private EntitySet<GolfCourseForContact> _GolfCourseForContacts;
		
		private EntitySet<GolferStatsConfiguration> _GolferStatsConfigurations;
		
		private EntitySet<GolferStatsValue> _GolferStatsValues;
		
		private EntitySet<GolfLeagueSetup> _GolfLeagueSetups;
		
		private EntitySet<GolfLeagueSetup> _GolfLeagueSetups1;
		
		private EntitySet<GolfLeagueSetup> _GolfLeagueSetups2;
		
		private EntitySet<GolfLeagueSetup> _GolfLeagueSetups3;
		
		private EntitySet<GolfRoster> _GolfRosters;
		
		private EntitySet<GolfScore> _GolfScores;
		
		private EntitySet<hof> _hofs;
		
		private EntitySet<LeagueUmpire> _LeagueUmpires;
		
		private EntitySet<MemberBusiness> _MemberBusinesses;
		
		private EntitySet<MessagePost> _MessagePosts;
		
		private EntitySet<MessageTopic> _MessageTopics;
		
		private EntitySet<PlayerProfile> _PlayerProfiles;
		
		private EntitySet<Roster> _Rosters;
		
		private EntitySet<TeamSeasonManager> _TeamSeasonManagers;
		
		private EntitySet<VoteAnswer> _VoteAnswers;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnPhone1Changing(string value);
    partial void OnPhone1Changed();
    partial void OnPhone2Changing(string value);
    partial void OnPhone2Changed();
    partial void OnPhone3Changing(string value);
    partial void OnPhone3Changed();
    partial void OnCreatorAccountIdChanging(long value);
    partial void OnCreatorAccountIdChanged();
    partial void OnStreetAddressChanging(string value);
    partial void OnStreetAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnFirstYearChanging(System.Nullable<int> value);
    partial void OnFirstYearChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnIsFemaleChanging(System.Nullable<bool> value);
    partial void OnIsFemaleChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    #endregion
		
		public Contact()
		{
			this._ContactRoles = new EntitySet<ContactRole>(new Action<ContactRole>(this.attach_ContactRoles), new Action<ContactRole>(this.detach_ContactRoles));
			this._FieldContacts = new EntitySet<FieldContact>(new Action<FieldContact>(this.attach_FieldContacts), new Action<FieldContact>(this.detach_FieldContacts));
			this._GolfCourseForContacts = new EntitySet<GolfCourseForContact>(new Action<GolfCourseForContact>(this.attach_GolfCourseForContacts), new Action<GolfCourseForContact>(this.detach_GolfCourseForContacts));
			this._GolferStatsConfigurations = new EntitySet<GolferStatsConfiguration>(new Action<GolferStatsConfiguration>(this.attach_GolferStatsConfigurations), new Action<GolferStatsConfiguration>(this.detach_GolferStatsConfigurations));
			this._GolferStatsValues = new EntitySet<GolferStatsValue>(new Action<GolferStatsValue>(this.attach_GolferStatsValues), new Action<GolferStatsValue>(this.detach_GolferStatsValues));
			this._GolfLeagueSetups = new EntitySet<GolfLeagueSetup>(new Action<GolfLeagueSetup>(this.attach_GolfLeagueSetups), new Action<GolfLeagueSetup>(this.detach_GolfLeagueSetups));
			this._GolfLeagueSetups1 = new EntitySet<GolfLeagueSetup>(new Action<GolfLeagueSetup>(this.attach_GolfLeagueSetups1), new Action<GolfLeagueSetup>(this.detach_GolfLeagueSetups1));
			this._GolfLeagueSetups2 = new EntitySet<GolfLeagueSetup>(new Action<GolfLeagueSetup>(this.attach_GolfLeagueSetups2), new Action<GolfLeagueSetup>(this.detach_GolfLeagueSetups2));
			this._GolfLeagueSetups3 = new EntitySet<GolfLeagueSetup>(new Action<GolfLeagueSetup>(this.attach_GolfLeagueSetups3), new Action<GolfLeagueSetup>(this.detach_GolfLeagueSetups3));
			this._GolfRosters = new EntitySet<GolfRoster>(new Action<GolfRoster>(this.attach_GolfRosters), new Action<GolfRoster>(this.detach_GolfRosters));
			this._GolfScores = new EntitySet<GolfScore>(new Action<GolfScore>(this.attach_GolfScores), new Action<GolfScore>(this.detach_GolfScores));
			this._hofs = new EntitySet<hof>(new Action<hof>(this.attach_hofs), new Action<hof>(this.detach_hofs));
			this._LeagueUmpires = new EntitySet<LeagueUmpire>(new Action<LeagueUmpire>(this.attach_LeagueUmpires), new Action<LeagueUmpire>(this.detach_LeagueUmpires));
			this._MemberBusinesses = new EntitySet<MemberBusiness>(new Action<MemberBusiness>(this.attach_MemberBusinesses), new Action<MemberBusiness>(this.detach_MemberBusinesses));
			this._MessagePosts = new EntitySet<MessagePost>(new Action<MessagePost>(this.attach_MessagePosts), new Action<MessagePost>(this.detach_MessagePosts));
			this._MessageTopics = new EntitySet<MessageTopic>(new Action<MessageTopic>(this.attach_MessageTopics), new Action<MessageTopic>(this.detach_MessageTopics));
			this._PlayerProfiles = new EntitySet<PlayerProfile>(new Action<PlayerProfile>(this.attach_PlayerProfiles), new Action<PlayerProfile>(this.detach_PlayerProfiles));
			this._Rosters = new EntitySet<Roster>(new Action<Roster>(this.attach_Rosters), new Action<Roster>(this.detach_Rosters));
			this._TeamSeasonManagers = new EntitySet<TeamSeasonManager>(new Action<TeamSeasonManager>(this.attach_TeamSeasonManagers), new Action<TeamSeasonManager>(this.detach_TeamSeasonManagers));
			this._VoteAnswers = new EntitySet<VoteAnswer>(new Action<VoteAnswer>(this.attach_VoteAnswers), new Action<VoteAnswer>(this.detach_VoteAnswers));
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="VarChar(25)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone1", DbType="VarChar(14)")]
		public string Phone1
		{
			get
			{
				return this._Phone1;
			}
			set
			{
				if ((this._Phone1 != value))
				{
					this.OnPhone1Changing(value);
					this.SendPropertyChanging();
					this._Phone1 = value;
					this.SendPropertyChanged("Phone1");
					this.OnPhone1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone2", DbType="VarChar(14)")]
		public string Phone2
		{
			get
			{
				return this._Phone2;
			}
			set
			{
				if ((this._Phone2 != value))
				{
					this.OnPhone2Changing(value);
					this.SendPropertyChanging();
					this._Phone2 = value;
					this.SendPropertyChanged("Phone2");
					this.OnPhone2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone3", DbType="VarChar(14)")]
		public string Phone3
		{
			get
			{
				return this._Phone3;
			}
			set
			{
				if ((this._Phone3 != value))
				{
					this.OnPhone3Changing(value);
					this.SendPropertyChanging();
					this._Phone3 = value;
					this.SendPropertyChanged("Phone3");
					this.OnPhone3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorAccountId", DbType="BigInt NOT NULL")]
		public long CreatorAccountId
		{
			get
			{
				return this._CreatorAccountId;
			}
			set
			{
				if ((this._CreatorAccountId != value))
				{
					this.OnCreatorAccountIdChanging(value);
					this.SendPropertyChanging();
					this._CreatorAccountId = value;
					this.SendPropertyChanged("CreatorAccountId");
					this.OnCreatorAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetAddress", DbType="VarChar(75)")]
		public string StreetAddress
		{
			get
			{
				return this._StreetAddress;
			}
			set
			{
				if ((this._StreetAddress != value))
				{
					this.OnStreetAddressChanging(value);
					this.SendPropertyChanging();
					this._StreetAddress = value;
					this.SendPropertyChanged("StreetAddress");
					this.OnStreetAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(25)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(25)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="VarChar(15)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstYear", DbType="Int")]
		public System.Nullable<int> FirstYear
		{
			get
			{
				return this._FirstYear;
			}
			set
			{
				if ((this._FirstYear != value))
				{
					this.OnFirstYearChanging(value);
					this.SendPropertyChanging();
					this._FirstYear = value;
					this.SendPropertyChanged("FirstYear");
					this.OnFirstYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFemale", DbType="Bit")]
		public System.Nullable<bool> IsFemale
		{
			get
			{
				return this._IsFemale;
			}
			set
			{
				if ((this._IsFemale != value))
				{
					this.OnIsFemaleChanging(value);
					this.SendPropertyChanging();
					this._IsFemale = value;
					this.SendPropertyChanged("IsFemale");
					this.OnIsFemaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128)")]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_ContactRole", Storage="_ContactRoles", ThisKey="Id", OtherKey="ContactId")]
		public EntitySet<ContactRole> ContactRoles
		{
			get
			{
				return this._ContactRoles;
			}
			set
			{
				this._ContactRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_FieldContact", Storage="_FieldContacts", ThisKey="Id", OtherKey="ContactId")]
		public EntitySet<FieldContact> FieldContacts
		{
			get
			{
				return this._FieldContacts;
			}
			set
			{
				this._FieldContacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_GolfCourseForContact", Storage="_GolfCourseForContacts", ThisKey="Id", OtherKey="ContactId")]
		public EntitySet<GolfCourseForContact> GolfCourseForContacts
		{
			get
			{
				return this._GolfCourseForContacts;
			}
			set
			{
				this._GolfCourseForContacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_GolferStatsConfiguration", Storage="_GolferStatsConfigurations", ThisKey="Id", OtherKey="ContactId")]
		public EntitySet<GolferStatsConfiguration> GolferStatsConfigurations
		{
			get
			{
				return this._GolferStatsConfigurations;
			}
			set
			{
				this._GolferStatsConfigurations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_GolferStatsValue", Storage="_GolferStatsValues", ThisKey="Id", OtherKey="ContactId")]
		public EntitySet<GolferStatsValue> GolferStatsValues
		{
			get
			{
				return this._GolferStatsValues;
			}
			set
			{
				this._GolferStatsValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_GolfLeagueSetup", Storage="_GolfLeagueSetups", ThisKey="Id", OtherKey="PresidentId")]
		public EntitySet<GolfLeagueSetup> GolfLeagueSetups
		{
			get
			{
				return this._GolfLeagueSetups;
			}
			set
			{
				this._GolfLeagueSetups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_GolfLeagueSetup1", Storage="_GolfLeagueSetups1", ThisKey="Id", OtherKey="VicePresidentId")]
		public EntitySet<GolfLeagueSetup> GolfLeagueSetups1
		{
			get
			{
				return this._GolfLeagueSetups1;
			}
			set
			{
				this._GolfLeagueSetups1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_GolfLeagueSetup2", Storage="_GolfLeagueSetups2", ThisKey="Id", OtherKey="SecretaryId")]
		public EntitySet<GolfLeagueSetup> GolfLeagueSetups2
		{
			get
			{
				return this._GolfLeagueSetups2;
			}
			set
			{
				this._GolfLeagueSetups2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_GolfLeagueSetup3", Storage="_GolfLeagueSetups3", ThisKey="Id", OtherKey="TreasurerId")]
		public EntitySet<GolfLeagueSetup> GolfLeagueSetups3
		{
			get
			{
				return this._GolfLeagueSetups3;
			}
			set
			{
				this._GolfLeagueSetups3.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_GolfRoster", Storage="_GolfRosters", ThisKey="Id", OtherKey="ContactId")]
		public EntitySet<GolfRoster> GolfRosters
		{
			get
			{
				return this._GolfRosters;
			}
			set
			{
				this._GolfRosters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_GolfScore", Storage="_GolfScores", ThisKey="Id", OtherKey="ContactId")]
		public EntitySet<GolfScore> GolfScores
		{
			get
			{
				return this._GolfScores;
			}
			set
			{
				this._GolfScores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_hof", Storage="_hofs", ThisKey="Id", OtherKey="ContactId")]
		public EntitySet<hof> hofs
		{
			get
			{
				return this._hofs;
			}
			set
			{
				this._hofs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_LeagueUmpire", Storage="_LeagueUmpires", ThisKey="Id", OtherKey="ContactId")]
		public EntitySet<LeagueUmpire> LeagueUmpires
		{
			get
			{
				return this._LeagueUmpires;
			}
			set
			{
				this._LeagueUmpires.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_MemberBusiness", Storage="_MemberBusinesses", ThisKey="Id", OtherKey="ContactId")]
		public EntitySet<MemberBusiness> MemberBusinesses
		{
			get
			{
				return this._MemberBusinesses;
			}
			set
			{
				this._MemberBusinesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_MessagePost", Storage="_MessagePosts", ThisKey="Id", OtherKey="ContactCreatorId")]
		public EntitySet<MessagePost> MessagePosts
		{
			get
			{
				return this._MessagePosts;
			}
			set
			{
				this._MessagePosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_MessageTopic", Storage="_MessageTopics", ThisKey="Id", OtherKey="ContactCreatorId")]
		public EntitySet<MessageTopic> MessageTopics
		{
			get
			{
				return this._MessageTopics;
			}
			set
			{
				this._MessageTopics.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_PlayerProfile", Storage="_PlayerProfiles", ThisKey="Id", OtherKey="PlayerId")]
		public EntitySet<PlayerProfile> PlayerProfiles
		{
			get
			{
				return this._PlayerProfiles;
			}
			set
			{
				this._PlayerProfiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Roster", Storage="_Rosters", ThisKey="Id", OtherKey="ContactId")]
		public EntitySet<Roster> Rosters
		{
			get
			{
				return this._Rosters;
			}
			set
			{
				this._Rosters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_TeamSeasonManager", Storage="_TeamSeasonManagers", ThisKey="Id", OtherKey="ContactId")]
		public EntitySet<TeamSeasonManager> TeamSeasonManagers
		{
			get
			{
				return this._TeamSeasonManagers;
			}
			set
			{
				this._TeamSeasonManagers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_VoteAnswer", Storage="_VoteAnswers", ThisKey="Id", OtherKey="ContactId")]
		public EntitySet<VoteAnswer> VoteAnswers
		{
			get
			{
				return this._VoteAnswers;
			}
			set
			{
				this._VoteAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_Contact", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET NULL")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContactRoles(ContactRole entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_ContactRoles(ContactRole entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_FieldContacts(FieldContact entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_FieldContacts(FieldContact entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_GolfCourseForContacts(GolfCourseForContact entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_GolfCourseForContacts(GolfCourseForContact entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_GolferStatsConfigurations(GolferStatsConfiguration entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_GolferStatsConfigurations(GolferStatsConfiguration entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_GolferStatsValues(GolferStatsValue entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_GolferStatsValues(GolferStatsValue entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_GolfLeagueSetups(GolfLeagueSetup entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_GolfLeagueSetups(GolfLeagueSetup entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_GolfLeagueSetups1(GolfLeagueSetup entity)
		{
			this.SendPropertyChanging();
			entity.Contact1 = this;
		}
		
		private void detach_GolfLeagueSetups1(GolfLeagueSetup entity)
		{
			this.SendPropertyChanging();
			entity.Contact1 = null;
		}
		
		private void attach_GolfLeagueSetups2(GolfLeagueSetup entity)
		{
			this.SendPropertyChanging();
			entity.Contact2 = this;
		}
		
		private void detach_GolfLeagueSetups2(GolfLeagueSetup entity)
		{
			this.SendPropertyChanging();
			entity.Contact2 = null;
		}
		
		private void attach_GolfLeagueSetups3(GolfLeagueSetup entity)
		{
			this.SendPropertyChanging();
			entity.Contact3 = this;
		}
		
		private void detach_GolfLeagueSetups3(GolfLeagueSetup entity)
		{
			this.SendPropertyChanging();
			entity.Contact3 = null;
		}
		
		private void attach_GolfRosters(GolfRoster entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_GolfRosters(GolfRoster entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_GolfScores(GolfScore entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_GolfScores(GolfScore entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_hofs(hof entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_hofs(hof entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_LeagueUmpires(LeagueUmpire entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_LeagueUmpires(LeagueUmpire entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_MemberBusinesses(MemberBusiness entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_MemberBusinesses(MemberBusiness entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_MessagePosts(MessagePost entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_MessagePosts(MessagePost entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_MessageTopics(MessageTopic entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_MessageTopics(MessageTopic entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_PlayerProfiles(PlayerProfile entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_PlayerProfiles(PlayerProfile entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_Rosters(Roster entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Rosters(Roster entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_TeamSeasonManagers(TeamSeasonManager entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_TeamSeasonManagers(TeamSeasonManager entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_VoteAnswers(VoteAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_VoteAnswers(VoteAnswer entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CurrentSeason")]
	public partial class CurrentSeason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _SeasonId;
		
		private long _AccountId;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeasonIdChanging(long value);
    partial void OnSeasonIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    #endregion
		
		public CurrentSeason()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonId", DbType="BigInt NOT NULL")]
		public long SeasonId
		{
			get
			{
				return this._SeasonId;
			}
			set
			{
				if ((this._SeasonId != value))
				{
					this.OnSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._SeasonId = value;
					this.SendPropertyChanged("SeasonId");
					this.OnSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_CurrentSeason", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.CurrentSeason = null;
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.CurrentSeason = this;
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DivisionDefs")]
	public partial class DivisionDef : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private string _Name;
		
		private EntitySet<DivisionSeason> _DivisionSeasons;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DivisionDef()
		{
			this._DivisionSeasons = new EntitySet<DivisionSeason>(new Action<DivisionSeason>(this.attach_DivisionSeasons), new Action<DivisionSeason>(this.detach_DivisionSeasons));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DivisionDef_DivisionSeason", Storage="_DivisionSeasons", ThisKey="Id", OtherKey="DivisionId")]
		public EntitySet<DivisionSeason> DivisionSeasons
		{
			get
			{
				return this._DivisionSeasons;
			}
			set
			{
				this._DivisionSeasons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_DivisionDef", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.DivisionDefs.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.DivisionDefs.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DivisionSeasons(DivisionSeason entity)
		{
			this.SendPropertyChanging();
			entity.DivisionDef = this;
		}
		
		private void detach_DivisionSeasons(DivisionSeason entity)
		{
			this.SendPropertyChanging();
			entity.DivisionDef = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DivisionSeason")]
	public partial class DivisionSeason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _DivisionId;
		
		private long _LeagueSeasonId;
		
		private int _Priority;
		
		private EntityRef<DivisionDef> _DivisionDef;
		
		private EntityRef<LeagueSeason> _LeagueSeason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnDivisionIdChanging(long value);
    partial void OnDivisionIdChanged();
    partial void OnLeagueSeasonIdChanging(long value);
    partial void OnLeagueSeasonIdChanged();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    #endregion
		
		public DivisionSeason()
		{
			this._DivisionDef = default(EntityRef<DivisionDef>);
			this._LeagueSeason = default(EntityRef<LeagueSeason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionId", DbType="BigInt NOT NULL")]
		public long DivisionId
		{
			get
			{
				return this._DivisionId;
			}
			set
			{
				if ((this._DivisionId != value))
				{
					if (this._DivisionDef.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDivisionIdChanging(value);
					this.SendPropertyChanging();
					this._DivisionId = value;
					this.SendPropertyChanged("DivisionId");
					this.OnDivisionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueSeasonId", DbType="BigInt NOT NULL")]
		public long LeagueSeasonId
		{
			get
			{
				return this._LeagueSeasonId;
			}
			set
			{
				if ((this._LeagueSeasonId != value))
				{
					if (this._LeagueSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._LeagueSeasonId = value;
					this.SendPropertyChanged("LeagueSeasonId");
					this.OnLeagueSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DivisionDef_DivisionSeason", Storage="_DivisionDef", ThisKey="DivisionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public DivisionDef DivisionDef
		{
			get
			{
				return this._DivisionDef.Entity;
			}
			set
			{
				DivisionDef previousValue = this._DivisionDef.Entity;
				if (((previousValue != value) 
							|| (this._DivisionDef.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DivisionDef.Entity = null;
						previousValue.DivisionSeasons.Remove(this);
					}
					this._DivisionDef.Entity = value;
					if ((value != null))
					{
						value.DivisionSeasons.Add(this);
						this._DivisionId = value.Id;
					}
					else
					{
						this._DivisionId = default(long);
					}
					this.SendPropertyChanged("DivisionDef");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSeason_DivisionSeason", Storage="_LeagueSeason", ThisKey="LeagueSeasonId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LeagueSeason LeagueSeason
		{
			get
			{
				return this._LeagueSeason.Entity;
			}
			set
			{
				LeagueSeason previousValue = this._LeagueSeason.Entity;
				if (((previousValue != value) 
							|| (this._LeagueSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueSeason.Entity = null;
						previousValue.DivisionSeasons.Remove(this);
					}
					this._LeagueSeason.Entity = value;
					if ((value != null))
					{
						value.DivisionSeasons.Add(this);
						this._LeagueSeasonId = value.Id;
					}
					else
					{
						this._LeagueSeasonId = default(long);
					}
					this.SendPropertyChanged("LeagueSeason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FieldContacts")]
	public partial class FieldContact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _FieldId;
		
		private long _ContactId;
		
		private EntityRef<AvailableField> _AvailableField;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnFieldIdChanging(long value);
    partial void OnFieldIdChanged();
    partial void OnContactIdChanging(long value);
    partial void OnContactIdChanged();
    #endregion
		
		public FieldContact()
		{
			this._AvailableField = default(EntityRef<AvailableField>);
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldId", DbType="BigInt NOT NULL")]
		public long FieldId
		{
			get
			{
				return this._FieldId;
			}
			set
			{
				if ((this._FieldId != value))
				{
					if (this._AvailableField.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldIdChanging(value);
					this.SendPropertyChanging();
					this._FieldId = value;
					this.SendPropertyChanged("FieldId");
					this.OnFieldIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="BigInt NOT NULL")]
		public long ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AvailableField_FieldContact", Storage="_AvailableField", ThisKey="FieldId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AvailableField AvailableField
		{
			get
			{
				return this._AvailableField.Entity;
			}
			set
			{
				AvailableField previousValue = this._AvailableField.Entity;
				if (((previousValue != value) 
							|| (this._AvailableField.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AvailableField.Entity = null;
						previousValue.FieldContacts.Remove(this);
					}
					this._AvailableField.Entity = value;
					if ((value != null))
					{
						value.FieldContacts.Add(this);
						this._FieldId = value.Id;
					}
					else
					{
						this._FieldId = default(long);
					}
					this.SendPropertyChanged("AvailableField");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_FieldContact", Storage="_Contact", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.FieldContacts.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.FieldContacts.Add(this);
						this._ContactId = value.Id;
					}
					else
					{
						this._ContactId = default(long);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.fieldstatsum")]
	public partial class fieldstatsum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _PlayerId;
		
		private long _GameId;
		
		private long _TeamId;
		
		private int _POS;
		
		private int _IP;
		
		private int _IP2;
		
		private int _PO;
		
		private int _A;
		
		private int _E;
		
		private int _PB;
		
		private int _SB;
		
		private int _CS;
		
		private EntityRef<LeagueSchedule> _LeagueSchedule;
		
		private EntityRef<RosterSeason> _RosterSeason;
		
		private EntityRef<TeamsSeason> _TeamsSeason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnGameIdChanging(long value);
    partial void OnGameIdChanged();
    partial void OnTeamIdChanging(long value);
    partial void OnTeamIdChanged();
    partial void OnPOSChanging(int value);
    partial void OnPOSChanged();
    partial void OnIPChanging(int value);
    partial void OnIPChanged();
    partial void OnIP2Changing(int value);
    partial void OnIP2Changed();
    partial void OnPOChanging(int value);
    partial void OnPOChanged();
    partial void OnAChanging(int value);
    partial void OnAChanged();
    partial void OnEChanging(int value);
    partial void OnEChanged();
    partial void OnPBChanging(int value);
    partial void OnPBChanged();
    partial void OnSBChanging(int value);
    partial void OnSBChanged();
    partial void OnCSChanging(int value);
    partial void OnCSChanged();
    #endregion
		
		public fieldstatsum()
		{
			this._LeagueSchedule = default(EntityRef<LeagueSchedule>);
			this._RosterSeason = default(EntityRef<RosterSeason>);
			this._TeamsSeason = default(EntityRef<TeamsSeason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._RosterSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="BigInt NOT NULL")]
		public long GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._LeagueSchedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="BigInt NOT NULL")]
		public long TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._TeamsSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_POS", DbType="Int NOT NULL")]
		public int POS
		{
			get
			{
				return this._POS;
			}
			set
			{
				if ((this._POS != value))
				{
					this.OnPOSChanging(value);
					this.SendPropertyChanging();
					this._POS = value;
					this.SendPropertyChanged("POS");
					this.OnPOSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP", DbType="Int NOT NULL")]
		public int IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP2", DbType="Int NOT NULL")]
		public int IP2
		{
			get
			{
				return this._IP2;
			}
			set
			{
				if ((this._IP2 != value))
				{
					this.OnIP2Changing(value);
					this.SendPropertyChanging();
					this._IP2 = value;
					this.SendPropertyChanged("IP2");
					this.OnIP2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PO", DbType="Int NOT NULL")]
		public int PO
		{
			get
			{
				return this._PO;
			}
			set
			{
				if ((this._PO != value))
				{
					this.OnPOChanging(value);
					this.SendPropertyChanging();
					this._PO = value;
					this.SendPropertyChanged("PO");
					this.OnPOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A", DbType="Int NOT NULL")]
		public int A
		{
			get
			{
				return this._A;
			}
			set
			{
				if ((this._A != value))
				{
					this.OnAChanging(value);
					this.SendPropertyChanging();
					this._A = value;
					this.SendPropertyChanged("A");
					this.OnAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E", DbType="Int NOT NULL")]
		public int E
		{
			get
			{
				return this._E;
			}
			set
			{
				if ((this._E != value))
				{
					this.OnEChanging(value);
					this.SendPropertyChanging();
					this._E = value;
					this.SendPropertyChanged("E");
					this.OnEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PB", DbType="Int NOT NULL")]
		public int PB
		{
			get
			{
				return this._PB;
			}
			set
			{
				if ((this._PB != value))
				{
					this.OnPBChanging(value);
					this.SendPropertyChanging();
					this._PB = value;
					this.SendPropertyChanged("PB");
					this.OnPBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SB", DbType="Int NOT NULL")]
		public int SB
		{
			get
			{
				return this._SB;
			}
			set
			{
				if ((this._SB != value))
				{
					this.OnSBChanging(value);
					this.SendPropertyChanging();
					this._SB = value;
					this.SendPropertyChanged("SB");
					this.OnSBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CS", DbType="Int NOT NULL")]
		public int CS
		{
			get
			{
				return this._CS;
			}
			set
			{
				if ((this._CS != value))
				{
					this.OnCSChanging(value);
					this.SendPropertyChanging();
					this._CS = value;
					this.SendPropertyChanged("CS");
					this.OnCSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSchedule_fieldstatsum", Storage="_LeagueSchedule", ThisKey="GameId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LeagueSchedule LeagueSchedule
		{
			get
			{
				return this._LeagueSchedule.Entity;
			}
			set
			{
				LeagueSchedule previousValue = this._LeagueSchedule.Entity;
				if (((previousValue != value) 
							|| (this._LeagueSchedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueSchedule.Entity = null;
						previousValue.fieldstatsums.Remove(this);
					}
					this._LeagueSchedule.Entity = value;
					if ((value != null))
					{
						value.fieldstatsums.Add(this);
						this._GameId = value.Id;
					}
					else
					{
						this._GameId = default(long);
					}
					this.SendPropertyChanged("LeagueSchedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RosterSeason_fieldstatsum", Storage="_RosterSeason", ThisKey="PlayerId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RosterSeason RosterSeason
		{
			get
			{
				return this._RosterSeason.Entity;
			}
			set
			{
				RosterSeason previousValue = this._RosterSeason.Entity;
				if (((previousValue != value) 
							|| (this._RosterSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RosterSeason.Entity = null;
						previousValue.fieldstatsums.Remove(this);
					}
					this._RosterSeason.Entity = value;
					if ((value != null))
					{
						value.fieldstatsums.Add(this);
						this._PlayerId = value.Id;
					}
					else
					{
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("RosterSeason");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsSeason_fieldstatsum", Storage="_TeamsSeason", ThisKey="TeamId", OtherKey="Id", IsForeignKey=true)]
		public TeamsSeason TeamsSeason
		{
			get
			{
				return this._TeamsSeason.Entity;
			}
			set
			{
				TeamsSeason previousValue = this._TeamsSeason.Entity;
				if (((previousValue != value) 
							|| (this._TeamsSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamsSeason.Entity = null;
						previousValue.fieldstatsums.Remove(this);
					}
					this._TeamsSeason.Entity = value;
					if ((value != null))
					{
						value.fieldstatsums.Add(this);
						this._TeamId = value.Id;
					}
					else
					{
						this._TeamId = default(long);
					}
					this.SendPropertyChanged("TeamsSeason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GameEjections")]
	public partial class GameEjection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _leagueSeasonId;
		
		private long _gameId;
		
		private long _playerSeasonId;
		
		private long _umpireId;
		
		private string _comments;
		
		private EntityRef<LeagueSchedule> _LeagueSchedule;
		
		private EntityRef<LeagueSeason> _LeagueSeason;
		
		private EntityRef<LeagueUmpire> _LeagueUmpire;
		
		private EntityRef<RosterSeason> _RosterSeason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnleagueSeasonIdChanging(long value);
    partial void OnleagueSeasonIdChanged();
    partial void OngameIdChanging(long value);
    partial void OngameIdChanged();
    partial void OnplayerSeasonIdChanging(long value);
    partial void OnplayerSeasonIdChanged();
    partial void OnumpireIdChanging(long value);
    partial void OnumpireIdChanged();
    partial void OncommentsChanging(string value);
    partial void OncommentsChanged();
    #endregion
		
		public GameEjection()
		{
			this._LeagueSchedule = default(EntityRef<LeagueSchedule>);
			this._LeagueSeason = default(EntityRef<LeagueSeason>);
			this._LeagueUmpire = default(EntityRef<LeagueUmpire>);
			this._RosterSeason = default(EntityRef<RosterSeason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leagueSeasonId", DbType="BigInt NOT NULL")]
		public long leagueSeasonId
		{
			get
			{
				return this._leagueSeasonId;
			}
			set
			{
				if ((this._leagueSeasonId != value))
				{
					if (this._LeagueSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnleagueSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._leagueSeasonId = value;
					this.SendPropertyChanged("leagueSeasonId");
					this.OnleagueSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gameId", DbType="BigInt NOT NULL")]
		public long gameId
		{
			get
			{
				return this._gameId;
			}
			set
			{
				if ((this._gameId != value))
				{
					if (this._LeagueSchedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OngameIdChanging(value);
					this.SendPropertyChanging();
					this._gameId = value;
					this.SendPropertyChanged("gameId");
					this.OngameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerSeasonId", DbType="BigInt NOT NULL")]
		public long playerSeasonId
		{
			get
			{
				return this._playerSeasonId;
			}
			set
			{
				if ((this._playerSeasonId != value))
				{
					if (this._RosterSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnplayerSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._playerSeasonId = value;
					this.SendPropertyChanged("playerSeasonId");
					this.OnplayerSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_umpireId", DbType="BigInt NOT NULL")]
		public long umpireId
		{
			get
			{
				return this._umpireId;
			}
			set
			{
				if ((this._umpireId != value))
				{
					if (this._LeagueUmpire.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnumpireIdChanging(value);
					this.SendPropertyChanging();
					this._umpireId = value;
					this.SendPropertyChanged("umpireId");
					this.OnumpireIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_comments", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string comments
		{
			get
			{
				return this._comments;
			}
			set
			{
				if ((this._comments != value))
				{
					this.OncommentsChanging(value);
					this.SendPropertyChanging();
					this._comments = value;
					this.SendPropertyChanged("comments");
					this.OncommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSchedule_GameEjection", Storage="_LeagueSchedule", ThisKey="gameId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LeagueSchedule LeagueSchedule
		{
			get
			{
				return this._LeagueSchedule.Entity;
			}
			set
			{
				LeagueSchedule previousValue = this._LeagueSchedule.Entity;
				if (((previousValue != value) 
							|| (this._LeagueSchedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueSchedule.Entity = null;
						previousValue.GameEjections.Remove(this);
					}
					this._LeagueSchedule.Entity = value;
					if ((value != null))
					{
						value.GameEjections.Add(this);
						this._gameId = value.Id;
					}
					else
					{
						this._gameId = default(long);
					}
					this.SendPropertyChanged("LeagueSchedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSeason_GameEjection", Storage="_LeagueSeason", ThisKey="leagueSeasonId", OtherKey="Id", IsForeignKey=true)]
		public LeagueSeason LeagueSeason
		{
			get
			{
				return this._LeagueSeason.Entity;
			}
			set
			{
				LeagueSeason previousValue = this._LeagueSeason.Entity;
				if (((previousValue != value) 
							|| (this._LeagueSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueSeason.Entity = null;
						previousValue.GameEjections.Remove(this);
					}
					this._LeagueSeason.Entity = value;
					if ((value != null))
					{
						value.GameEjections.Add(this);
						this._leagueSeasonId = value.Id;
					}
					else
					{
						this._leagueSeasonId = default(long);
					}
					this.SendPropertyChanged("LeagueSeason");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueUmpire_GameEjection", Storage="_LeagueUmpire", ThisKey="umpireId", OtherKey="Id", IsForeignKey=true)]
		public LeagueUmpire LeagueUmpire
		{
			get
			{
				return this._LeagueUmpire.Entity;
			}
			set
			{
				LeagueUmpire previousValue = this._LeagueUmpire.Entity;
				if (((previousValue != value) 
							|| (this._LeagueUmpire.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueUmpire.Entity = null;
						previousValue.GameEjections.Remove(this);
					}
					this._LeagueUmpire.Entity = value;
					if ((value != null))
					{
						value.GameEjections.Add(this);
						this._umpireId = value.Id;
					}
					else
					{
						this._umpireId = default(long);
					}
					this.SendPropertyChanged("LeagueUmpire");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RosterSeason_GameEjection", Storage="_RosterSeason", ThisKey="playerSeasonId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RosterSeason RosterSeason
		{
			get
			{
				return this._RosterSeason.Entity;
			}
			set
			{
				RosterSeason previousValue = this._RosterSeason.Entity;
				if (((previousValue != value) 
							|| (this._RosterSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RosterSeason.Entity = null;
						previousValue.GameEjections.Remove(this);
					}
					this._RosterSeason.Entity = value;
					if ((value != null))
					{
						value.GameEjections.Add(this);
						this._playerSeasonId = value.Id;
					}
					else
					{
						this._playerSeasonId = default(long);
					}
					this.SendPropertyChanged("RosterSeason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GolfCourse")]
	public partial class GolfCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private string _Designer;
		
		private System.Nullable<int> _YearBuilt;
		
		private int _NumberOfHoles;
		
		private string _Address;
		
		private string _City;
		
		private string _State;
		
		private string _Zip;
		
		private string _Country;
		
		private int _MensPar1;
		
		private int _MensPar2;
		
		private int _MensPar3;
		
		private int _MensPar4;
		
		private int _MensPar5;
		
		private int _MensPar6;
		
		private int _MensPar7;
		
		private int _MensPar8;
		
		private int _MensPar9;
		
		private int _MensPar10;
		
		private int _MensPar11;
		
		private int _MensPar12;
		
		private int _MensPar13;
		
		private int _MensPar14;
		
		private int _MensPar15;
		
		private int _MensPar16;
		
		private int _MensPar17;
		
		private int _MensPar18;
		
		private int _WomansPar1;
		
		private int _WomansPar2;
		
		private int _WomansPar3;
		
		private int _WomansPar4;
		
		private int _WomansPar5;
		
		private int _WomansPar6;
		
		private int _WomansPar7;
		
		private int _WomansPar8;
		
		private int _WomansPar9;
		
		private int _WomansPar10;
		
		private int _WomansPar11;
		
		private int _WomansPar12;
		
		private int _WomansPar13;
		
		private int _WomansPar14;
		
		private int _WomansPar15;
		
		private int _WomansPar16;
		
		private int _WomansPar17;
		
		private int _WomansPar18;
		
		private int _MensHandicap1;
		
		private int _MensHandicap2;
		
		private int _MensHandicap3;
		
		private int _MensHandicap4;
		
		private int _MensHandicap5;
		
		private int _MensHandicap6;
		
		private int _MensHandicap7;
		
		private int _MensHandicap8;
		
		private int _MensHandicap9;
		
		private int _MensHandicap10;
		
		private int _MensHandicap11;
		
		private int _MensHandicap12;
		
		private int _MensHandicap13;
		
		private int _MensHandicap14;
		
		private int _MensHandicap15;
		
		private int _MensHandicap16;
		
		private int _MensHandicap17;
		
		private int _MensHandicap18;
		
		private int _WomansHandicap1;
		
		private int _WomansHandicap2;
		
		private int _WomansHandicap3;
		
		private int _WomansHandicap4;
		
		private int _WomansHandicap5;
		
		private int _WomansHandicap6;
		
		private int _WomansHandicap7;
		
		private int _WomansHandicap8;
		
		private int _WomansHandicap9;
		
		private int _WomansHandicap10;
		
		private int _WomansHandicap11;
		
		private int _WomansHandicap12;
		
		private int _WomansHandicap13;
		
		private int _WomansHandicap14;
		
		private int _WomansHandicap15;
		
		private int _WomansHandicap16;
		
		private int _WomansHandicap17;
		
		private int _WomansHandicap18;
		
		private EntitySet<GolfCourseForContact> _GolfCourseForContacts;
		
		private EntitySet<GolfLeagueCourse> _GolfLeagueCourses;
		
		private EntitySet<GolfMatch> _GolfMatches;
		
		private EntitySet<GolfScore> _GolfScores;
		
		private EntitySet<GolfTeeInformation> _GolfTeeInformations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDesignerChanging(string value);
    partial void OnDesignerChanged();
    partial void OnYearBuiltChanging(System.Nullable<int> value);
    partial void OnYearBuiltChanged();
    partial void OnNumberOfHolesChanging(int value);
    partial void OnNumberOfHolesChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnMensPar1Changing(int value);
    partial void OnMensPar1Changed();
    partial void OnMensPar2Changing(int value);
    partial void OnMensPar2Changed();
    partial void OnMensPar3Changing(int value);
    partial void OnMensPar3Changed();
    partial void OnMensPar4Changing(int value);
    partial void OnMensPar4Changed();
    partial void OnMensPar5Changing(int value);
    partial void OnMensPar5Changed();
    partial void OnMensPar6Changing(int value);
    partial void OnMensPar6Changed();
    partial void OnMensPar7Changing(int value);
    partial void OnMensPar7Changed();
    partial void OnMensPar8Changing(int value);
    partial void OnMensPar8Changed();
    partial void OnMensPar9Changing(int value);
    partial void OnMensPar9Changed();
    partial void OnMensPar10Changing(int value);
    partial void OnMensPar10Changed();
    partial void OnMensPar11Changing(int value);
    partial void OnMensPar11Changed();
    partial void OnMensPar12Changing(int value);
    partial void OnMensPar12Changed();
    partial void OnMensPar13Changing(int value);
    partial void OnMensPar13Changed();
    partial void OnMensPar14Changing(int value);
    partial void OnMensPar14Changed();
    partial void OnMensPar15Changing(int value);
    partial void OnMensPar15Changed();
    partial void OnMensPar16Changing(int value);
    partial void OnMensPar16Changed();
    partial void OnMensPar17Changing(int value);
    partial void OnMensPar17Changed();
    partial void OnMensPar18Changing(int value);
    partial void OnMensPar18Changed();
    partial void OnWomansPar1Changing(int value);
    partial void OnWomansPar1Changed();
    partial void OnWomansPar2Changing(int value);
    partial void OnWomansPar2Changed();
    partial void OnWomansPar3Changing(int value);
    partial void OnWomansPar3Changed();
    partial void OnWomansPar4Changing(int value);
    partial void OnWomansPar4Changed();
    partial void OnWomansPar5Changing(int value);
    partial void OnWomansPar5Changed();
    partial void OnWomansPar6Changing(int value);
    partial void OnWomansPar6Changed();
    partial void OnWomansPar7Changing(int value);
    partial void OnWomansPar7Changed();
    partial void OnWomansPar8Changing(int value);
    partial void OnWomansPar8Changed();
    partial void OnWomansPar9Changing(int value);
    partial void OnWomansPar9Changed();
    partial void OnWomansPar10Changing(int value);
    partial void OnWomansPar10Changed();
    partial void OnWomansPar11Changing(int value);
    partial void OnWomansPar11Changed();
    partial void OnWomansPar12Changing(int value);
    partial void OnWomansPar12Changed();
    partial void OnWomansPar13Changing(int value);
    partial void OnWomansPar13Changed();
    partial void OnWomansPar14Changing(int value);
    partial void OnWomansPar14Changed();
    partial void OnWomansPar15Changing(int value);
    partial void OnWomansPar15Changed();
    partial void OnWomansPar16Changing(int value);
    partial void OnWomansPar16Changed();
    partial void OnWomansPar17Changing(int value);
    partial void OnWomansPar17Changed();
    partial void OnWomansPar18Changing(int value);
    partial void OnWomansPar18Changed();
    partial void OnMensHandicap1Changing(int value);
    partial void OnMensHandicap1Changed();
    partial void OnMensHandicap2Changing(int value);
    partial void OnMensHandicap2Changed();
    partial void OnMensHandicap3Changing(int value);
    partial void OnMensHandicap3Changed();
    partial void OnMensHandicap4Changing(int value);
    partial void OnMensHandicap4Changed();
    partial void OnMensHandicap5Changing(int value);
    partial void OnMensHandicap5Changed();
    partial void OnMensHandicap6Changing(int value);
    partial void OnMensHandicap6Changed();
    partial void OnMensHandicap7Changing(int value);
    partial void OnMensHandicap7Changed();
    partial void OnMensHandicap8Changing(int value);
    partial void OnMensHandicap8Changed();
    partial void OnMensHandicap9Changing(int value);
    partial void OnMensHandicap9Changed();
    partial void OnMensHandicap10Changing(int value);
    partial void OnMensHandicap10Changed();
    partial void OnMensHandicap11Changing(int value);
    partial void OnMensHandicap11Changed();
    partial void OnMensHandicap12Changing(int value);
    partial void OnMensHandicap12Changed();
    partial void OnMensHandicap13Changing(int value);
    partial void OnMensHandicap13Changed();
    partial void OnMensHandicap14Changing(int value);
    partial void OnMensHandicap14Changed();
    partial void OnMensHandicap15Changing(int value);
    partial void OnMensHandicap15Changed();
    partial void OnMensHandicap16Changing(int value);
    partial void OnMensHandicap16Changed();
    partial void OnMensHandicap17Changing(int value);
    partial void OnMensHandicap17Changed();
    partial void OnMensHandicap18Changing(int value);
    partial void OnMensHandicap18Changed();
    partial void OnWomansHandicap1Changing(int value);
    partial void OnWomansHandicap1Changed();
    partial void OnWomansHandicap2Changing(int value);
    partial void OnWomansHandicap2Changed();
    partial void OnWomansHandicap3Changing(int value);
    partial void OnWomansHandicap3Changed();
    partial void OnWomansHandicap4Changing(int value);
    partial void OnWomansHandicap4Changed();
    partial void OnWomansHandicap5Changing(int value);
    partial void OnWomansHandicap5Changed();
    partial void OnWomansHandicap6Changing(int value);
    partial void OnWomansHandicap6Changed();
    partial void OnWomansHandicap7Changing(int value);
    partial void OnWomansHandicap7Changed();
    partial void OnWomansHandicap8Changing(int value);
    partial void OnWomansHandicap8Changed();
    partial void OnWomansHandicap9Changing(int value);
    partial void OnWomansHandicap9Changed();
    partial void OnWomansHandicap10Changing(int value);
    partial void OnWomansHandicap10Changed();
    partial void OnWomansHandicap11Changing(int value);
    partial void OnWomansHandicap11Changed();
    partial void OnWomansHandicap12Changing(int value);
    partial void OnWomansHandicap12Changed();
    partial void OnWomansHandicap13Changing(int value);
    partial void OnWomansHandicap13Changed();
    partial void OnWomansHandicap14Changing(int value);
    partial void OnWomansHandicap14Changed();
    partial void OnWomansHandicap15Changing(int value);
    partial void OnWomansHandicap15Changed();
    partial void OnWomansHandicap16Changing(int value);
    partial void OnWomansHandicap16Changed();
    partial void OnWomansHandicap17Changing(int value);
    partial void OnWomansHandicap17Changed();
    partial void OnWomansHandicap18Changing(int value);
    partial void OnWomansHandicap18Changed();
    #endregion
		
		public GolfCourse()
		{
			this._GolfCourseForContacts = new EntitySet<GolfCourseForContact>(new Action<GolfCourseForContact>(this.attach_GolfCourseForContacts), new Action<GolfCourseForContact>(this.detach_GolfCourseForContacts));
			this._GolfLeagueCourses = new EntitySet<GolfLeagueCourse>(new Action<GolfLeagueCourse>(this.attach_GolfLeagueCourses), new Action<GolfLeagueCourse>(this.detach_GolfLeagueCourses));
			this._GolfMatches = new EntitySet<GolfMatch>(new Action<GolfMatch>(this.attach_GolfMatches), new Action<GolfMatch>(this.detach_GolfMatches));
			this._GolfScores = new EntitySet<GolfScore>(new Action<GolfScore>(this.attach_GolfScores), new Action<GolfScore>(this.detach_GolfScores));
			this._GolfTeeInformations = new EntitySet<GolfTeeInformation>(new Action<GolfTeeInformation>(this.attach_GolfTeeInformations), new Action<GolfTeeInformation>(this.detach_GolfTeeInformations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Designer", DbType="VarChar(50)")]
		public string Designer
		{
			get
			{
				return this._Designer;
			}
			set
			{
				if ((this._Designer != value))
				{
					this.OnDesignerChanging(value);
					this.SendPropertyChanging();
					this._Designer = value;
					this.SendPropertyChanged("Designer");
					this.OnDesignerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearBuilt", DbType="Int")]
		public System.Nullable<int> YearBuilt
		{
			get
			{
				return this._YearBuilt;
			}
			set
			{
				if ((this._YearBuilt != value))
				{
					this.OnYearBuiltChanging(value);
					this.SendPropertyChanging();
					this._YearBuilt = value;
					this.SendPropertyChanged("YearBuilt");
					this.OnYearBuiltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfHoles", DbType="Int NOT NULL")]
		public int NumberOfHoles
		{
			get
			{
				return this._NumberOfHoles;
			}
			set
			{
				if ((this._NumberOfHoles != value))
				{
					this.OnNumberOfHolesChanging(value);
					this.SendPropertyChanging();
					this._NumberOfHoles = value;
					this.SendPropertyChanged("NumberOfHoles");
					this.OnNumberOfHolesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="VarChar(20)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(30)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensPar1", DbType="Int NOT NULL")]
		public int MensPar1
		{
			get
			{
				return this._MensPar1;
			}
			set
			{
				if ((this._MensPar1 != value))
				{
					this.OnMensPar1Changing(value);
					this.SendPropertyChanging();
					this._MensPar1 = value;
					this.SendPropertyChanged("MensPar1");
					this.OnMensPar1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensPar2", DbType="Int NOT NULL")]
		public int MensPar2
		{
			get
			{
				return this._MensPar2;
			}
			set
			{
				if ((this._MensPar2 != value))
				{
					this.OnMensPar2Changing(value);
					this.SendPropertyChanging();
					this._MensPar2 = value;
					this.SendPropertyChanged("MensPar2");
					this.OnMensPar2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensPar3", DbType="Int NOT NULL")]
		public int MensPar3
		{
			get
			{
				return this._MensPar3;
			}
			set
			{
				if ((this._MensPar3 != value))
				{
					this.OnMensPar3Changing(value);
					this.SendPropertyChanging();
					this._MensPar3 = value;
					this.SendPropertyChanged("MensPar3");
					this.OnMensPar3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensPar4", DbType="Int NOT NULL")]
		public int MensPar4
		{
			get
			{
				return this._MensPar4;
			}
			set
			{
				if ((this._MensPar4 != value))
				{
					this.OnMensPar4Changing(value);
					this.SendPropertyChanging();
					this._MensPar4 = value;
					this.SendPropertyChanged("MensPar4");
					this.OnMensPar4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensPar5", DbType="Int NOT NULL")]
		public int MensPar5
		{
			get
			{
				return this._MensPar5;
			}
			set
			{
				if ((this._MensPar5 != value))
				{
					this.OnMensPar5Changing(value);
					this.SendPropertyChanging();
					this._MensPar5 = value;
					this.SendPropertyChanged("MensPar5");
					this.OnMensPar5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensPar6", DbType="Int NOT NULL")]
		public int MensPar6
		{
			get
			{
				return this._MensPar6;
			}
			set
			{
				if ((this._MensPar6 != value))
				{
					this.OnMensPar6Changing(value);
					this.SendPropertyChanging();
					this._MensPar6 = value;
					this.SendPropertyChanged("MensPar6");
					this.OnMensPar6Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensPar7", DbType="Int NOT NULL")]
		public int MensPar7
		{
			get
			{
				return this._MensPar7;
			}
			set
			{
				if ((this._MensPar7 != value))
				{
					this.OnMensPar7Changing(value);
					this.SendPropertyChanging();
					this._MensPar7 = value;
					this.SendPropertyChanged("MensPar7");
					this.OnMensPar7Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensPar8", DbType="Int NOT NULL")]
		public int MensPar8
		{
			get
			{
				return this._MensPar8;
			}
			set
			{
				if ((this._MensPar8 != value))
				{
					this.OnMensPar8Changing(value);
					this.SendPropertyChanging();
					this._MensPar8 = value;
					this.SendPropertyChanged("MensPar8");
					this.OnMensPar8Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensPar9", DbType="Int NOT NULL")]
		public int MensPar9
		{
			get
			{
				return this._MensPar9;
			}
			set
			{
				if ((this._MensPar9 != value))
				{
					this.OnMensPar9Changing(value);
					this.SendPropertyChanging();
					this._MensPar9 = value;
					this.SendPropertyChanged("MensPar9");
					this.OnMensPar9Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensPar10", DbType="Int NOT NULL")]
		public int MensPar10
		{
			get
			{
				return this._MensPar10;
			}
			set
			{
				if ((this._MensPar10 != value))
				{
					this.OnMensPar10Changing(value);
					this.SendPropertyChanging();
					this._MensPar10 = value;
					this.SendPropertyChanged("MensPar10");
					this.OnMensPar10Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensPar11", DbType="Int NOT NULL")]
		public int MensPar11
		{
			get
			{
				return this._MensPar11;
			}
			set
			{
				if ((this._MensPar11 != value))
				{
					this.OnMensPar11Changing(value);
					this.SendPropertyChanging();
					this._MensPar11 = value;
					this.SendPropertyChanged("MensPar11");
					this.OnMensPar11Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensPar12", DbType="Int NOT NULL")]
		public int MensPar12
		{
			get
			{
				return this._MensPar12;
			}
			set
			{
				if ((this._MensPar12 != value))
				{
					this.OnMensPar12Changing(value);
					this.SendPropertyChanging();
					this._MensPar12 = value;
					this.SendPropertyChanged("MensPar12");
					this.OnMensPar12Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensPar13", DbType="Int NOT NULL")]
		public int MensPar13
		{
			get
			{
				return this._MensPar13;
			}
			set
			{
				if ((this._MensPar13 != value))
				{
					this.OnMensPar13Changing(value);
					this.SendPropertyChanging();
					this._MensPar13 = value;
					this.SendPropertyChanged("MensPar13");
					this.OnMensPar13Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensPar14", DbType="Int NOT NULL")]
		public int MensPar14
		{
			get
			{
				return this._MensPar14;
			}
			set
			{
				if ((this._MensPar14 != value))
				{
					this.OnMensPar14Changing(value);
					this.SendPropertyChanging();
					this._MensPar14 = value;
					this.SendPropertyChanged("MensPar14");
					this.OnMensPar14Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensPar15", DbType="Int NOT NULL")]
		public int MensPar15
		{
			get
			{
				return this._MensPar15;
			}
			set
			{
				if ((this._MensPar15 != value))
				{
					this.OnMensPar15Changing(value);
					this.SendPropertyChanging();
					this._MensPar15 = value;
					this.SendPropertyChanged("MensPar15");
					this.OnMensPar15Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensPar16", DbType="Int NOT NULL")]
		public int MensPar16
		{
			get
			{
				return this._MensPar16;
			}
			set
			{
				if ((this._MensPar16 != value))
				{
					this.OnMensPar16Changing(value);
					this.SendPropertyChanging();
					this._MensPar16 = value;
					this.SendPropertyChanged("MensPar16");
					this.OnMensPar16Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensPar17", DbType="Int NOT NULL")]
		public int MensPar17
		{
			get
			{
				return this._MensPar17;
			}
			set
			{
				if ((this._MensPar17 != value))
				{
					this.OnMensPar17Changing(value);
					this.SendPropertyChanging();
					this._MensPar17 = value;
					this.SendPropertyChanged("MensPar17");
					this.OnMensPar17Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensPar18", DbType="Int NOT NULL")]
		public int MensPar18
		{
			get
			{
				return this._MensPar18;
			}
			set
			{
				if ((this._MensPar18 != value))
				{
					this.OnMensPar18Changing(value);
					this.SendPropertyChanging();
					this._MensPar18 = value;
					this.SendPropertyChanged("MensPar18");
					this.OnMensPar18Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansPar1", DbType="Int NOT NULL")]
		public int WomansPar1
		{
			get
			{
				return this._WomansPar1;
			}
			set
			{
				if ((this._WomansPar1 != value))
				{
					this.OnWomansPar1Changing(value);
					this.SendPropertyChanging();
					this._WomansPar1 = value;
					this.SendPropertyChanged("WomansPar1");
					this.OnWomansPar1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansPar2", DbType="Int NOT NULL")]
		public int WomansPar2
		{
			get
			{
				return this._WomansPar2;
			}
			set
			{
				if ((this._WomansPar2 != value))
				{
					this.OnWomansPar2Changing(value);
					this.SendPropertyChanging();
					this._WomansPar2 = value;
					this.SendPropertyChanged("WomansPar2");
					this.OnWomansPar2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansPar3", DbType="Int NOT NULL")]
		public int WomansPar3
		{
			get
			{
				return this._WomansPar3;
			}
			set
			{
				if ((this._WomansPar3 != value))
				{
					this.OnWomansPar3Changing(value);
					this.SendPropertyChanging();
					this._WomansPar3 = value;
					this.SendPropertyChanged("WomansPar3");
					this.OnWomansPar3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansPar4", DbType="Int NOT NULL")]
		public int WomansPar4
		{
			get
			{
				return this._WomansPar4;
			}
			set
			{
				if ((this._WomansPar4 != value))
				{
					this.OnWomansPar4Changing(value);
					this.SendPropertyChanging();
					this._WomansPar4 = value;
					this.SendPropertyChanged("WomansPar4");
					this.OnWomansPar4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansPar5", DbType="Int NOT NULL")]
		public int WomansPar5
		{
			get
			{
				return this._WomansPar5;
			}
			set
			{
				if ((this._WomansPar5 != value))
				{
					this.OnWomansPar5Changing(value);
					this.SendPropertyChanging();
					this._WomansPar5 = value;
					this.SendPropertyChanged("WomansPar5");
					this.OnWomansPar5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansPar6", DbType="Int NOT NULL")]
		public int WomansPar6
		{
			get
			{
				return this._WomansPar6;
			}
			set
			{
				if ((this._WomansPar6 != value))
				{
					this.OnWomansPar6Changing(value);
					this.SendPropertyChanging();
					this._WomansPar6 = value;
					this.SendPropertyChanged("WomansPar6");
					this.OnWomansPar6Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansPar7", DbType="Int NOT NULL")]
		public int WomansPar7
		{
			get
			{
				return this._WomansPar7;
			}
			set
			{
				if ((this._WomansPar7 != value))
				{
					this.OnWomansPar7Changing(value);
					this.SendPropertyChanging();
					this._WomansPar7 = value;
					this.SendPropertyChanged("WomansPar7");
					this.OnWomansPar7Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansPar8", DbType="Int NOT NULL")]
		public int WomansPar8
		{
			get
			{
				return this._WomansPar8;
			}
			set
			{
				if ((this._WomansPar8 != value))
				{
					this.OnWomansPar8Changing(value);
					this.SendPropertyChanging();
					this._WomansPar8 = value;
					this.SendPropertyChanged("WomansPar8");
					this.OnWomansPar8Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansPar9", DbType="Int NOT NULL")]
		public int WomansPar9
		{
			get
			{
				return this._WomansPar9;
			}
			set
			{
				if ((this._WomansPar9 != value))
				{
					this.OnWomansPar9Changing(value);
					this.SendPropertyChanging();
					this._WomansPar9 = value;
					this.SendPropertyChanged("WomansPar9");
					this.OnWomansPar9Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansPar10", DbType="Int NOT NULL")]
		public int WomansPar10
		{
			get
			{
				return this._WomansPar10;
			}
			set
			{
				if ((this._WomansPar10 != value))
				{
					this.OnWomansPar10Changing(value);
					this.SendPropertyChanging();
					this._WomansPar10 = value;
					this.SendPropertyChanged("WomansPar10");
					this.OnWomansPar10Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansPar11", DbType="Int NOT NULL")]
		public int WomansPar11
		{
			get
			{
				return this._WomansPar11;
			}
			set
			{
				if ((this._WomansPar11 != value))
				{
					this.OnWomansPar11Changing(value);
					this.SendPropertyChanging();
					this._WomansPar11 = value;
					this.SendPropertyChanged("WomansPar11");
					this.OnWomansPar11Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansPar12", DbType="Int NOT NULL")]
		public int WomansPar12
		{
			get
			{
				return this._WomansPar12;
			}
			set
			{
				if ((this._WomansPar12 != value))
				{
					this.OnWomansPar12Changing(value);
					this.SendPropertyChanging();
					this._WomansPar12 = value;
					this.SendPropertyChanged("WomansPar12");
					this.OnWomansPar12Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansPar13", DbType="Int NOT NULL")]
		public int WomansPar13
		{
			get
			{
				return this._WomansPar13;
			}
			set
			{
				if ((this._WomansPar13 != value))
				{
					this.OnWomansPar13Changing(value);
					this.SendPropertyChanging();
					this._WomansPar13 = value;
					this.SendPropertyChanged("WomansPar13");
					this.OnWomansPar13Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansPar14", DbType="Int NOT NULL")]
		public int WomansPar14
		{
			get
			{
				return this._WomansPar14;
			}
			set
			{
				if ((this._WomansPar14 != value))
				{
					this.OnWomansPar14Changing(value);
					this.SendPropertyChanging();
					this._WomansPar14 = value;
					this.SendPropertyChanged("WomansPar14");
					this.OnWomansPar14Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansPar15", DbType="Int NOT NULL")]
		public int WomansPar15
		{
			get
			{
				return this._WomansPar15;
			}
			set
			{
				if ((this._WomansPar15 != value))
				{
					this.OnWomansPar15Changing(value);
					this.SendPropertyChanging();
					this._WomansPar15 = value;
					this.SendPropertyChanged("WomansPar15");
					this.OnWomansPar15Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansPar16", DbType="Int NOT NULL")]
		public int WomansPar16
		{
			get
			{
				return this._WomansPar16;
			}
			set
			{
				if ((this._WomansPar16 != value))
				{
					this.OnWomansPar16Changing(value);
					this.SendPropertyChanging();
					this._WomansPar16 = value;
					this.SendPropertyChanged("WomansPar16");
					this.OnWomansPar16Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansPar17", DbType="Int NOT NULL")]
		public int WomansPar17
		{
			get
			{
				return this._WomansPar17;
			}
			set
			{
				if ((this._WomansPar17 != value))
				{
					this.OnWomansPar17Changing(value);
					this.SendPropertyChanging();
					this._WomansPar17 = value;
					this.SendPropertyChanged("WomansPar17");
					this.OnWomansPar17Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansPar18", DbType="Int NOT NULL")]
		public int WomansPar18
		{
			get
			{
				return this._WomansPar18;
			}
			set
			{
				if ((this._WomansPar18 != value))
				{
					this.OnWomansPar18Changing(value);
					this.SendPropertyChanging();
					this._WomansPar18 = value;
					this.SendPropertyChanged("WomansPar18");
					this.OnWomansPar18Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensHandicap1", DbType="Int NOT NULL")]
		public int MensHandicap1
		{
			get
			{
				return this._MensHandicap1;
			}
			set
			{
				if ((this._MensHandicap1 != value))
				{
					this.OnMensHandicap1Changing(value);
					this.SendPropertyChanging();
					this._MensHandicap1 = value;
					this.SendPropertyChanged("MensHandicap1");
					this.OnMensHandicap1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensHandicap2", DbType="Int NOT NULL")]
		public int MensHandicap2
		{
			get
			{
				return this._MensHandicap2;
			}
			set
			{
				if ((this._MensHandicap2 != value))
				{
					this.OnMensHandicap2Changing(value);
					this.SendPropertyChanging();
					this._MensHandicap2 = value;
					this.SendPropertyChanged("MensHandicap2");
					this.OnMensHandicap2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensHandicap3", DbType="Int NOT NULL")]
		public int MensHandicap3
		{
			get
			{
				return this._MensHandicap3;
			}
			set
			{
				if ((this._MensHandicap3 != value))
				{
					this.OnMensHandicap3Changing(value);
					this.SendPropertyChanging();
					this._MensHandicap3 = value;
					this.SendPropertyChanged("MensHandicap3");
					this.OnMensHandicap3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensHandicap4", DbType="Int NOT NULL")]
		public int MensHandicap4
		{
			get
			{
				return this._MensHandicap4;
			}
			set
			{
				if ((this._MensHandicap4 != value))
				{
					this.OnMensHandicap4Changing(value);
					this.SendPropertyChanging();
					this._MensHandicap4 = value;
					this.SendPropertyChanged("MensHandicap4");
					this.OnMensHandicap4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensHandicap5", DbType="Int NOT NULL")]
		public int MensHandicap5
		{
			get
			{
				return this._MensHandicap5;
			}
			set
			{
				if ((this._MensHandicap5 != value))
				{
					this.OnMensHandicap5Changing(value);
					this.SendPropertyChanging();
					this._MensHandicap5 = value;
					this.SendPropertyChanged("MensHandicap5");
					this.OnMensHandicap5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensHandicap6", DbType="Int NOT NULL")]
		public int MensHandicap6
		{
			get
			{
				return this._MensHandicap6;
			}
			set
			{
				if ((this._MensHandicap6 != value))
				{
					this.OnMensHandicap6Changing(value);
					this.SendPropertyChanging();
					this._MensHandicap6 = value;
					this.SendPropertyChanged("MensHandicap6");
					this.OnMensHandicap6Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensHandicap7", DbType="Int NOT NULL")]
		public int MensHandicap7
		{
			get
			{
				return this._MensHandicap7;
			}
			set
			{
				if ((this._MensHandicap7 != value))
				{
					this.OnMensHandicap7Changing(value);
					this.SendPropertyChanging();
					this._MensHandicap7 = value;
					this.SendPropertyChanged("MensHandicap7");
					this.OnMensHandicap7Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensHandicap8", DbType="Int NOT NULL")]
		public int MensHandicap8
		{
			get
			{
				return this._MensHandicap8;
			}
			set
			{
				if ((this._MensHandicap8 != value))
				{
					this.OnMensHandicap8Changing(value);
					this.SendPropertyChanging();
					this._MensHandicap8 = value;
					this.SendPropertyChanged("MensHandicap8");
					this.OnMensHandicap8Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensHandicap9", DbType="Int NOT NULL")]
		public int MensHandicap9
		{
			get
			{
				return this._MensHandicap9;
			}
			set
			{
				if ((this._MensHandicap9 != value))
				{
					this.OnMensHandicap9Changing(value);
					this.SendPropertyChanging();
					this._MensHandicap9 = value;
					this.SendPropertyChanged("MensHandicap9");
					this.OnMensHandicap9Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensHandicap10", DbType="Int NOT NULL")]
		public int MensHandicap10
		{
			get
			{
				return this._MensHandicap10;
			}
			set
			{
				if ((this._MensHandicap10 != value))
				{
					this.OnMensHandicap10Changing(value);
					this.SendPropertyChanging();
					this._MensHandicap10 = value;
					this.SendPropertyChanged("MensHandicap10");
					this.OnMensHandicap10Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensHandicap11", DbType="Int NOT NULL")]
		public int MensHandicap11
		{
			get
			{
				return this._MensHandicap11;
			}
			set
			{
				if ((this._MensHandicap11 != value))
				{
					this.OnMensHandicap11Changing(value);
					this.SendPropertyChanging();
					this._MensHandicap11 = value;
					this.SendPropertyChanged("MensHandicap11");
					this.OnMensHandicap11Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensHandicap12", DbType="Int NOT NULL")]
		public int MensHandicap12
		{
			get
			{
				return this._MensHandicap12;
			}
			set
			{
				if ((this._MensHandicap12 != value))
				{
					this.OnMensHandicap12Changing(value);
					this.SendPropertyChanging();
					this._MensHandicap12 = value;
					this.SendPropertyChanged("MensHandicap12");
					this.OnMensHandicap12Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensHandicap13", DbType="Int NOT NULL")]
		public int MensHandicap13
		{
			get
			{
				return this._MensHandicap13;
			}
			set
			{
				if ((this._MensHandicap13 != value))
				{
					this.OnMensHandicap13Changing(value);
					this.SendPropertyChanging();
					this._MensHandicap13 = value;
					this.SendPropertyChanged("MensHandicap13");
					this.OnMensHandicap13Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensHandicap14", DbType="Int NOT NULL")]
		public int MensHandicap14
		{
			get
			{
				return this._MensHandicap14;
			}
			set
			{
				if ((this._MensHandicap14 != value))
				{
					this.OnMensHandicap14Changing(value);
					this.SendPropertyChanging();
					this._MensHandicap14 = value;
					this.SendPropertyChanged("MensHandicap14");
					this.OnMensHandicap14Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensHandicap15", DbType="Int NOT NULL")]
		public int MensHandicap15
		{
			get
			{
				return this._MensHandicap15;
			}
			set
			{
				if ((this._MensHandicap15 != value))
				{
					this.OnMensHandicap15Changing(value);
					this.SendPropertyChanging();
					this._MensHandicap15 = value;
					this.SendPropertyChanged("MensHandicap15");
					this.OnMensHandicap15Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensHandicap16", DbType="Int NOT NULL")]
		public int MensHandicap16
		{
			get
			{
				return this._MensHandicap16;
			}
			set
			{
				if ((this._MensHandicap16 != value))
				{
					this.OnMensHandicap16Changing(value);
					this.SendPropertyChanging();
					this._MensHandicap16 = value;
					this.SendPropertyChanged("MensHandicap16");
					this.OnMensHandicap16Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensHandicap17", DbType="Int NOT NULL")]
		public int MensHandicap17
		{
			get
			{
				return this._MensHandicap17;
			}
			set
			{
				if ((this._MensHandicap17 != value))
				{
					this.OnMensHandicap17Changing(value);
					this.SendPropertyChanging();
					this._MensHandicap17 = value;
					this.SendPropertyChanged("MensHandicap17");
					this.OnMensHandicap17Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensHandicap18", DbType="Int NOT NULL")]
		public int MensHandicap18
		{
			get
			{
				return this._MensHandicap18;
			}
			set
			{
				if ((this._MensHandicap18 != value))
				{
					this.OnMensHandicap18Changing(value);
					this.SendPropertyChanging();
					this._MensHandicap18 = value;
					this.SendPropertyChanged("MensHandicap18");
					this.OnMensHandicap18Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansHandicap1", DbType="Int NOT NULL")]
		public int WomansHandicap1
		{
			get
			{
				return this._WomansHandicap1;
			}
			set
			{
				if ((this._WomansHandicap1 != value))
				{
					this.OnWomansHandicap1Changing(value);
					this.SendPropertyChanging();
					this._WomansHandicap1 = value;
					this.SendPropertyChanged("WomansHandicap1");
					this.OnWomansHandicap1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansHandicap2", DbType="Int NOT NULL")]
		public int WomansHandicap2
		{
			get
			{
				return this._WomansHandicap2;
			}
			set
			{
				if ((this._WomansHandicap2 != value))
				{
					this.OnWomansHandicap2Changing(value);
					this.SendPropertyChanging();
					this._WomansHandicap2 = value;
					this.SendPropertyChanged("WomansHandicap2");
					this.OnWomansHandicap2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansHandicap3", DbType="Int NOT NULL")]
		public int WomansHandicap3
		{
			get
			{
				return this._WomansHandicap3;
			}
			set
			{
				if ((this._WomansHandicap3 != value))
				{
					this.OnWomansHandicap3Changing(value);
					this.SendPropertyChanging();
					this._WomansHandicap3 = value;
					this.SendPropertyChanged("WomansHandicap3");
					this.OnWomansHandicap3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansHandicap4", DbType="Int NOT NULL")]
		public int WomansHandicap4
		{
			get
			{
				return this._WomansHandicap4;
			}
			set
			{
				if ((this._WomansHandicap4 != value))
				{
					this.OnWomansHandicap4Changing(value);
					this.SendPropertyChanging();
					this._WomansHandicap4 = value;
					this.SendPropertyChanged("WomansHandicap4");
					this.OnWomansHandicap4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansHandicap5", DbType="Int NOT NULL")]
		public int WomansHandicap5
		{
			get
			{
				return this._WomansHandicap5;
			}
			set
			{
				if ((this._WomansHandicap5 != value))
				{
					this.OnWomansHandicap5Changing(value);
					this.SendPropertyChanging();
					this._WomansHandicap5 = value;
					this.SendPropertyChanged("WomansHandicap5");
					this.OnWomansHandicap5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansHandicap6", DbType="Int NOT NULL")]
		public int WomansHandicap6
		{
			get
			{
				return this._WomansHandicap6;
			}
			set
			{
				if ((this._WomansHandicap6 != value))
				{
					this.OnWomansHandicap6Changing(value);
					this.SendPropertyChanging();
					this._WomansHandicap6 = value;
					this.SendPropertyChanged("WomansHandicap6");
					this.OnWomansHandicap6Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansHandicap7", DbType="Int NOT NULL")]
		public int WomansHandicap7
		{
			get
			{
				return this._WomansHandicap7;
			}
			set
			{
				if ((this._WomansHandicap7 != value))
				{
					this.OnWomansHandicap7Changing(value);
					this.SendPropertyChanging();
					this._WomansHandicap7 = value;
					this.SendPropertyChanged("WomansHandicap7");
					this.OnWomansHandicap7Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansHandicap8", DbType="Int NOT NULL")]
		public int WomansHandicap8
		{
			get
			{
				return this._WomansHandicap8;
			}
			set
			{
				if ((this._WomansHandicap8 != value))
				{
					this.OnWomansHandicap8Changing(value);
					this.SendPropertyChanging();
					this._WomansHandicap8 = value;
					this.SendPropertyChanged("WomansHandicap8");
					this.OnWomansHandicap8Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansHandicap9", DbType="Int NOT NULL")]
		public int WomansHandicap9
		{
			get
			{
				return this._WomansHandicap9;
			}
			set
			{
				if ((this._WomansHandicap9 != value))
				{
					this.OnWomansHandicap9Changing(value);
					this.SendPropertyChanging();
					this._WomansHandicap9 = value;
					this.SendPropertyChanged("WomansHandicap9");
					this.OnWomansHandicap9Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansHandicap10", DbType="Int NOT NULL")]
		public int WomansHandicap10
		{
			get
			{
				return this._WomansHandicap10;
			}
			set
			{
				if ((this._WomansHandicap10 != value))
				{
					this.OnWomansHandicap10Changing(value);
					this.SendPropertyChanging();
					this._WomansHandicap10 = value;
					this.SendPropertyChanged("WomansHandicap10");
					this.OnWomansHandicap10Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansHandicap11", DbType="Int NOT NULL")]
		public int WomansHandicap11
		{
			get
			{
				return this._WomansHandicap11;
			}
			set
			{
				if ((this._WomansHandicap11 != value))
				{
					this.OnWomansHandicap11Changing(value);
					this.SendPropertyChanging();
					this._WomansHandicap11 = value;
					this.SendPropertyChanged("WomansHandicap11");
					this.OnWomansHandicap11Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansHandicap12", DbType="Int NOT NULL")]
		public int WomansHandicap12
		{
			get
			{
				return this._WomansHandicap12;
			}
			set
			{
				if ((this._WomansHandicap12 != value))
				{
					this.OnWomansHandicap12Changing(value);
					this.SendPropertyChanging();
					this._WomansHandicap12 = value;
					this.SendPropertyChanged("WomansHandicap12");
					this.OnWomansHandicap12Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansHandicap13", DbType="Int NOT NULL")]
		public int WomansHandicap13
		{
			get
			{
				return this._WomansHandicap13;
			}
			set
			{
				if ((this._WomansHandicap13 != value))
				{
					this.OnWomansHandicap13Changing(value);
					this.SendPropertyChanging();
					this._WomansHandicap13 = value;
					this.SendPropertyChanged("WomansHandicap13");
					this.OnWomansHandicap13Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansHandicap14", DbType="Int NOT NULL")]
		public int WomansHandicap14
		{
			get
			{
				return this._WomansHandicap14;
			}
			set
			{
				if ((this._WomansHandicap14 != value))
				{
					this.OnWomansHandicap14Changing(value);
					this.SendPropertyChanging();
					this._WomansHandicap14 = value;
					this.SendPropertyChanged("WomansHandicap14");
					this.OnWomansHandicap14Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansHandicap15", DbType="Int NOT NULL")]
		public int WomansHandicap15
		{
			get
			{
				return this._WomansHandicap15;
			}
			set
			{
				if ((this._WomansHandicap15 != value))
				{
					this.OnWomansHandicap15Changing(value);
					this.SendPropertyChanging();
					this._WomansHandicap15 = value;
					this.SendPropertyChanged("WomansHandicap15");
					this.OnWomansHandicap15Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansHandicap16", DbType="Int NOT NULL")]
		public int WomansHandicap16
		{
			get
			{
				return this._WomansHandicap16;
			}
			set
			{
				if ((this._WomansHandicap16 != value))
				{
					this.OnWomansHandicap16Changing(value);
					this.SendPropertyChanging();
					this._WomansHandicap16 = value;
					this.SendPropertyChanged("WomansHandicap16");
					this.OnWomansHandicap16Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansHandicap17", DbType="Int NOT NULL")]
		public int WomansHandicap17
		{
			get
			{
				return this._WomansHandicap17;
			}
			set
			{
				if ((this._WomansHandicap17 != value))
				{
					this.OnWomansHandicap17Changing(value);
					this.SendPropertyChanging();
					this._WomansHandicap17 = value;
					this.SendPropertyChanged("WomansHandicap17");
					this.OnWomansHandicap17Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansHandicap18", DbType="Int NOT NULL")]
		public int WomansHandicap18
		{
			get
			{
				return this._WomansHandicap18;
			}
			set
			{
				if ((this._WomansHandicap18 != value))
				{
					this.OnWomansHandicap18Changing(value);
					this.SendPropertyChanging();
					this._WomansHandicap18 = value;
					this.SendPropertyChanged("WomansHandicap18");
					this.OnWomansHandicap18Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfCourse_GolfCourseForContact", Storage="_GolfCourseForContacts", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<GolfCourseForContact> GolfCourseForContacts
		{
			get
			{
				return this._GolfCourseForContacts;
			}
			set
			{
				this._GolfCourseForContacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfCourse_GolfLeagueCourse", Storage="_GolfLeagueCourses", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<GolfLeagueCourse> GolfLeagueCourses
		{
			get
			{
				return this._GolfLeagueCourses;
			}
			set
			{
				this._GolfLeagueCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfCourse_GolfMatch", Storage="_GolfMatches", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<GolfMatch> GolfMatches
		{
			get
			{
				return this._GolfMatches;
			}
			set
			{
				this._GolfMatches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfCourse_GolfScore", Storage="_GolfScores", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<GolfScore> GolfScores
		{
			get
			{
				return this._GolfScores;
			}
			set
			{
				this._GolfScores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfCourse_GolfTeeInformation", Storage="_GolfTeeInformations", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<GolfTeeInformation> GolfTeeInformations
		{
			get
			{
				return this._GolfTeeInformations;
			}
			set
			{
				this._GolfTeeInformations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GolfCourseForContacts(GolfCourseForContact entity)
		{
			this.SendPropertyChanging();
			entity.GolfCourse = this;
		}
		
		private void detach_GolfCourseForContacts(GolfCourseForContact entity)
		{
			this.SendPropertyChanging();
			entity.GolfCourse = null;
		}
		
		private void attach_GolfLeagueCourses(GolfLeagueCourse entity)
		{
			this.SendPropertyChanging();
			entity.GolfCourse = this;
		}
		
		private void detach_GolfLeagueCourses(GolfLeagueCourse entity)
		{
			this.SendPropertyChanging();
			entity.GolfCourse = null;
		}
		
		private void attach_GolfMatches(GolfMatch entity)
		{
			this.SendPropertyChanging();
			entity.GolfCourse = this;
		}
		
		private void detach_GolfMatches(GolfMatch entity)
		{
			this.SendPropertyChanging();
			entity.GolfCourse = null;
		}
		
		private void attach_GolfScores(GolfScore entity)
		{
			this.SendPropertyChanging();
			entity.GolfCourse = this;
		}
		
		private void detach_GolfScores(GolfScore entity)
		{
			this.SendPropertyChanging();
			entity.GolfCourse = null;
		}
		
		private void attach_GolfTeeInformations(GolfTeeInformation entity)
		{
			this.SendPropertyChanging();
			entity.GolfCourse = this;
		}
		
		private void detach_GolfTeeInformations(GolfTeeInformation entity)
		{
			this.SendPropertyChanging();
			entity.GolfCourse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkoutRegistration")]
	public partial class WorkoutRegistration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private string _EMail;
		
		private int _Age;
		
		private string _Phone1;
		
		private string _Phone2;
		
		private string _Phone3;
		
		private string _Phone4;
		
		private string _Positions;
		
		private bool _IsManager;
		
		private long _WorkoutId;
		
		private System.DateTime _DateRegistered;
		
		private string _WhereHeard;
		
		private EntityRef<WorkoutAnnouncement> _WorkoutAnnouncement;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEMailChanging(string value);
    partial void OnEMailChanged();
    partial void OnAgeChanging(int value);
    partial void OnAgeChanged();
    partial void OnPhone1Changing(string value);
    partial void OnPhone1Changed();
    partial void OnPhone2Changing(string value);
    partial void OnPhone2Changed();
    partial void OnPhone3Changing(string value);
    partial void OnPhone3Changed();
    partial void OnPhone4Changing(string value);
    partial void OnPhone4Changed();
    partial void OnPositionsChanging(string value);
    partial void OnPositionsChanged();
    partial void OnIsManagerChanging(bool value);
    partial void OnIsManagerChanged();
    partial void OnWorkoutIdChanging(long value);
    partial void OnWorkoutIdChanged();
    partial void OnDateRegisteredChanging(System.DateTime value);
    partial void OnDateRegisteredChanged();
    partial void OnWhereHeardChanging(string value);
    partial void OnWhereHeardChanged();
    #endregion
		
		public WorkoutRegistration()
		{
			this._WorkoutAnnouncement = default(EntityRef<WorkoutAnnouncement>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMail", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int NOT NULL")]
		public int Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone1", DbType="VarChar(14) NOT NULL", CanBeNull=false)]
		public string Phone1
		{
			get
			{
				return this._Phone1;
			}
			set
			{
				if ((this._Phone1 != value))
				{
					this.OnPhone1Changing(value);
					this.SendPropertyChanging();
					this._Phone1 = value;
					this.SendPropertyChanged("Phone1");
					this.OnPhone1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone2", DbType="VarChar(14) NOT NULL", CanBeNull=false)]
		public string Phone2
		{
			get
			{
				return this._Phone2;
			}
			set
			{
				if ((this._Phone2 != value))
				{
					this.OnPhone2Changing(value);
					this.SendPropertyChanging();
					this._Phone2 = value;
					this.SendPropertyChanged("Phone2");
					this.OnPhone2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone3", DbType="VarChar(14) NOT NULL", CanBeNull=false)]
		public string Phone3
		{
			get
			{
				return this._Phone3;
			}
			set
			{
				if ((this._Phone3 != value))
				{
					this.OnPhone3Changing(value);
					this.SendPropertyChanging();
					this._Phone3 = value;
					this.SendPropertyChanged("Phone3");
					this.OnPhone3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone4", DbType="VarChar(14) NOT NULL", CanBeNull=false)]
		public string Phone4
		{
			get
			{
				return this._Phone4;
			}
			set
			{
				if ((this._Phone4 != value))
				{
					this.OnPhone4Changing(value);
					this.SendPropertyChanging();
					this._Phone4 = value;
					this.SendPropertyChanged("Phone4");
					this.OnPhone4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Positions", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Positions
		{
			get
			{
				return this._Positions;
			}
			set
			{
				if ((this._Positions != value))
				{
					this.OnPositionsChanging(value);
					this.SendPropertyChanging();
					this._Positions = value;
					this.SendPropertyChanged("Positions");
					this.OnPositionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsManager", DbType="Bit NOT NULL")]
		public bool IsManager
		{
			get
			{
				return this._IsManager;
			}
			set
			{
				if ((this._IsManager != value))
				{
					this.OnIsManagerChanging(value);
					this.SendPropertyChanging();
					this._IsManager = value;
					this.SendPropertyChanged("IsManager");
					this.OnIsManagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkoutId", DbType="BigInt NOT NULL")]
		public long WorkoutId
		{
			get
			{
				return this._WorkoutId;
			}
			set
			{
				if ((this._WorkoutId != value))
				{
					if (this._WorkoutAnnouncement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkoutIdChanging(value);
					this.SendPropertyChanging();
					this._WorkoutId = value;
					this.SendPropertyChanged("WorkoutId");
					this.OnWorkoutIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateRegistered", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateRegistered
		{
			get
			{
				return this._DateRegistered;
			}
			set
			{
				if ((this._DateRegistered != value))
				{
					this.OnDateRegisteredChanging(value);
					this.SendPropertyChanging();
					this._DateRegistered = value;
					this.SendPropertyChanged("DateRegistered");
					this.OnDateRegisteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WhereHeard", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string WhereHeard
		{
			get
			{
				return this._WhereHeard;
			}
			set
			{
				if ((this._WhereHeard != value))
				{
					this.OnWhereHeardChanging(value);
					this.SendPropertyChanging();
					this._WhereHeard = value;
					this.SendPropertyChanged("WhereHeard");
					this.OnWhereHeardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkoutAnnouncement_WorkoutRegistration", Storage="_WorkoutAnnouncement", ThisKey="WorkoutId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public WorkoutAnnouncement WorkoutAnnouncement
		{
			get
			{
				return this._WorkoutAnnouncement.Entity;
			}
			set
			{
				WorkoutAnnouncement previousValue = this._WorkoutAnnouncement.Entity;
				if (((previousValue != value) 
							|| (this._WorkoutAnnouncement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkoutAnnouncement.Entity = null;
						previousValue.WorkoutRegistrations.Remove(this);
					}
					this._WorkoutAnnouncement.Entity = value;
					if ((value != null))
					{
						value.WorkoutRegistrations.Add(this);
						this._WorkoutId = value.Id;
					}
					else
					{
						this._WorkoutId = default(long);
					}
					this.SendPropertyChanged("WorkoutAnnouncement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GolfCourseForContact")]
	public partial class GolfCourseForContact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ContactId;
		
		private long _CourseId;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<GolfCourse> _GolfCourse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnContactIdChanging(long value);
    partial void OnContactIdChanged();
    partial void OnCourseIdChanging(long value);
    partial void OnCourseIdChanged();
    #endregion
		
		public GolfCourseForContact()
		{
			this._Contact = default(EntityRef<Contact>);
			this._GolfCourse = default(EntityRef<GolfCourse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="BigInt NOT NULL")]
		public long ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="BigInt NOT NULL")]
		public long CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._GolfCourse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_GolfCourseForContact", Storage="_Contact", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.GolfCourseForContacts.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.GolfCourseForContacts.Add(this);
						this._ContactId = value.Id;
					}
					else
					{
						this._ContactId = default(long);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfCourse_GolfCourseForContact", Storage="_GolfCourse", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true)]
		public GolfCourse GolfCourse
		{
			get
			{
				return this._GolfCourse.Entity;
			}
			set
			{
				GolfCourse previousValue = this._GolfCourse.Entity;
				if (((previousValue != value) 
							|| (this._GolfCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GolfCourse.Entity = null;
						previousValue.GolfCourseForContacts.Remove(this);
					}
					this._GolfCourse.Entity = value;
					if ((value != null))
					{
						value.GolfCourseForContacts.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(long);
					}
					this.SendPropertyChanged("GolfCourse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GolferStatsConfiguration")]
	public partial class GolferStatsConfiguration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ContactId;
		
		private long _StatId;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<GolfStatDef> _GolfStatDef;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnContactIdChanging(long value);
    partial void OnContactIdChanged();
    partial void OnStatIdChanging(long value);
    partial void OnStatIdChanged();
    #endregion
		
		public GolferStatsConfiguration()
		{
			this._Contact = default(EntityRef<Contact>);
			this._GolfStatDef = default(EntityRef<GolfStatDef>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="BigInt NOT NULL")]
		public long ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatId", DbType="BigInt NOT NULL")]
		public long StatId
		{
			get
			{
				return this._StatId;
			}
			set
			{
				if ((this._StatId != value))
				{
					if (this._GolfStatDef.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatIdChanging(value);
					this.SendPropertyChanging();
					this._StatId = value;
					this.SendPropertyChanged("StatId");
					this.OnStatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_GolferStatsConfiguration", Storage="_Contact", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.GolferStatsConfigurations.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.GolferStatsConfigurations.Add(this);
						this._ContactId = value.Id;
					}
					else
					{
						this._ContactId = default(long);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfStatDef_GolferStatsConfiguration", Storage="_GolfStatDef", ThisKey="StatId", OtherKey="Id", IsForeignKey=true)]
		public GolfStatDef GolfStatDef
		{
			get
			{
				return this._GolfStatDef.Entity;
			}
			set
			{
				GolfStatDef previousValue = this._GolfStatDef.Entity;
				if (((previousValue != value) 
							|| (this._GolfStatDef.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GolfStatDef.Entity = null;
						previousValue.GolferStatsConfigurations.Remove(this);
					}
					this._GolfStatDef.Entity = value;
					if ((value != null))
					{
						value.GolferStatsConfigurations.Add(this);
						this._StatId = value.Id;
					}
					else
					{
						this._StatId = default(long);
					}
					this.SendPropertyChanged("GolfStatDef");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GolferStatsValue")]
	public partial class GolferStatsValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ScoreId;
		
		private long _ContactId;
		
		private int _HoleNo;
		
		private string _Value;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<GolfScore> _GolfScore;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnScoreIdChanging(long value);
    partial void OnScoreIdChanged();
    partial void OnContactIdChanging(long value);
    partial void OnContactIdChanged();
    partial void OnHoleNoChanging(int value);
    partial void OnHoleNoChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public GolferStatsValue()
		{
			this._Contact = default(EntityRef<Contact>);
			this._GolfScore = default(EntityRef<GolfScore>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreId", DbType="BigInt NOT NULL")]
		public long ScoreId
		{
			get
			{
				return this._ScoreId;
			}
			set
			{
				if ((this._ScoreId != value))
				{
					if (this._GolfScore.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScoreIdChanging(value);
					this.SendPropertyChanging();
					this._ScoreId = value;
					this.SendPropertyChanged("ScoreId");
					this.OnScoreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="BigInt NOT NULL")]
		public long ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleNo", DbType="Int NOT NULL")]
		public int HoleNo
		{
			get
			{
				return this._HoleNo;
			}
			set
			{
				if ((this._HoleNo != value))
				{
					this.OnHoleNoChanging(value);
					this.SendPropertyChanging();
					this._HoleNo = value;
					this.SendPropertyChanged("HoleNo");
					this.OnHoleNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_GolferStatsValue", Storage="_Contact", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.GolferStatsValues.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.GolferStatsValues.Add(this);
						this._ContactId = value.Id;
					}
					else
					{
						this._ContactId = default(long);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfScore_GolferStatsValue", Storage="_GolfScore", ThisKey="ScoreId", OtherKey="Id", IsForeignKey=true)]
		public GolfScore GolfScore
		{
			get
			{
				return this._GolfScore.Entity;
			}
			set
			{
				GolfScore previousValue = this._GolfScore.Entity;
				if (((previousValue != value) 
							|| (this._GolfScore.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GolfScore.Entity = null;
						previousValue.GolferStatsValues.Remove(this);
					}
					this._GolfScore.Entity = value;
					if ((value != null))
					{
						value.GolferStatsValues.Add(this);
						this._ScoreId = value.Id;
					}
					else
					{
						this._ScoreId = default(long);
					}
					this.SendPropertyChanged("GolfScore");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GolfLeagueCourses")]
	public partial class GolfLeagueCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AccountId;
		
		private long _CourseId;
		
		private System.Nullable<long> _DefaultMensTee;
		
		private System.Nullable<long> _DefaultWomansTee;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<GolfCourse> _GolfCourse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnCourseIdChanging(long value);
    partial void OnCourseIdChanged();
    partial void OnDefaultMensTeeChanging(System.Nullable<long> value);
    partial void OnDefaultMensTeeChanged();
    partial void OnDefaultWomansTeeChanging(System.Nullable<long> value);
    partial void OnDefaultWomansTeeChanged();
    #endregion
		
		public GolfLeagueCourse()
		{
			this._Account = default(EntityRef<Account>);
			this._GolfCourse = default(EntityRef<GolfCourse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._GolfCourse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultMensTee", DbType="BigInt")]
		public System.Nullable<long> DefaultMensTee
		{
			get
			{
				return this._DefaultMensTee;
			}
			set
			{
				if ((this._DefaultMensTee != value))
				{
					this.OnDefaultMensTeeChanging(value);
					this.SendPropertyChanging();
					this._DefaultMensTee = value;
					this.SendPropertyChanged("DefaultMensTee");
					this.OnDefaultMensTeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultWomansTee", DbType="BigInt")]
		public System.Nullable<long> DefaultWomansTee
		{
			get
			{
				return this._DefaultWomansTee;
			}
			set
			{
				if ((this._DefaultWomansTee != value))
				{
					this.OnDefaultWomansTeeChanging(value);
					this.SendPropertyChanging();
					this._DefaultWomansTee = value;
					this.SendPropertyChanged("DefaultWomansTee");
					this.OnDefaultWomansTeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_GolfLeagueCourse", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.GolfLeagueCourses.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.GolfLeagueCourses.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfCourse_GolfLeagueCourse", Storage="_GolfCourse", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public GolfCourse GolfCourse
		{
			get
			{
				return this._GolfCourse.Entity;
			}
			set
			{
				GolfCourse previousValue = this._GolfCourse.Entity;
				if (((previousValue != value) 
							|| (this._GolfCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GolfCourse.Entity = null;
						previousValue.GolfLeagueCourses.Remove(this);
					}
					this._GolfCourse.Entity = value;
					if ((value != null))
					{
						value.GolfLeagueCourses.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(long);
					}
					this.SendPropertyChanged("GolfCourse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GolfLeagueSetup")]
	public partial class GolfLeagueSetup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private long _PresidentId;
		
		private long _VicePresidentId;
		
		private long _SecretaryId;
		
		private long _TreasurerId;
		
		private int _LeagueDay;
		
		private System.DateTime _FirstTeeTime;
		
		private int _TimeBetweenTeeTimes;
		
		private int _HolesPerMatch;
		
		private int _TeeOffFormat;
		
		private int _IndNetPerHolePts;
		
		private int _IndNetPerNinePts;
		
		private int _IndNetPerMatchPts;
		
		private int _IndNetTotalHolesPts;
		
		private int _IndNetAgainstFieldPts;
		
		private int _IndNetAgainstFieldDescPts;
		
		private int _IndActPerHolePts;
		
		private int _IndActPerNinePts;
		
		private int _IndActPerMatchPts;
		
		private int _IndActTotalHolesPts;
		
		private int _IndActAgainstFieldPts;
		
		private int _IndActAgainstFieldDescPts;
		
		private int _TeamNetPerHolePts;
		
		private int _TeamNetPerNinePts;
		
		private int _TeamNetPerMatchPts;
		
		private int _TeamNetTotalHolesPts;
		
		private int _TeamNetAgainstFieldPts;
		
		private int _TeamActPerHolePts;
		
		private int _TeamActPerNinePts;
		
		private int _TeamActPerMatchPts;
		
		private int _TeamActTotalHolesPts;
		
		private int _TeamActAgainstFieldPts;
		
		private int _TeamAgainstFieldDescPts;
		
		private int _TeamNetBestBallPerHolePts;
		
		private int _TeamActBestBallPerHolePts;
		
		private bool _UseTeamScoring;
		
		private bool _UseIndividualScoring;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<Contact> _Contact1;
		
		private EntityRef<Contact> _Contact2;
		
		private EntityRef<Contact> _Contact3;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnPresidentIdChanging(long value);
    partial void OnPresidentIdChanged();
    partial void OnVicePresidentIdChanging(long value);
    partial void OnVicePresidentIdChanged();
    partial void OnSecretaryIdChanging(long value);
    partial void OnSecretaryIdChanged();
    partial void OnTreasurerIdChanging(long value);
    partial void OnTreasurerIdChanged();
    partial void OnLeagueDayChanging(int value);
    partial void OnLeagueDayChanged();
    partial void OnFirstTeeTimeChanging(System.DateTime value);
    partial void OnFirstTeeTimeChanged();
    partial void OnTimeBetweenTeeTimesChanging(int value);
    partial void OnTimeBetweenTeeTimesChanged();
    partial void OnHolesPerMatchChanging(int value);
    partial void OnHolesPerMatchChanged();
    partial void OnTeeOffFormatChanging(int value);
    partial void OnTeeOffFormatChanged();
    partial void OnIndNetPerHolePtsChanging(int value);
    partial void OnIndNetPerHolePtsChanged();
    partial void OnIndNetPerNinePtsChanging(int value);
    partial void OnIndNetPerNinePtsChanged();
    partial void OnIndNetPerMatchPtsChanging(int value);
    partial void OnIndNetPerMatchPtsChanged();
    partial void OnIndNetTotalHolesPtsChanging(int value);
    partial void OnIndNetTotalHolesPtsChanged();
    partial void OnIndNetAgainstFieldPtsChanging(int value);
    partial void OnIndNetAgainstFieldPtsChanged();
    partial void OnIndNetAgainstFieldDescPtsChanging(int value);
    partial void OnIndNetAgainstFieldDescPtsChanged();
    partial void OnIndActPerHolePtsChanging(int value);
    partial void OnIndActPerHolePtsChanged();
    partial void OnIndActPerNinePtsChanging(int value);
    partial void OnIndActPerNinePtsChanged();
    partial void OnIndActPerMatchPtsChanging(int value);
    partial void OnIndActPerMatchPtsChanged();
    partial void OnIndActTotalHolesPtsChanging(int value);
    partial void OnIndActTotalHolesPtsChanged();
    partial void OnIndActAgainstFieldPtsChanging(int value);
    partial void OnIndActAgainstFieldPtsChanged();
    partial void OnIndActAgainstFieldDescPtsChanging(int value);
    partial void OnIndActAgainstFieldDescPtsChanged();
    partial void OnTeamNetPerHolePtsChanging(int value);
    partial void OnTeamNetPerHolePtsChanged();
    partial void OnTeamNetPerNinePtsChanging(int value);
    partial void OnTeamNetPerNinePtsChanged();
    partial void OnTeamNetPerMatchPtsChanging(int value);
    partial void OnTeamNetPerMatchPtsChanged();
    partial void OnTeamNetTotalHolesPtsChanging(int value);
    partial void OnTeamNetTotalHolesPtsChanged();
    partial void OnTeamNetAgainstFieldPtsChanging(int value);
    partial void OnTeamNetAgainstFieldPtsChanged();
    partial void OnTeamActPerHolePtsChanging(int value);
    partial void OnTeamActPerHolePtsChanged();
    partial void OnTeamActPerNinePtsChanging(int value);
    partial void OnTeamActPerNinePtsChanged();
    partial void OnTeamActPerMatchPtsChanging(int value);
    partial void OnTeamActPerMatchPtsChanged();
    partial void OnTeamActTotalHolesPtsChanging(int value);
    partial void OnTeamActTotalHolesPtsChanged();
    partial void OnTeamActAgainstFieldPtsChanging(int value);
    partial void OnTeamActAgainstFieldPtsChanged();
    partial void OnTeamAgainstFieldDescPtsChanging(int value);
    partial void OnTeamAgainstFieldDescPtsChanged();
    partial void OnTeamNetBestBallPerHolePtsChanging(int value);
    partial void OnTeamNetBestBallPerHolePtsChanged();
    partial void OnTeamActBestBallPerHolePtsChanging(int value);
    partial void OnTeamActBestBallPerHolePtsChanged();
    partial void OnUseTeamScoringChanging(bool value);
    partial void OnUseTeamScoringChanged();
    partial void OnUseIndividualScoringChanging(bool value);
    partial void OnUseIndividualScoringChanged();
    #endregion
		
		public GolfLeagueSetup()
		{
			this._Account = default(EntityRef<Account>);
			this._Contact = default(EntityRef<Contact>);
			this._Contact1 = default(EntityRef<Contact>);
			this._Contact2 = default(EntityRef<Contact>);
			this._Contact3 = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PresidentId", DbType="BigInt NOT NULL")]
		public long PresidentId
		{
			get
			{
				return this._PresidentId;
			}
			set
			{
				if ((this._PresidentId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPresidentIdChanging(value);
					this.SendPropertyChanging();
					this._PresidentId = value;
					this.SendPropertyChanged("PresidentId");
					this.OnPresidentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VicePresidentId", DbType="BigInt NOT NULL")]
		public long VicePresidentId
		{
			get
			{
				return this._VicePresidentId;
			}
			set
			{
				if ((this._VicePresidentId != value))
				{
					if (this._Contact1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVicePresidentIdChanging(value);
					this.SendPropertyChanging();
					this._VicePresidentId = value;
					this.SendPropertyChanged("VicePresidentId");
					this.OnVicePresidentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecretaryId", DbType="BigInt NOT NULL")]
		public long SecretaryId
		{
			get
			{
				return this._SecretaryId;
			}
			set
			{
				if ((this._SecretaryId != value))
				{
					if (this._Contact2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSecretaryIdChanging(value);
					this.SendPropertyChanging();
					this._SecretaryId = value;
					this.SendPropertyChanged("SecretaryId");
					this.OnSecretaryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TreasurerId", DbType="BigInt NOT NULL")]
		public long TreasurerId
		{
			get
			{
				return this._TreasurerId;
			}
			set
			{
				if ((this._TreasurerId != value))
				{
					if (this._Contact3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTreasurerIdChanging(value);
					this.SendPropertyChanging();
					this._TreasurerId = value;
					this.SendPropertyChanged("TreasurerId");
					this.OnTreasurerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueDay", DbType="Int NOT NULL")]
		public int LeagueDay
		{
			get
			{
				return this._LeagueDay;
			}
			set
			{
				if ((this._LeagueDay != value))
				{
					this.OnLeagueDayChanging(value);
					this.SendPropertyChanging();
					this._LeagueDay = value;
					this.SendPropertyChanged("LeagueDay");
					this.OnLeagueDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstTeeTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime FirstTeeTime
		{
			get
			{
				return this._FirstTeeTime;
			}
			set
			{
				if ((this._FirstTeeTime != value))
				{
					this.OnFirstTeeTimeChanging(value);
					this.SendPropertyChanging();
					this._FirstTeeTime = value;
					this.SendPropertyChanged("FirstTeeTime");
					this.OnFirstTeeTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeBetweenTeeTimes", DbType="Int NOT NULL")]
		public int TimeBetweenTeeTimes
		{
			get
			{
				return this._TimeBetweenTeeTimes;
			}
			set
			{
				if ((this._TimeBetweenTeeTimes != value))
				{
					this.OnTimeBetweenTeeTimesChanging(value);
					this.SendPropertyChanging();
					this._TimeBetweenTeeTimes = value;
					this.SendPropertyChanged("TimeBetweenTeeTimes");
					this.OnTimeBetweenTeeTimesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HolesPerMatch", DbType="Int NOT NULL")]
		public int HolesPerMatch
		{
			get
			{
				return this._HolesPerMatch;
			}
			set
			{
				if ((this._HolesPerMatch != value))
				{
					this.OnHolesPerMatchChanging(value);
					this.SendPropertyChanging();
					this._HolesPerMatch = value;
					this.SendPropertyChanged("HolesPerMatch");
					this.OnHolesPerMatchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeeOffFormat", DbType="Int NOT NULL")]
		public int TeeOffFormat
		{
			get
			{
				return this._TeeOffFormat;
			}
			set
			{
				if ((this._TeeOffFormat != value))
				{
					this.OnTeeOffFormatChanging(value);
					this.SendPropertyChanging();
					this._TeeOffFormat = value;
					this.SendPropertyChanged("TeeOffFormat");
					this.OnTeeOffFormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndNetPerHolePts", DbType="Int NOT NULL")]
		public int IndNetPerHolePts
		{
			get
			{
				return this._IndNetPerHolePts;
			}
			set
			{
				if ((this._IndNetPerHolePts != value))
				{
					this.OnIndNetPerHolePtsChanging(value);
					this.SendPropertyChanging();
					this._IndNetPerHolePts = value;
					this.SendPropertyChanged("IndNetPerHolePts");
					this.OnIndNetPerHolePtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndNetPerNinePts", DbType="Int NOT NULL")]
		public int IndNetPerNinePts
		{
			get
			{
				return this._IndNetPerNinePts;
			}
			set
			{
				if ((this._IndNetPerNinePts != value))
				{
					this.OnIndNetPerNinePtsChanging(value);
					this.SendPropertyChanging();
					this._IndNetPerNinePts = value;
					this.SendPropertyChanged("IndNetPerNinePts");
					this.OnIndNetPerNinePtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndNetPerMatchPts", DbType="Int NOT NULL")]
		public int IndNetPerMatchPts
		{
			get
			{
				return this._IndNetPerMatchPts;
			}
			set
			{
				if ((this._IndNetPerMatchPts != value))
				{
					this.OnIndNetPerMatchPtsChanging(value);
					this.SendPropertyChanging();
					this._IndNetPerMatchPts = value;
					this.SendPropertyChanged("IndNetPerMatchPts");
					this.OnIndNetPerMatchPtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndNetTotalHolesPts", DbType="Int NOT NULL")]
		public int IndNetTotalHolesPts
		{
			get
			{
				return this._IndNetTotalHolesPts;
			}
			set
			{
				if ((this._IndNetTotalHolesPts != value))
				{
					this.OnIndNetTotalHolesPtsChanging(value);
					this.SendPropertyChanging();
					this._IndNetTotalHolesPts = value;
					this.SendPropertyChanged("IndNetTotalHolesPts");
					this.OnIndNetTotalHolesPtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndNetAgainstFieldPts", DbType="Int NOT NULL")]
		public int IndNetAgainstFieldPts
		{
			get
			{
				return this._IndNetAgainstFieldPts;
			}
			set
			{
				if ((this._IndNetAgainstFieldPts != value))
				{
					this.OnIndNetAgainstFieldPtsChanging(value);
					this.SendPropertyChanging();
					this._IndNetAgainstFieldPts = value;
					this.SendPropertyChanged("IndNetAgainstFieldPts");
					this.OnIndNetAgainstFieldPtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndNetAgainstFieldDescPts", DbType="Int NOT NULL")]
		public int IndNetAgainstFieldDescPts
		{
			get
			{
				return this._IndNetAgainstFieldDescPts;
			}
			set
			{
				if ((this._IndNetAgainstFieldDescPts != value))
				{
					this.OnIndNetAgainstFieldDescPtsChanging(value);
					this.SendPropertyChanging();
					this._IndNetAgainstFieldDescPts = value;
					this.SendPropertyChanged("IndNetAgainstFieldDescPts");
					this.OnIndNetAgainstFieldDescPtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndActPerHolePts", DbType="Int NOT NULL")]
		public int IndActPerHolePts
		{
			get
			{
				return this._IndActPerHolePts;
			}
			set
			{
				if ((this._IndActPerHolePts != value))
				{
					this.OnIndActPerHolePtsChanging(value);
					this.SendPropertyChanging();
					this._IndActPerHolePts = value;
					this.SendPropertyChanged("IndActPerHolePts");
					this.OnIndActPerHolePtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndActPerNinePts", DbType="Int NOT NULL")]
		public int IndActPerNinePts
		{
			get
			{
				return this._IndActPerNinePts;
			}
			set
			{
				if ((this._IndActPerNinePts != value))
				{
					this.OnIndActPerNinePtsChanging(value);
					this.SendPropertyChanging();
					this._IndActPerNinePts = value;
					this.SendPropertyChanged("IndActPerNinePts");
					this.OnIndActPerNinePtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndActPerMatchPts", DbType="Int NOT NULL")]
		public int IndActPerMatchPts
		{
			get
			{
				return this._IndActPerMatchPts;
			}
			set
			{
				if ((this._IndActPerMatchPts != value))
				{
					this.OnIndActPerMatchPtsChanging(value);
					this.SendPropertyChanging();
					this._IndActPerMatchPts = value;
					this.SendPropertyChanged("IndActPerMatchPts");
					this.OnIndActPerMatchPtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndActTotalHolesPts", DbType="Int NOT NULL")]
		public int IndActTotalHolesPts
		{
			get
			{
				return this._IndActTotalHolesPts;
			}
			set
			{
				if ((this._IndActTotalHolesPts != value))
				{
					this.OnIndActTotalHolesPtsChanging(value);
					this.SendPropertyChanging();
					this._IndActTotalHolesPts = value;
					this.SendPropertyChanged("IndActTotalHolesPts");
					this.OnIndActTotalHolesPtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndActAgainstFieldPts", DbType="Int NOT NULL")]
		public int IndActAgainstFieldPts
		{
			get
			{
				return this._IndActAgainstFieldPts;
			}
			set
			{
				if ((this._IndActAgainstFieldPts != value))
				{
					this.OnIndActAgainstFieldPtsChanging(value);
					this.SendPropertyChanging();
					this._IndActAgainstFieldPts = value;
					this.SendPropertyChanged("IndActAgainstFieldPts");
					this.OnIndActAgainstFieldPtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndActAgainstFieldDescPts", DbType="Int NOT NULL")]
		public int IndActAgainstFieldDescPts
		{
			get
			{
				return this._IndActAgainstFieldDescPts;
			}
			set
			{
				if ((this._IndActAgainstFieldDescPts != value))
				{
					this.OnIndActAgainstFieldDescPtsChanging(value);
					this.SendPropertyChanging();
					this._IndActAgainstFieldDescPts = value;
					this.SendPropertyChanged("IndActAgainstFieldDescPts");
					this.OnIndActAgainstFieldDescPtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamNetPerHolePts", DbType="Int NOT NULL")]
		public int TeamNetPerHolePts
		{
			get
			{
				return this._TeamNetPerHolePts;
			}
			set
			{
				if ((this._TeamNetPerHolePts != value))
				{
					this.OnTeamNetPerHolePtsChanging(value);
					this.SendPropertyChanging();
					this._TeamNetPerHolePts = value;
					this.SendPropertyChanged("TeamNetPerHolePts");
					this.OnTeamNetPerHolePtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamNetPerNinePts", DbType="Int NOT NULL")]
		public int TeamNetPerNinePts
		{
			get
			{
				return this._TeamNetPerNinePts;
			}
			set
			{
				if ((this._TeamNetPerNinePts != value))
				{
					this.OnTeamNetPerNinePtsChanging(value);
					this.SendPropertyChanging();
					this._TeamNetPerNinePts = value;
					this.SendPropertyChanged("TeamNetPerNinePts");
					this.OnTeamNetPerNinePtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamNetPerMatchPts", DbType="Int NOT NULL")]
		public int TeamNetPerMatchPts
		{
			get
			{
				return this._TeamNetPerMatchPts;
			}
			set
			{
				if ((this._TeamNetPerMatchPts != value))
				{
					this.OnTeamNetPerMatchPtsChanging(value);
					this.SendPropertyChanging();
					this._TeamNetPerMatchPts = value;
					this.SendPropertyChanged("TeamNetPerMatchPts");
					this.OnTeamNetPerMatchPtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamNetTotalHolesPts", DbType="Int NOT NULL")]
		public int TeamNetTotalHolesPts
		{
			get
			{
				return this._TeamNetTotalHolesPts;
			}
			set
			{
				if ((this._TeamNetTotalHolesPts != value))
				{
					this.OnTeamNetTotalHolesPtsChanging(value);
					this.SendPropertyChanging();
					this._TeamNetTotalHolesPts = value;
					this.SendPropertyChanged("TeamNetTotalHolesPts");
					this.OnTeamNetTotalHolesPtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamNetAgainstFieldPts", DbType="Int NOT NULL")]
		public int TeamNetAgainstFieldPts
		{
			get
			{
				return this._TeamNetAgainstFieldPts;
			}
			set
			{
				if ((this._TeamNetAgainstFieldPts != value))
				{
					this.OnTeamNetAgainstFieldPtsChanging(value);
					this.SendPropertyChanging();
					this._TeamNetAgainstFieldPts = value;
					this.SendPropertyChanged("TeamNetAgainstFieldPts");
					this.OnTeamNetAgainstFieldPtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamActPerHolePts", DbType="Int NOT NULL")]
		public int TeamActPerHolePts
		{
			get
			{
				return this._TeamActPerHolePts;
			}
			set
			{
				if ((this._TeamActPerHolePts != value))
				{
					this.OnTeamActPerHolePtsChanging(value);
					this.SendPropertyChanging();
					this._TeamActPerHolePts = value;
					this.SendPropertyChanged("TeamActPerHolePts");
					this.OnTeamActPerHolePtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamActPerNinePts", DbType="Int NOT NULL")]
		public int TeamActPerNinePts
		{
			get
			{
				return this._TeamActPerNinePts;
			}
			set
			{
				if ((this._TeamActPerNinePts != value))
				{
					this.OnTeamActPerNinePtsChanging(value);
					this.SendPropertyChanging();
					this._TeamActPerNinePts = value;
					this.SendPropertyChanged("TeamActPerNinePts");
					this.OnTeamActPerNinePtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamActPerMatchPts", DbType="Int NOT NULL")]
		public int TeamActPerMatchPts
		{
			get
			{
				return this._TeamActPerMatchPts;
			}
			set
			{
				if ((this._TeamActPerMatchPts != value))
				{
					this.OnTeamActPerMatchPtsChanging(value);
					this.SendPropertyChanging();
					this._TeamActPerMatchPts = value;
					this.SendPropertyChanged("TeamActPerMatchPts");
					this.OnTeamActPerMatchPtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamActTotalHolesPts", DbType="Int NOT NULL")]
		public int TeamActTotalHolesPts
		{
			get
			{
				return this._TeamActTotalHolesPts;
			}
			set
			{
				if ((this._TeamActTotalHolesPts != value))
				{
					this.OnTeamActTotalHolesPtsChanging(value);
					this.SendPropertyChanging();
					this._TeamActTotalHolesPts = value;
					this.SendPropertyChanged("TeamActTotalHolesPts");
					this.OnTeamActTotalHolesPtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamActAgainstFieldPts", DbType="Int NOT NULL")]
		public int TeamActAgainstFieldPts
		{
			get
			{
				return this._TeamActAgainstFieldPts;
			}
			set
			{
				if ((this._TeamActAgainstFieldPts != value))
				{
					this.OnTeamActAgainstFieldPtsChanging(value);
					this.SendPropertyChanging();
					this._TeamActAgainstFieldPts = value;
					this.SendPropertyChanged("TeamActAgainstFieldPts");
					this.OnTeamActAgainstFieldPtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamAgainstFieldDescPts", DbType="Int NOT NULL")]
		public int TeamAgainstFieldDescPts
		{
			get
			{
				return this._TeamAgainstFieldDescPts;
			}
			set
			{
				if ((this._TeamAgainstFieldDescPts != value))
				{
					this.OnTeamAgainstFieldDescPtsChanging(value);
					this.SendPropertyChanging();
					this._TeamAgainstFieldDescPts = value;
					this.SendPropertyChanged("TeamAgainstFieldDescPts");
					this.OnTeamAgainstFieldDescPtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamNetBestBallPerHolePts", DbType="Int NOT NULL")]
		public int TeamNetBestBallPerHolePts
		{
			get
			{
				return this._TeamNetBestBallPerHolePts;
			}
			set
			{
				if ((this._TeamNetBestBallPerHolePts != value))
				{
					this.OnTeamNetBestBallPerHolePtsChanging(value);
					this.SendPropertyChanging();
					this._TeamNetBestBallPerHolePts = value;
					this.SendPropertyChanged("TeamNetBestBallPerHolePts");
					this.OnTeamNetBestBallPerHolePtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamActBestBallPerHolePts", DbType="Int NOT NULL")]
		public int TeamActBestBallPerHolePts
		{
			get
			{
				return this._TeamActBestBallPerHolePts;
			}
			set
			{
				if ((this._TeamActBestBallPerHolePts != value))
				{
					this.OnTeamActBestBallPerHolePtsChanging(value);
					this.SendPropertyChanging();
					this._TeamActBestBallPerHolePts = value;
					this.SendPropertyChanged("TeamActBestBallPerHolePts");
					this.OnTeamActBestBallPerHolePtsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UseTeamScoring", DbType="Bit NOT NULL")]
		public bool UseTeamScoring
		{
			get
			{
				return this._UseTeamScoring;
			}
			set
			{
				if ((this._UseTeamScoring != value))
				{
					this.OnUseTeamScoringChanging(value);
					this.SendPropertyChanging();
					this._UseTeamScoring = value;
					this.SendPropertyChanged("UseTeamScoring");
					this.OnUseTeamScoringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UseIndividualScoring", DbType="Bit NOT NULL")]
		public bool UseIndividualScoring
		{
			get
			{
				return this._UseIndividualScoring;
			}
			set
			{
				if ((this._UseIndividualScoring != value))
				{
					this.OnUseIndividualScoringChanging(value);
					this.SendPropertyChanging();
					this._UseIndividualScoring = value;
					this.SendPropertyChanged("UseIndividualScoring");
					this.OnUseIndividualScoringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_GolfLeagueSetup", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.GolfLeagueSetups.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.GolfLeagueSetups.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_GolfLeagueSetup", Storage="_Contact", ThisKey="PresidentId", OtherKey="Id", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.GolfLeagueSetups.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.GolfLeagueSetups.Add(this);
						this._PresidentId = value.Id;
					}
					else
					{
						this._PresidentId = default(long);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_GolfLeagueSetup1", Storage="_Contact1", ThisKey="VicePresidentId", OtherKey="Id", IsForeignKey=true)]
		public Contact Contact1
		{
			get
			{
				return this._Contact1.Entity;
			}
			set
			{
				Contact previousValue = this._Contact1.Entity;
				if (((previousValue != value) 
							|| (this._Contact1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact1.Entity = null;
						previousValue.GolfLeagueSetups1.Remove(this);
					}
					this._Contact1.Entity = value;
					if ((value != null))
					{
						value.GolfLeagueSetups1.Add(this);
						this._VicePresidentId = value.Id;
					}
					else
					{
						this._VicePresidentId = default(long);
					}
					this.SendPropertyChanged("Contact1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_GolfLeagueSetup2", Storage="_Contact2", ThisKey="SecretaryId", OtherKey="Id", IsForeignKey=true)]
		public Contact Contact2
		{
			get
			{
				return this._Contact2.Entity;
			}
			set
			{
				Contact previousValue = this._Contact2.Entity;
				if (((previousValue != value) 
							|| (this._Contact2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact2.Entity = null;
						previousValue.GolfLeagueSetups2.Remove(this);
					}
					this._Contact2.Entity = value;
					if ((value != null))
					{
						value.GolfLeagueSetups2.Add(this);
						this._SecretaryId = value.Id;
					}
					else
					{
						this._SecretaryId = default(long);
					}
					this.SendPropertyChanged("Contact2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_GolfLeagueSetup3", Storage="_Contact3", ThisKey="TreasurerId", OtherKey="Id", IsForeignKey=true)]
		public Contact Contact3
		{
			get
			{
				return this._Contact3.Entity;
			}
			set
			{
				Contact previousValue = this._Contact3.Entity;
				if (((previousValue != value) 
							|| (this._Contact3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact3.Entity = null;
						previousValue.GolfLeagueSetups3.Remove(this);
					}
					this._Contact3.Entity = value;
					if ((value != null))
					{
						value.GolfLeagueSetups3.Add(this);
						this._TreasurerId = value.Id;
					}
					else
					{
						this._TreasurerId = default(long);
					}
					this.SendPropertyChanged("Contact3");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GolfMatch")]
	public partial class GolfMatch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _Team1;
		
		private long _Team2;
		
		private long _LeagueId;
		
		private System.DateTime _MatchDate;
		
		private System.DateTime _MatchTime;
		
		private System.Nullable<long> _CourseId;
		
		private int _MatchStatus;
		
		private int _MatchType;
		
		private string _Comment;
		
		private EntitySet<GolfMatchScore> _GolfMatchScores;
		
		private EntityRef<GolfCourse> _GolfCourse;
		
		private EntityRef<LeagueSeason> _LeagueSeason;
		
		private EntityRef<TeamsSeason> _TeamsSeason;
		
		private EntityRef<TeamsSeason> _TeamsSeason1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnTeam1Changing(long value);
    partial void OnTeam1Changed();
    partial void OnTeam2Changing(long value);
    partial void OnTeam2Changed();
    partial void OnLeagueIdChanging(long value);
    partial void OnLeagueIdChanged();
    partial void OnMatchDateChanging(System.DateTime value);
    partial void OnMatchDateChanged();
    partial void OnMatchTimeChanging(System.DateTime value);
    partial void OnMatchTimeChanged();
    partial void OnCourseIdChanging(System.Nullable<long> value);
    partial void OnCourseIdChanged();
    partial void OnMatchStatusChanging(int value);
    partial void OnMatchStatusChanged();
    partial void OnMatchTypeChanging(int value);
    partial void OnMatchTypeChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public GolfMatch()
		{
			this._GolfMatchScores = new EntitySet<GolfMatchScore>(new Action<GolfMatchScore>(this.attach_GolfMatchScores), new Action<GolfMatchScore>(this.detach_GolfMatchScores));
			this._GolfCourse = default(EntityRef<GolfCourse>);
			this._LeagueSeason = default(EntityRef<LeagueSeason>);
			this._TeamsSeason = default(EntityRef<TeamsSeason>);
			this._TeamsSeason1 = default(EntityRef<TeamsSeason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team1", DbType="BigInt NOT NULL")]
		public long Team1
		{
			get
			{
				return this._Team1;
			}
			set
			{
				if ((this._Team1 != value))
				{
					if (this._TeamsSeason1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeam1Changing(value);
					this.SendPropertyChanging();
					this._Team1 = value;
					this.SendPropertyChanged("Team1");
					this.OnTeam1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team2", DbType="BigInt NOT NULL")]
		public long Team2
		{
			get
			{
				return this._Team2;
			}
			set
			{
				if ((this._Team2 != value))
				{
					if (this._TeamsSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeam2Changing(value);
					this.SendPropertyChanging();
					this._Team2 = value;
					this.SendPropertyChanged("Team2");
					this.OnTeam2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueId", DbType="BigInt NOT NULL")]
		public long LeagueId
		{
			get
			{
				return this._LeagueId;
			}
			set
			{
				if ((this._LeagueId != value))
				{
					if (this._LeagueSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueIdChanging(value);
					this.SendPropertyChanging();
					this._LeagueId = value;
					this.SendPropertyChanged("LeagueId");
					this.OnLeagueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime MatchDate
		{
			get
			{
				return this._MatchDate;
			}
			set
			{
				if ((this._MatchDate != value))
				{
					this.OnMatchDateChanging(value);
					this.SendPropertyChanging();
					this._MatchDate = value;
					this.SendPropertyChanged("MatchDate");
					this.OnMatchDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime MatchTime
		{
			get
			{
				return this._MatchTime;
			}
			set
			{
				if ((this._MatchTime != value))
				{
					this.OnMatchTimeChanging(value);
					this.SendPropertyChanging();
					this._MatchTime = value;
					this.SendPropertyChanged("MatchTime");
					this.OnMatchTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="BigInt")]
		public System.Nullable<long> CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._GolfCourse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchStatus", DbType="Int NOT NULL")]
		public int MatchStatus
		{
			get
			{
				return this._MatchStatus;
			}
			set
			{
				if ((this._MatchStatus != value))
				{
					this.OnMatchStatusChanging(value);
					this.SendPropertyChanging();
					this._MatchStatus = value;
					this.SendPropertyChanged("MatchStatus");
					this.OnMatchStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchType", DbType="Int NOT NULL")]
		public int MatchType
		{
			get
			{
				return this._MatchType;
			}
			set
			{
				if ((this._MatchType != value))
				{
					this.OnMatchTypeChanging(value);
					this.SendPropertyChanging();
					this._MatchType = value;
					this.SendPropertyChanged("MatchType");
					this.OnMatchTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfMatch_GolfMatchScore", Storage="_GolfMatchScores", ThisKey="Id", OtherKey="MatchId")]
		public EntitySet<GolfMatchScore> GolfMatchScores
		{
			get
			{
				return this._GolfMatchScores;
			}
			set
			{
				this._GolfMatchScores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfCourse_GolfMatch", Storage="_GolfCourse", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true, DeleteRule="SET DEFAULT")]
		public GolfCourse GolfCourse
		{
			get
			{
				return this._GolfCourse.Entity;
			}
			set
			{
				GolfCourse previousValue = this._GolfCourse.Entity;
				if (((previousValue != value) 
							|| (this._GolfCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GolfCourse.Entity = null;
						previousValue.GolfMatches.Remove(this);
					}
					this._GolfCourse.Entity = value;
					if ((value != null))
					{
						value.GolfMatches.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(Nullable<long>);
					}
					this.SendPropertyChanged("GolfCourse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSeason_GolfMatch", Storage="_LeagueSeason", ThisKey="LeagueId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LeagueSeason LeagueSeason
		{
			get
			{
				return this._LeagueSeason.Entity;
			}
			set
			{
				LeagueSeason previousValue = this._LeagueSeason.Entity;
				if (((previousValue != value) 
							|| (this._LeagueSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueSeason.Entity = null;
						previousValue.GolfMatches.Remove(this);
					}
					this._LeagueSeason.Entity = value;
					if ((value != null))
					{
						value.GolfMatches.Add(this);
						this._LeagueId = value.Id;
					}
					else
					{
						this._LeagueId = default(long);
					}
					this.SendPropertyChanged("LeagueSeason");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsSeason_GolfMatch", Storage="_TeamsSeason", ThisKey="Team2", OtherKey="Id", IsForeignKey=true)]
		public TeamsSeason TeamsSeason
		{
			get
			{
				return this._TeamsSeason.Entity;
			}
			set
			{
				TeamsSeason previousValue = this._TeamsSeason.Entity;
				if (((previousValue != value) 
							|| (this._TeamsSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamsSeason.Entity = null;
						previousValue.GolfMatches.Remove(this);
					}
					this._TeamsSeason.Entity = value;
					if ((value != null))
					{
						value.GolfMatches.Add(this);
						this._Team2 = value.Id;
					}
					else
					{
						this._Team2 = default(long);
					}
					this.SendPropertyChanged("TeamsSeason");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsSeason_GolfMatch1", Storage="_TeamsSeason1", ThisKey="Team1", OtherKey="Id", IsForeignKey=true)]
		public TeamsSeason TeamsSeason1
		{
			get
			{
				return this._TeamsSeason1.Entity;
			}
			set
			{
				TeamsSeason previousValue = this._TeamsSeason1.Entity;
				if (((previousValue != value) 
							|| (this._TeamsSeason1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamsSeason1.Entity = null;
						previousValue.GolfMatches1.Remove(this);
					}
					this._TeamsSeason1.Entity = value;
					if ((value != null))
					{
						value.GolfMatches1.Add(this);
						this._Team1 = value.Id;
					}
					else
					{
						this._Team1 = default(long);
					}
					this.SendPropertyChanged("TeamsSeason1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GolfMatchScores(GolfMatchScore entity)
		{
			this.SendPropertyChanging();
			entity.GolfMatch = this;
		}
		
		private void detach_GolfMatchScores(GolfMatchScore entity)
		{
			this.SendPropertyChanging();
			entity.GolfMatch = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GolfMatchScores")]
	public partial class GolfMatchScore : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private long _TeamId;
		
		private long _PlayerId;
		
		private long _ScoreId;
		
		private EntityRef<GolfMatch> _GolfMatch;
		
		private EntityRef<GolfRoster> _GolfRoster;
		
		private EntityRef<GolfScore> _GolfScore;
		
		private EntityRef<TeamsSeason> _TeamsSeason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnTeamIdChanging(long value);
    partial void OnTeamIdChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnScoreIdChanging(long value);
    partial void OnScoreIdChanged();
    #endregion
		
		public GolfMatchScore()
		{
			this._GolfMatch = default(EntityRef<GolfMatch>);
			this._GolfRoster = default(EntityRef<GolfRoster>);
			this._GolfScore = default(EntityRef<GolfScore>);
			this._TeamsSeason = default(EntityRef<TeamsSeason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if (this._GolfMatch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._TeamsSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._GolfRoster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ScoreId
		{
			get
			{
				return this._ScoreId;
			}
			set
			{
				if ((this._ScoreId != value))
				{
					if (this._GolfScore.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScoreIdChanging(value);
					this.SendPropertyChanging();
					this._ScoreId = value;
					this.SendPropertyChanged("ScoreId");
					this.OnScoreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfMatch_GolfMatchScore", Storage="_GolfMatch", ThisKey="MatchId", OtherKey="Id", IsForeignKey=true)]
		public GolfMatch GolfMatch
		{
			get
			{
				return this._GolfMatch.Entity;
			}
			set
			{
				GolfMatch previousValue = this._GolfMatch.Entity;
				if (((previousValue != value) 
							|| (this._GolfMatch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GolfMatch.Entity = null;
						previousValue.GolfMatchScores.Remove(this);
					}
					this._GolfMatch.Entity = value;
					if ((value != null))
					{
						value.GolfMatchScores.Add(this);
						this._MatchId = value.Id;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("GolfMatch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfRoster_GolfMatchScore", Storage="_GolfRoster", ThisKey="PlayerId", OtherKey="Id", IsForeignKey=true)]
		public GolfRoster GolfRoster
		{
			get
			{
				return this._GolfRoster.Entity;
			}
			set
			{
				GolfRoster previousValue = this._GolfRoster.Entity;
				if (((previousValue != value) 
							|| (this._GolfRoster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GolfRoster.Entity = null;
						previousValue.GolfMatchScores.Remove(this);
					}
					this._GolfRoster.Entity = value;
					if ((value != null))
					{
						value.GolfMatchScores.Add(this);
						this._PlayerId = value.Id;
					}
					else
					{
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("GolfRoster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfScore_GolfMatchScore", Storage="_GolfScore", ThisKey="ScoreId", OtherKey="Id", IsForeignKey=true)]
		public GolfScore GolfScore
		{
			get
			{
				return this._GolfScore.Entity;
			}
			set
			{
				GolfScore previousValue = this._GolfScore.Entity;
				if (((previousValue != value) 
							|| (this._GolfScore.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GolfScore.Entity = null;
						previousValue.GolfMatchScores.Remove(this);
					}
					this._GolfScore.Entity = value;
					if ((value != null))
					{
						value.GolfMatchScores.Add(this);
						this._ScoreId = value.Id;
					}
					else
					{
						this._ScoreId = default(long);
					}
					this.SendPropertyChanged("GolfScore");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsSeason_GolfMatchScore", Storage="_TeamsSeason", ThisKey="TeamId", OtherKey="Id", IsForeignKey=true)]
		public TeamsSeason TeamsSeason
		{
			get
			{
				return this._TeamsSeason.Entity;
			}
			set
			{
				TeamsSeason previousValue = this._TeamsSeason.Entity;
				if (((previousValue != value) 
							|| (this._TeamsSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamsSeason.Entity = null;
						previousValue.GolfMatchScores.Remove(this);
					}
					this._TeamsSeason.Entity = value;
					if ((value != null))
					{
						value.GolfMatchScores.Add(this);
						this._TeamId = value.Id;
					}
					else
					{
						this._TeamId = default(long);
					}
					this.SendPropertyChanged("TeamsSeason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GolfRoster")]
	public partial class GolfRoster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ContactId;
		
		private long _TeamSeasonId;
		
		private bool _IsActive;
		
		private System.Nullable<double> _InitialDifferential;
		
		private bool _IsSub;
		
		private System.Nullable<long> _SubSeasonId;
		
		private EntitySet<GolfMatchScore> _GolfMatchScores;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<TeamsSeason> _TeamsSeason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnContactIdChanging(long value);
    partial void OnContactIdChanged();
    partial void OnTeamSeasonIdChanging(long value);
    partial void OnTeamSeasonIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnInitialDifferentialChanging(System.Nullable<double> value);
    partial void OnInitialDifferentialChanged();
    partial void OnIsSubChanging(bool value);
    partial void OnIsSubChanged();
    partial void OnSubSeasonIdChanging(System.Nullable<long> value);
    partial void OnSubSeasonIdChanged();
    #endregion
		
		public GolfRoster()
		{
			this._GolfMatchScores = new EntitySet<GolfMatchScore>(new Action<GolfMatchScore>(this.attach_GolfMatchScores), new Action<GolfMatchScore>(this.detach_GolfMatchScores));
			this._Contact = default(EntityRef<Contact>);
			this._TeamsSeason = default(EntityRef<TeamsSeason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="BigInt NOT NULL")]
		public long ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamSeasonId", DbType="BigInt NOT NULL")]
		public long TeamSeasonId
		{
			get
			{
				return this._TeamSeasonId;
			}
			set
			{
				if ((this._TeamSeasonId != value))
				{
					if (this._TeamsSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._TeamSeasonId = value;
					this.SendPropertyChanged("TeamSeasonId");
					this.OnTeamSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitialDifferential", DbType="Float")]
		public System.Nullable<double> InitialDifferential
		{
			get
			{
				return this._InitialDifferential;
			}
			set
			{
				if ((this._InitialDifferential != value))
				{
					this.OnInitialDifferentialChanging(value);
					this.SendPropertyChanging();
					this._InitialDifferential = value;
					this.SendPropertyChanged("InitialDifferential");
					this.OnInitialDifferentialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSub", DbType="Bit NOT NULL")]
		public bool IsSub
		{
			get
			{
				return this._IsSub;
			}
			set
			{
				if ((this._IsSub != value))
				{
					this.OnIsSubChanging(value);
					this.SendPropertyChanging();
					this._IsSub = value;
					this.SendPropertyChanged("IsSub");
					this.OnIsSubChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubSeasonId", DbType="BigInt")]
		public System.Nullable<long> SubSeasonId
		{
			get
			{
				return this._SubSeasonId;
			}
			set
			{
				if ((this._SubSeasonId != value))
				{
					this.OnSubSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._SubSeasonId = value;
					this.SendPropertyChanged("SubSeasonId");
					this.OnSubSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfRoster_GolfMatchScore", Storage="_GolfMatchScores", ThisKey="Id", OtherKey="PlayerId")]
		public EntitySet<GolfMatchScore> GolfMatchScores
		{
			get
			{
				return this._GolfMatchScores;
			}
			set
			{
				this._GolfMatchScores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_GolfRoster", Storage="_Contact", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.GolfRosters.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.GolfRosters.Add(this);
						this._ContactId = value.Id;
					}
					else
					{
						this._ContactId = default(long);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsSeason_GolfRoster", Storage="_TeamsSeason", ThisKey="TeamSeasonId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TeamsSeason TeamsSeason
		{
			get
			{
				return this._TeamsSeason.Entity;
			}
			set
			{
				TeamsSeason previousValue = this._TeamsSeason.Entity;
				if (((previousValue != value) 
							|| (this._TeamsSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamsSeason.Entity = null;
						previousValue.GolfRosters.Remove(this);
					}
					this._TeamsSeason.Entity = value;
					if ((value != null))
					{
						value.GolfRosters.Add(this);
						this._TeamSeasonId = value.Id;
					}
					else
					{
						this._TeamSeasonId = default(long);
					}
					this.SendPropertyChanged("TeamsSeason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GolfMatchScores(GolfMatchScore entity)
		{
			this.SendPropertyChanging();
			entity.GolfRoster = this;
		}
		
		private void detach_GolfMatchScores(GolfMatchScore entity)
		{
			this.SendPropertyChanging();
			entity.GolfRoster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GolfScore")]
	public partial class GolfScore : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _CourseId;
		
		private long _ContactId;
		
		private long _TeeId;
		
		private System.DateTime _DatePlayed;
		
		private int _HolesPlayed;
		
		private int _TotalScore;
		
		private bool _TotalsOnly;
		
		private int _HoleScore1;
		
		private int _HoleScore2;
		
		private int _HoleScore3;
		
		private int _HoleScore4;
		
		private int _HoleScore5;
		
		private int _HoleScore6;
		
		private int _HoleScore7;
		
		private int _HoleScore8;
		
		private int _HoleScore9;
		
		private int _HoleScore10;
		
		private int _HoleScore11;
		
		private int _HoleScore12;
		
		private int _HoleScore13;
		
		private int _HoleScore14;
		
		private int _HoleScore15;
		
		private int _HoleScore16;
		
		private int _HoleScore17;
		
		private int _HoleScore18;
		
		private System.Nullable<double> _StartIndex;
		
		private System.Nullable<double> _StartIndex9;
		
		private EntitySet<GolferStatsValue> _GolferStatsValues;
		
		private EntitySet<GolfMatchScore> _GolfMatchScores;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<GolfCourse> _GolfCourse;
		
		private EntityRef<GolfTeeInformation> _GolfTeeInformation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnCourseIdChanging(long value);
    partial void OnCourseIdChanged();
    partial void OnContactIdChanging(long value);
    partial void OnContactIdChanged();
    partial void OnTeeIdChanging(long value);
    partial void OnTeeIdChanged();
    partial void OnDatePlayedChanging(System.DateTime value);
    partial void OnDatePlayedChanged();
    partial void OnHolesPlayedChanging(int value);
    partial void OnHolesPlayedChanged();
    partial void OnTotalScoreChanging(int value);
    partial void OnTotalScoreChanged();
    partial void OnTotalsOnlyChanging(bool value);
    partial void OnTotalsOnlyChanged();
    partial void OnHoleScore1Changing(int value);
    partial void OnHoleScore1Changed();
    partial void OnHoleScore2Changing(int value);
    partial void OnHoleScore2Changed();
    partial void OnHoleScore3Changing(int value);
    partial void OnHoleScore3Changed();
    partial void OnHoleScore4Changing(int value);
    partial void OnHoleScore4Changed();
    partial void OnHoleScore5Changing(int value);
    partial void OnHoleScore5Changed();
    partial void OnHoleScore6Changing(int value);
    partial void OnHoleScore6Changed();
    partial void OnHoleScore7Changing(int value);
    partial void OnHoleScore7Changed();
    partial void OnHoleScore8Changing(int value);
    partial void OnHoleScore8Changed();
    partial void OnHoleScore9Changing(int value);
    partial void OnHoleScore9Changed();
    partial void OnHoleScore10Changing(int value);
    partial void OnHoleScore10Changed();
    partial void OnHoleScore11Changing(int value);
    partial void OnHoleScore11Changed();
    partial void OnHoleScore12Changing(int value);
    partial void OnHoleScore12Changed();
    partial void OnHoleScore13Changing(int value);
    partial void OnHoleScore13Changed();
    partial void OnHoleScore14Changing(int value);
    partial void OnHoleScore14Changed();
    partial void OnHoleScore15Changing(int value);
    partial void OnHoleScore15Changed();
    partial void OnHoleScore16Changing(int value);
    partial void OnHoleScore16Changed();
    partial void OnHoleScore17Changing(int value);
    partial void OnHoleScore17Changed();
    partial void OnHoleScore18Changing(int value);
    partial void OnHoleScore18Changed();
    partial void OnStartIndexChanging(System.Nullable<double> value);
    partial void OnStartIndexChanged();
    partial void OnStartIndex9Changing(System.Nullable<double> value);
    partial void OnStartIndex9Changed();
    #endregion
		
		public GolfScore()
		{
			this._GolferStatsValues = new EntitySet<GolferStatsValue>(new Action<GolferStatsValue>(this.attach_GolferStatsValues), new Action<GolferStatsValue>(this.detach_GolferStatsValues));
			this._GolfMatchScores = new EntitySet<GolfMatchScore>(new Action<GolfMatchScore>(this.attach_GolfMatchScores), new Action<GolfMatchScore>(this.detach_GolfMatchScores));
			this._Contact = default(EntityRef<Contact>);
			this._GolfCourse = default(EntityRef<GolfCourse>);
			this._GolfTeeInformation = default(EntityRef<GolfTeeInformation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="BigInt NOT NULL")]
		public long CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._GolfCourse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="BigInt NOT NULL")]
		public long ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeeId", DbType="BigInt NOT NULL")]
		public long TeeId
		{
			get
			{
				return this._TeeId;
			}
			set
			{
				if ((this._TeeId != value))
				{
					if (this._GolfTeeInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeeIdChanging(value);
					this.SendPropertyChanging();
					this._TeeId = value;
					this.SendPropertyChanged("TeeId");
					this.OnTeeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatePlayed", DbType="DateTime NOT NULL")]
		public System.DateTime DatePlayed
		{
			get
			{
				return this._DatePlayed;
			}
			set
			{
				if ((this._DatePlayed != value))
				{
					this.OnDatePlayedChanging(value);
					this.SendPropertyChanging();
					this._DatePlayed = value;
					this.SendPropertyChanged("DatePlayed");
					this.OnDatePlayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HolesPlayed", DbType="Int NOT NULL")]
		public int HolesPlayed
		{
			get
			{
				return this._HolesPlayed;
			}
			set
			{
				if ((this._HolesPlayed != value))
				{
					this.OnHolesPlayedChanging(value);
					this.SendPropertyChanging();
					this._HolesPlayed = value;
					this.SendPropertyChanged("HolesPlayed");
					this.OnHolesPlayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalScore", DbType="Int NOT NULL")]
		public int TotalScore
		{
			get
			{
				return this._TotalScore;
			}
			set
			{
				if ((this._TotalScore != value))
				{
					this.OnTotalScoreChanging(value);
					this.SendPropertyChanging();
					this._TotalScore = value;
					this.SendPropertyChanged("TotalScore");
					this.OnTotalScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalsOnly", DbType="Bit NOT NULL")]
		public bool TotalsOnly
		{
			get
			{
				return this._TotalsOnly;
			}
			set
			{
				if ((this._TotalsOnly != value))
				{
					this.OnTotalsOnlyChanging(value);
					this.SendPropertyChanging();
					this._TotalsOnly = value;
					this.SendPropertyChanged("TotalsOnly");
					this.OnTotalsOnlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleScore1", DbType="Int NOT NULL")]
		public int HoleScore1
		{
			get
			{
				return this._HoleScore1;
			}
			set
			{
				if ((this._HoleScore1 != value))
				{
					this.OnHoleScore1Changing(value);
					this.SendPropertyChanging();
					this._HoleScore1 = value;
					this.SendPropertyChanged("HoleScore1");
					this.OnHoleScore1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleScore2", DbType="Int NOT NULL")]
		public int HoleScore2
		{
			get
			{
				return this._HoleScore2;
			}
			set
			{
				if ((this._HoleScore2 != value))
				{
					this.OnHoleScore2Changing(value);
					this.SendPropertyChanging();
					this._HoleScore2 = value;
					this.SendPropertyChanged("HoleScore2");
					this.OnHoleScore2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleScore3", DbType="Int NOT NULL")]
		public int HoleScore3
		{
			get
			{
				return this._HoleScore3;
			}
			set
			{
				if ((this._HoleScore3 != value))
				{
					this.OnHoleScore3Changing(value);
					this.SendPropertyChanging();
					this._HoleScore3 = value;
					this.SendPropertyChanged("HoleScore3");
					this.OnHoleScore3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleScore4", DbType="Int NOT NULL")]
		public int HoleScore4
		{
			get
			{
				return this._HoleScore4;
			}
			set
			{
				if ((this._HoleScore4 != value))
				{
					this.OnHoleScore4Changing(value);
					this.SendPropertyChanging();
					this._HoleScore4 = value;
					this.SendPropertyChanged("HoleScore4");
					this.OnHoleScore4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleScore5", DbType="Int NOT NULL")]
		public int HoleScore5
		{
			get
			{
				return this._HoleScore5;
			}
			set
			{
				if ((this._HoleScore5 != value))
				{
					this.OnHoleScore5Changing(value);
					this.SendPropertyChanging();
					this._HoleScore5 = value;
					this.SendPropertyChanged("HoleScore5");
					this.OnHoleScore5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleScore6", DbType="Int NOT NULL")]
		public int HoleScore6
		{
			get
			{
				return this._HoleScore6;
			}
			set
			{
				if ((this._HoleScore6 != value))
				{
					this.OnHoleScore6Changing(value);
					this.SendPropertyChanging();
					this._HoleScore6 = value;
					this.SendPropertyChanged("HoleScore6");
					this.OnHoleScore6Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleScore7", DbType="Int NOT NULL")]
		public int HoleScore7
		{
			get
			{
				return this._HoleScore7;
			}
			set
			{
				if ((this._HoleScore7 != value))
				{
					this.OnHoleScore7Changing(value);
					this.SendPropertyChanging();
					this._HoleScore7 = value;
					this.SendPropertyChanged("HoleScore7");
					this.OnHoleScore7Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleScore8", DbType="Int NOT NULL")]
		public int HoleScore8
		{
			get
			{
				return this._HoleScore8;
			}
			set
			{
				if ((this._HoleScore8 != value))
				{
					this.OnHoleScore8Changing(value);
					this.SendPropertyChanging();
					this._HoleScore8 = value;
					this.SendPropertyChanged("HoleScore8");
					this.OnHoleScore8Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleScore9", DbType="Int NOT NULL")]
		public int HoleScore9
		{
			get
			{
				return this._HoleScore9;
			}
			set
			{
				if ((this._HoleScore9 != value))
				{
					this.OnHoleScore9Changing(value);
					this.SendPropertyChanging();
					this._HoleScore9 = value;
					this.SendPropertyChanged("HoleScore9");
					this.OnHoleScore9Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleScore10", DbType="Int NOT NULL")]
		public int HoleScore10
		{
			get
			{
				return this._HoleScore10;
			}
			set
			{
				if ((this._HoleScore10 != value))
				{
					this.OnHoleScore10Changing(value);
					this.SendPropertyChanging();
					this._HoleScore10 = value;
					this.SendPropertyChanged("HoleScore10");
					this.OnHoleScore10Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleScore11", DbType="Int NOT NULL")]
		public int HoleScore11
		{
			get
			{
				return this._HoleScore11;
			}
			set
			{
				if ((this._HoleScore11 != value))
				{
					this.OnHoleScore11Changing(value);
					this.SendPropertyChanging();
					this._HoleScore11 = value;
					this.SendPropertyChanged("HoleScore11");
					this.OnHoleScore11Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleScore12", DbType="Int NOT NULL")]
		public int HoleScore12
		{
			get
			{
				return this._HoleScore12;
			}
			set
			{
				if ((this._HoleScore12 != value))
				{
					this.OnHoleScore12Changing(value);
					this.SendPropertyChanging();
					this._HoleScore12 = value;
					this.SendPropertyChanged("HoleScore12");
					this.OnHoleScore12Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleScore13", DbType="Int NOT NULL")]
		public int HoleScore13
		{
			get
			{
				return this._HoleScore13;
			}
			set
			{
				if ((this._HoleScore13 != value))
				{
					this.OnHoleScore13Changing(value);
					this.SendPropertyChanging();
					this._HoleScore13 = value;
					this.SendPropertyChanged("HoleScore13");
					this.OnHoleScore13Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleScore14", DbType="Int NOT NULL")]
		public int HoleScore14
		{
			get
			{
				return this._HoleScore14;
			}
			set
			{
				if ((this._HoleScore14 != value))
				{
					this.OnHoleScore14Changing(value);
					this.SendPropertyChanging();
					this._HoleScore14 = value;
					this.SendPropertyChanged("HoleScore14");
					this.OnHoleScore14Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleScore15", DbType="Int NOT NULL")]
		public int HoleScore15
		{
			get
			{
				return this._HoleScore15;
			}
			set
			{
				if ((this._HoleScore15 != value))
				{
					this.OnHoleScore15Changing(value);
					this.SendPropertyChanging();
					this._HoleScore15 = value;
					this.SendPropertyChanged("HoleScore15");
					this.OnHoleScore15Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleScore16", DbType="Int NOT NULL")]
		public int HoleScore16
		{
			get
			{
				return this._HoleScore16;
			}
			set
			{
				if ((this._HoleScore16 != value))
				{
					this.OnHoleScore16Changing(value);
					this.SendPropertyChanging();
					this._HoleScore16 = value;
					this.SendPropertyChanged("HoleScore16");
					this.OnHoleScore16Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleScore17", DbType="Int NOT NULL")]
		public int HoleScore17
		{
			get
			{
				return this._HoleScore17;
			}
			set
			{
				if ((this._HoleScore17 != value))
				{
					this.OnHoleScore17Changing(value);
					this.SendPropertyChanging();
					this._HoleScore17 = value;
					this.SendPropertyChanged("HoleScore17");
					this.OnHoleScore17Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoleScore18", DbType="Int NOT NULL")]
		public int HoleScore18
		{
			get
			{
				return this._HoleScore18;
			}
			set
			{
				if ((this._HoleScore18 != value))
				{
					this.OnHoleScore18Changing(value);
					this.SendPropertyChanging();
					this._HoleScore18 = value;
					this.SendPropertyChanged("HoleScore18");
					this.OnHoleScore18Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartIndex", DbType="Float")]
		public System.Nullable<double> StartIndex
		{
			get
			{
				return this._StartIndex;
			}
			set
			{
				if ((this._StartIndex != value))
				{
					this.OnStartIndexChanging(value);
					this.SendPropertyChanging();
					this._StartIndex = value;
					this.SendPropertyChanged("StartIndex");
					this.OnStartIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartIndex9", DbType="Float")]
		public System.Nullable<double> StartIndex9
		{
			get
			{
				return this._StartIndex9;
			}
			set
			{
				if ((this._StartIndex9 != value))
				{
					this.OnStartIndex9Changing(value);
					this.SendPropertyChanging();
					this._StartIndex9 = value;
					this.SendPropertyChanged("StartIndex9");
					this.OnStartIndex9Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfScore_GolferStatsValue", Storage="_GolferStatsValues", ThisKey="Id", OtherKey="ScoreId")]
		public EntitySet<GolferStatsValue> GolferStatsValues
		{
			get
			{
				return this._GolferStatsValues;
			}
			set
			{
				this._GolferStatsValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfScore_GolfMatchScore", Storage="_GolfMatchScores", ThisKey="Id", OtherKey="ScoreId")]
		public EntitySet<GolfMatchScore> GolfMatchScores
		{
			get
			{
				return this._GolfMatchScores;
			}
			set
			{
				this._GolfMatchScores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_GolfScore", Storage="_Contact", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.GolfScores.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.GolfScores.Add(this);
						this._ContactId = value.Id;
					}
					else
					{
						this._ContactId = default(long);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfCourse_GolfScore", Storage="_GolfCourse", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true)]
		public GolfCourse GolfCourse
		{
			get
			{
				return this._GolfCourse.Entity;
			}
			set
			{
				GolfCourse previousValue = this._GolfCourse.Entity;
				if (((previousValue != value) 
							|| (this._GolfCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GolfCourse.Entity = null;
						previousValue.GolfScores.Remove(this);
					}
					this._GolfCourse.Entity = value;
					if ((value != null))
					{
						value.GolfScores.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(long);
					}
					this.SendPropertyChanged("GolfCourse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfTeeInformation_GolfScore", Storage="_GolfTeeInformation", ThisKey="TeeId", OtherKey="Id", IsForeignKey=true)]
		public GolfTeeInformation GolfTeeInformation
		{
			get
			{
				return this._GolfTeeInformation.Entity;
			}
			set
			{
				GolfTeeInformation previousValue = this._GolfTeeInformation.Entity;
				if (((previousValue != value) 
							|| (this._GolfTeeInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GolfTeeInformation.Entity = null;
						previousValue.GolfScores.Remove(this);
					}
					this._GolfTeeInformation.Entity = value;
					if ((value != null))
					{
						value.GolfScores.Add(this);
						this._TeeId = value.Id;
					}
					else
					{
						this._TeeId = default(long);
					}
					this.SendPropertyChanged("GolfTeeInformation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GolferStatsValues(GolferStatsValue entity)
		{
			this.SendPropertyChanging();
			entity.GolfScore = this;
		}
		
		private void detach_GolferStatsValues(GolferStatsValue entity)
		{
			this.SendPropertyChanging();
			entity.GolfScore = null;
		}
		
		private void attach_GolfMatchScores(GolfMatchScore entity)
		{
			this.SendPropertyChanging();
			entity.GolfScore = this;
		}
		
		private void detach_GolfMatchScores(GolfMatchScore entity)
		{
			this.SendPropertyChanging();
			entity.GolfScore = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GolfStatDef")]
	public partial class GolfStatDef : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private string _ShortName;
		
		private int _DataType;
		
		private bool _IsCalculated;
		
		private bool _IsPerHoleValue;
		
		private string _FormulaCode;
		
		private string _ValidationCode;
		
		private string _ListValues;
		
		private EntitySet<GolferStatsConfiguration> _GolferStatsConfigurations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnDataTypeChanging(int value);
    partial void OnDataTypeChanged();
    partial void OnIsCalculatedChanging(bool value);
    partial void OnIsCalculatedChanged();
    partial void OnIsPerHoleValueChanging(bool value);
    partial void OnIsPerHoleValueChanged();
    partial void OnFormulaCodeChanging(string value);
    partial void OnFormulaCodeChanged();
    partial void OnValidationCodeChanging(string value);
    partial void OnValidationCodeChanged();
    partial void OnListValuesChanging(string value);
    partial void OnListValuesChanged();
    #endregion
		
		public GolfStatDef()
		{
			this._GolferStatsConfigurations = new EntitySet<GolferStatsConfiguration>(new Action<GolferStatsConfiguration>(this.attach_GolferStatsConfigurations), new Action<GolferStatsConfiguration>(this.detach_GolferStatsConfigurations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataType", DbType="Int NOT NULL")]
		public int DataType
		{
			get
			{
				return this._DataType;
			}
			set
			{
				if ((this._DataType != value))
				{
					this.OnDataTypeChanging(value);
					this.SendPropertyChanging();
					this._DataType = value;
					this.SendPropertyChanged("DataType");
					this.OnDataTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCalculated", DbType="Bit NOT NULL")]
		public bool IsCalculated
		{
			get
			{
				return this._IsCalculated;
			}
			set
			{
				if ((this._IsCalculated != value))
				{
					this.OnIsCalculatedChanging(value);
					this.SendPropertyChanging();
					this._IsCalculated = value;
					this.SendPropertyChanged("IsCalculated");
					this.OnIsCalculatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPerHoleValue", DbType="Bit NOT NULL")]
		public bool IsPerHoleValue
		{
			get
			{
				return this._IsPerHoleValue;
			}
			set
			{
				if ((this._IsPerHoleValue != value))
				{
					this.OnIsPerHoleValueChanging(value);
					this.SendPropertyChanging();
					this._IsPerHoleValue = value;
					this.SendPropertyChanged("IsPerHoleValue");
					this.OnIsPerHoleValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormulaCode", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string FormulaCode
		{
			get
			{
				return this._FormulaCode;
			}
			set
			{
				if ((this._FormulaCode != value))
				{
					this.OnFormulaCodeChanging(value);
					this.SendPropertyChanging();
					this._FormulaCode = value;
					this.SendPropertyChanged("FormulaCode");
					this.OnFormulaCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidationCode", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string ValidationCode
		{
			get
			{
				return this._ValidationCode;
			}
			set
			{
				if ((this._ValidationCode != value))
				{
					this.OnValidationCodeChanging(value);
					this.SendPropertyChanging();
					this._ValidationCode = value;
					this.SendPropertyChanged("ValidationCode");
					this.OnValidationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListValues", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string ListValues
		{
			get
			{
				return this._ListValues;
			}
			set
			{
				if ((this._ListValues != value))
				{
					this.OnListValuesChanging(value);
					this.SendPropertyChanging();
					this._ListValues = value;
					this.SendPropertyChanged("ListValues");
					this.OnListValuesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfStatDef_GolferStatsConfiguration", Storage="_GolferStatsConfigurations", ThisKey="Id", OtherKey="StatId")]
		public EntitySet<GolferStatsConfiguration> GolferStatsConfigurations
		{
			get
			{
				return this._GolferStatsConfigurations;
			}
			set
			{
				this._GolferStatsConfigurations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GolferStatsConfigurations(GolferStatsConfiguration entity)
		{
			this.SendPropertyChanging();
			entity.GolfStatDef = this;
		}
		
		private void detach_GolferStatsConfigurations(GolferStatsConfiguration entity)
		{
			this.SendPropertyChanging();
			entity.GolfStatDef = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GolfTeeInformation")]
	public partial class GolfTeeInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _CourseId;
		
		private string _TeeColor;
		
		private string _TeeName;
		
		private double _MensRating;
		
		private double _MensSlope;
		
		private double _WomansRating;
		
		private double _WomansSlope;
		
		private double _MensRatingFront9;
		
		private double _MensSlopeFront9;
		
		private double _WomansRatingFront9;
		
		private double _WomansSlopeFront9;
		
		private double _MensRatingBack9;
		
		private double _MensSlopeBack9;
		
		private double _WomansRatingBack9;
		
		private double _WomansSlopeBack9;
		
		private int _DistanceHole1;
		
		private int _DistanceHole2;
		
		private int _DistanceHole3;
		
		private int _DistanceHole4;
		
		private int _DistanceHole5;
		
		private int _DistanceHole6;
		
		private int _DistanceHole7;
		
		private int _DistanceHole8;
		
		private int _DistanceHole9;
		
		private int _DistanceHole10;
		
		private int _DistanceHole11;
		
		private int _DistanceHole12;
		
		private int _DistanceHole13;
		
		private int _DistanceHole14;
		
		private int _DistanceHole15;
		
		private int _DistanceHole16;
		
		private int _DistanceHole17;
		
		private int _DistanceHole18;
		
		private int _Priority;
		
		private EntitySet<GolfScore> _GolfScores;
		
		private EntityRef<GolfCourse> _GolfCourse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnCourseIdChanging(long value);
    partial void OnCourseIdChanged();
    partial void OnTeeColorChanging(string value);
    partial void OnTeeColorChanged();
    partial void OnTeeNameChanging(string value);
    partial void OnTeeNameChanged();
    partial void OnMensRatingChanging(double value);
    partial void OnMensRatingChanged();
    partial void OnMensSlopeChanging(double value);
    partial void OnMensSlopeChanged();
    partial void OnWomansRatingChanging(double value);
    partial void OnWomansRatingChanged();
    partial void OnWomansSlopeChanging(double value);
    partial void OnWomansSlopeChanged();
    partial void OnMensRatingFront9Changing(double value);
    partial void OnMensRatingFront9Changed();
    partial void OnMensSlopeFront9Changing(double value);
    partial void OnMensSlopeFront9Changed();
    partial void OnWomansRatingFront9Changing(double value);
    partial void OnWomansRatingFront9Changed();
    partial void OnWomansSlopeFront9Changing(double value);
    partial void OnWomansSlopeFront9Changed();
    partial void OnMensRatingBack9Changing(double value);
    partial void OnMensRatingBack9Changed();
    partial void OnMensSlopeBack9Changing(double value);
    partial void OnMensSlopeBack9Changed();
    partial void OnWomansRatingBack9Changing(double value);
    partial void OnWomansRatingBack9Changed();
    partial void OnWomansSlopeBack9Changing(double value);
    partial void OnWomansSlopeBack9Changed();
    partial void OnDistanceHole1Changing(int value);
    partial void OnDistanceHole1Changed();
    partial void OnDistanceHole2Changing(int value);
    partial void OnDistanceHole2Changed();
    partial void OnDistanceHole3Changing(int value);
    partial void OnDistanceHole3Changed();
    partial void OnDistanceHole4Changing(int value);
    partial void OnDistanceHole4Changed();
    partial void OnDistanceHole5Changing(int value);
    partial void OnDistanceHole5Changed();
    partial void OnDistanceHole6Changing(int value);
    partial void OnDistanceHole6Changed();
    partial void OnDistanceHole7Changing(int value);
    partial void OnDistanceHole7Changed();
    partial void OnDistanceHole8Changing(int value);
    partial void OnDistanceHole8Changed();
    partial void OnDistanceHole9Changing(int value);
    partial void OnDistanceHole9Changed();
    partial void OnDistanceHole10Changing(int value);
    partial void OnDistanceHole10Changed();
    partial void OnDistanceHole11Changing(int value);
    partial void OnDistanceHole11Changed();
    partial void OnDistanceHole12Changing(int value);
    partial void OnDistanceHole12Changed();
    partial void OnDistanceHole13Changing(int value);
    partial void OnDistanceHole13Changed();
    partial void OnDistanceHole14Changing(int value);
    partial void OnDistanceHole14Changed();
    partial void OnDistanceHole15Changing(int value);
    partial void OnDistanceHole15Changed();
    partial void OnDistanceHole16Changing(int value);
    partial void OnDistanceHole16Changed();
    partial void OnDistanceHole17Changing(int value);
    partial void OnDistanceHole17Changed();
    partial void OnDistanceHole18Changing(int value);
    partial void OnDistanceHole18Changed();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    #endregion
		
		public GolfTeeInformation()
		{
			this._GolfScores = new EntitySet<GolfScore>(new Action<GolfScore>(this.attach_GolfScores), new Action<GolfScore>(this.detach_GolfScores));
			this._GolfCourse = default(EntityRef<GolfCourse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="BigInt NOT NULL")]
		public long CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._GolfCourse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeeColor", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string TeeColor
		{
			get
			{
				return this._TeeColor;
			}
			set
			{
				if ((this._TeeColor != value))
				{
					this.OnTeeColorChanging(value);
					this.SendPropertyChanging();
					this._TeeColor = value;
					this.SendPropertyChanged("TeeColor");
					this.OnTeeColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeeName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string TeeName
		{
			get
			{
				return this._TeeName;
			}
			set
			{
				if ((this._TeeName != value))
				{
					this.OnTeeNameChanging(value);
					this.SendPropertyChanging();
					this._TeeName = value;
					this.SendPropertyChanged("TeeName");
					this.OnTeeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensRating", DbType="Float NOT NULL")]
		public double MensRating
		{
			get
			{
				return this._MensRating;
			}
			set
			{
				if ((this._MensRating != value))
				{
					this.OnMensRatingChanging(value);
					this.SendPropertyChanging();
					this._MensRating = value;
					this.SendPropertyChanged("MensRating");
					this.OnMensRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensSlope", DbType="Float NOT NULL")]
		public double MensSlope
		{
			get
			{
				return this._MensSlope;
			}
			set
			{
				if ((this._MensSlope != value))
				{
					this.OnMensSlopeChanging(value);
					this.SendPropertyChanging();
					this._MensSlope = value;
					this.SendPropertyChanged("MensSlope");
					this.OnMensSlopeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansRating", DbType="Float NOT NULL")]
		public double WomansRating
		{
			get
			{
				return this._WomansRating;
			}
			set
			{
				if ((this._WomansRating != value))
				{
					this.OnWomansRatingChanging(value);
					this.SendPropertyChanging();
					this._WomansRating = value;
					this.SendPropertyChanged("WomansRating");
					this.OnWomansRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansSlope", DbType="Float NOT NULL")]
		public double WomansSlope
		{
			get
			{
				return this._WomansSlope;
			}
			set
			{
				if ((this._WomansSlope != value))
				{
					this.OnWomansSlopeChanging(value);
					this.SendPropertyChanging();
					this._WomansSlope = value;
					this.SendPropertyChanged("WomansSlope");
					this.OnWomansSlopeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensRatingFront9", DbType="Float NOT NULL")]
		public double MensRatingFront9
		{
			get
			{
				return this._MensRatingFront9;
			}
			set
			{
				if ((this._MensRatingFront9 != value))
				{
					this.OnMensRatingFront9Changing(value);
					this.SendPropertyChanging();
					this._MensRatingFront9 = value;
					this.SendPropertyChanged("MensRatingFront9");
					this.OnMensRatingFront9Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensSlopeFront9", DbType="Float NOT NULL")]
		public double MensSlopeFront9
		{
			get
			{
				return this._MensSlopeFront9;
			}
			set
			{
				if ((this._MensSlopeFront9 != value))
				{
					this.OnMensSlopeFront9Changing(value);
					this.SendPropertyChanging();
					this._MensSlopeFront9 = value;
					this.SendPropertyChanged("MensSlopeFront9");
					this.OnMensSlopeFront9Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansRatingFront9", DbType="Float NOT NULL")]
		public double WomansRatingFront9
		{
			get
			{
				return this._WomansRatingFront9;
			}
			set
			{
				if ((this._WomansRatingFront9 != value))
				{
					this.OnWomansRatingFront9Changing(value);
					this.SendPropertyChanging();
					this._WomansRatingFront9 = value;
					this.SendPropertyChanged("WomansRatingFront9");
					this.OnWomansRatingFront9Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansSlopeFront9", DbType="Float NOT NULL")]
		public double WomansSlopeFront9
		{
			get
			{
				return this._WomansSlopeFront9;
			}
			set
			{
				if ((this._WomansSlopeFront9 != value))
				{
					this.OnWomansSlopeFront9Changing(value);
					this.SendPropertyChanging();
					this._WomansSlopeFront9 = value;
					this.SendPropertyChanged("WomansSlopeFront9");
					this.OnWomansSlopeFront9Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensRatingBack9", DbType="Float NOT NULL")]
		public double MensRatingBack9
		{
			get
			{
				return this._MensRatingBack9;
			}
			set
			{
				if ((this._MensRatingBack9 != value))
				{
					this.OnMensRatingBack9Changing(value);
					this.SendPropertyChanging();
					this._MensRatingBack9 = value;
					this.SendPropertyChanged("MensRatingBack9");
					this.OnMensRatingBack9Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MensSlopeBack9", DbType="Float NOT NULL")]
		public double MensSlopeBack9
		{
			get
			{
				return this._MensSlopeBack9;
			}
			set
			{
				if ((this._MensSlopeBack9 != value))
				{
					this.OnMensSlopeBack9Changing(value);
					this.SendPropertyChanging();
					this._MensSlopeBack9 = value;
					this.SendPropertyChanged("MensSlopeBack9");
					this.OnMensSlopeBack9Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansRatingBack9", DbType="Float NOT NULL")]
		public double WomansRatingBack9
		{
			get
			{
				return this._WomansRatingBack9;
			}
			set
			{
				if ((this._WomansRatingBack9 != value))
				{
					this.OnWomansRatingBack9Changing(value);
					this.SendPropertyChanging();
					this._WomansRatingBack9 = value;
					this.SendPropertyChanged("WomansRatingBack9");
					this.OnWomansRatingBack9Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WomansSlopeBack9", DbType="Float NOT NULL")]
		public double WomansSlopeBack9
		{
			get
			{
				return this._WomansSlopeBack9;
			}
			set
			{
				if ((this._WomansSlopeBack9 != value))
				{
					this.OnWomansSlopeBack9Changing(value);
					this.SendPropertyChanging();
					this._WomansSlopeBack9 = value;
					this.SendPropertyChanged("WomansSlopeBack9");
					this.OnWomansSlopeBack9Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistanceHole1", DbType="Int NOT NULL")]
		public int DistanceHole1
		{
			get
			{
				return this._DistanceHole1;
			}
			set
			{
				if ((this._DistanceHole1 != value))
				{
					this.OnDistanceHole1Changing(value);
					this.SendPropertyChanging();
					this._DistanceHole1 = value;
					this.SendPropertyChanged("DistanceHole1");
					this.OnDistanceHole1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistanceHole2", DbType="Int NOT NULL")]
		public int DistanceHole2
		{
			get
			{
				return this._DistanceHole2;
			}
			set
			{
				if ((this._DistanceHole2 != value))
				{
					this.OnDistanceHole2Changing(value);
					this.SendPropertyChanging();
					this._DistanceHole2 = value;
					this.SendPropertyChanged("DistanceHole2");
					this.OnDistanceHole2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistanceHole3", DbType="Int NOT NULL")]
		public int DistanceHole3
		{
			get
			{
				return this._DistanceHole3;
			}
			set
			{
				if ((this._DistanceHole3 != value))
				{
					this.OnDistanceHole3Changing(value);
					this.SendPropertyChanging();
					this._DistanceHole3 = value;
					this.SendPropertyChanged("DistanceHole3");
					this.OnDistanceHole3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistanceHole4", DbType="Int NOT NULL")]
		public int DistanceHole4
		{
			get
			{
				return this._DistanceHole4;
			}
			set
			{
				if ((this._DistanceHole4 != value))
				{
					this.OnDistanceHole4Changing(value);
					this.SendPropertyChanging();
					this._DistanceHole4 = value;
					this.SendPropertyChanged("DistanceHole4");
					this.OnDistanceHole4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistanceHole5", DbType="Int NOT NULL")]
		public int DistanceHole5
		{
			get
			{
				return this._DistanceHole5;
			}
			set
			{
				if ((this._DistanceHole5 != value))
				{
					this.OnDistanceHole5Changing(value);
					this.SendPropertyChanging();
					this._DistanceHole5 = value;
					this.SendPropertyChanged("DistanceHole5");
					this.OnDistanceHole5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistanceHole6", DbType="Int NOT NULL")]
		public int DistanceHole6
		{
			get
			{
				return this._DistanceHole6;
			}
			set
			{
				if ((this._DistanceHole6 != value))
				{
					this.OnDistanceHole6Changing(value);
					this.SendPropertyChanging();
					this._DistanceHole6 = value;
					this.SendPropertyChanged("DistanceHole6");
					this.OnDistanceHole6Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistanceHole7", DbType="Int NOT NULL")]
		public int DistanceHole7
		{
			get
			{
				return this._DistanceHole7;
			}
			set
			{
				if ((this._DistanceHole7 != value))
				{
					this.OnDistanceHole7Changing(value);
					this.SendPropertyChanging();
					this._DistanceHole7 = value;
					this.SendPropertyChanged("DistanceHole7");
					this.OnDistanceHole7Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistanceHole8", DbType="Int NOT NULL")]
		public int DistanceHole8
		{
			get
			{
				return this._DistanceHole8;
			}
			set
			{
				if ((this._DistanceHole8 != value))
				{
					this.OnDistanceHole8Changing(value);
					this.SendPropertyChanging();
					this._DistanceHole8 = value;
					this.SendPropertyChanged("DistanceHole8");
					this.OnDistanceHole8Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistanceHole9", DbType="Int NOT NULL")]
		public int DistanceHole9
		{
			get
			{
				return this._DistanceHole9;
			}
			set
			{
				if ((this._DistanceHole9 != value))
				{
					this.OnDistanceHole9Changing(value);
					this.SendPropertyChanging();
					this._DistanceHole9 = value;
					this.SendPropertyChanged("DistanceHole9");
					this.OnDistanceHole9Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistanceHole10", DbType="Int NOT NULL")]
		public int DistanceHole10
		{
			get
			{
				return this._DistanceHole10;
			}
			set
			{
				if ((this._DistanceHole10 != value))
				{
					this.OnDistanceHole10Changing(value);
					this.SendPropertyChanging();
					this._DistanceHole10 = value;
					this.SendPropertyChanged("DistanceHole10");
					this.OnDistanceHole10Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistanceHole11", DbType="Int NOT NULL")]
		public int DistanceHole11
		{
			get
			{
				return this._DistanceHole11;
			}
			set
			{
				if ((this._DistanceHole11 != value))
				{
					this.OnDistanceHole11Changing(value);
					this.SendPropertyChanging();
					this._DistanceHole11 = value;
					this.SendPropertyChanged("DistanceHole11");
					this.OnDistanceHole11Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistanceHole12", DbType="Int NOT NULL")]
		public int DistanceHole12
		{
			get
			{
				return this._DistanceHole12;
			}
			set
			{
				if ((this._DistanceHole12 != value))
				{
					this.OnDistanceHole12Changing(value);
					this.SendPropertyChanging();
					this._DistanceHole12 = value;
					this.SendPropertyChanged("DistanceHole12");
					this.OnDistanceHole12Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistanceHole13", DbType="Int NOT NULL")]
		public int DistanceHole13
		{
			get
			{
				return this._DistanceHole13;
			}
			set
			{
				if ((this._DistanceHole13 != value))
				{
					this.OnDistanceHole13Changing(value);
					this.SendPropertyChanging();
					this._DistanceHole13 = value;
					this.SendPropertyChanged("DistanceHole13");
					this.OnDistanceHole13Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistanceHole14", DbType="Int NOT NULL")]
		public int DistanceHole14
		{
			get
			{
				return this._DistanceHole14;
			}
			set
			{
				if ((this._DistanceHole14 != value))
				{
					this.OnDistanceHole14Changing(value);
					this.SendPropertyChanging();
					this._DistanceHole14 = value;
					this.SendPropertyChanged("DistanceHole14");
					this.OnDistanceHole14Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistanceHole15", DbType="Int NOT NULL")]
		public int DistanceHole15
		{
			get
			{
				return this._DistanceHole15;
			}
			set
			{
				if ((this._DistanceHole15 != value))
				{
					this.OnDistanceHole15Changing(value);
					this.SendPropertyChanging();
					this._DistanceHole15 = value;
					this.SendPropertyChanged("DistanceHole15");
					this.OnDistanceHole15Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistanceHole16", DbType="Int NOT NULL")]
		public int DistanceHole16
		{
			get
			{
				return this._DistanceHole16;
			}
			set
			{
				if ((this._DistanceHole16 != value))
				{
					this.OnDistanceHole16Changing(value);
					this.SendPropertyChanging();
					this._DistanceHole16 = value;
					this.SendPropertyChanged("DistanceHole16");
					this.OnDistanceHole16Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistanceHole17", DbType="Int NOT NULL")]
		public int DistanceHole17
		{
			get
			{
				return this._DistanceHole17;
			}
			set
			{
				if ((this._DistanceHole17 != value))
				{
					this.OnDistanceHole17Changing(value);
					this.SendPropertyChanging();
					this._DistanceHole17 = value;
					this.SendPropertyChanged("DistanceHole17");
					this.OnDistanceHole17Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistanceHole18", DbType="Int NOT NULL")]
		public int DistanceHole18
		{
			get
			{
				return this._DistanceHole18;
			}
			set
			{
				if ((this._DistanceHole18 != value))
				{
					this.OnDistanceHole18Changing(value);
					this.SendPropertyChanging();
					this._DistanceHole18 = value;
					this.SendPropertyChanged("DistanceHole18");
					this.OnDistanceHole18Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfTeeInformation_GolfScore", Storage="_GolfScores", ThisKey="Id", OtherKey="TeeId")]
		public EntitySet<GolfScore> GolfScores
		{
			get
			{
				return this._GolfScores;
			}
			set
			{
				this._GolfScores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GolfCourse_GolfTeeInformation", Storage="_GolfCourse", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public GolfCourse GolfCourse
		{
			get
			{
				return this._GolfCourse.Entity;
			}
			set
			{
				GolfCourse previousValue = this._GolfCourse.Entity;
				if (((previousValue != value) 
							|| (this._GolfCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GolfCourse.Entity = null;
						previousValue.GolfTeeInformations.Remove(this);
					}
					this._GolfCourse.Entity = value;
					if ((value != null))
					{
						value.GolfTeeInformations.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(long);
					}
					this.SendPropertyChanged("GolfCourse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GolfScores(GolfScore entity)
		{
			this.SendPropertyChanging();
			entity.GolfTeeInformation = this;
		}
		
		private void detach_GolfScores(GolfScore entity)
		{
			this.SendPropertyChanging();
			entity.GolfTeeInformation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.hof")]
	public partial class hof : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private int _YearInducted;
		
		private long _ContactId;
		
		private string _Bio;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnYearInductedChanging(int value);
    partial void OnYearInductedChanged();
    partial void OnContactIdChanging(long value);
    partial void OnContactIdChanged();
    partial void OnBioChanging(string value);
    partial void OnBioChanged();
    #endregion
		
		public hof()
		{
			this._Account = default(EntityRef<Account>);
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearInducted", DbType="Int NOT NULL")]
		public int YearInducted
		{
			get
			{
				return this._YearInducted;
			}
			set
			{
				if ((this._YearInducted != value))
				{
					this.OnYearInductedChanging(value);
					this.SendPropertyChanging();
					this._YearInducted = value;
					this.SendPropertyChanged("YearInducted");
					this.OnYearInductedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="BigInt NOT NULL")]
		public long ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bio", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Bio
		{
			get
			{
				return this._Bio;
			}
			set
			{
				if ((this._Bio != value))
				{
					this.OnBioChanging(value);
					this.SendPropertyChanging();
					this._Bio = value;
					this.SendPropertyChanged("Bio");
					this.OnBioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_hof", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.hofs.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.hofs.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_hof", Storage="_Contact", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.hofs.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.hofs.Add(this);
						this._ContactId = value.Id;
					}
					else
					{
						this._ContactId = default(long);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HOFNomination")]
	public partial class HOFNomination : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private string _Nominator;
		
		private string _PhoneNumber;
		
		private string _EMail;
		
		private string _Nominee;
		
		private string _Reason;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnNominatorChanging(string value);
    partial void OnNominatorChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnEMailChanging(string value);
    partial void OnEMailChanged();
    partial void OnNomineeChanging(string value);
    partial void OnNomineeChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    #endregion
		
		public HOFNomination()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nominator", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nominator
		{
			get
			{
				return this._Nominator;
			}
			set
			{
				if ((this._Nominator != value))
				{
					this.OnNominatorChanging(value);
					this.SendPropertyChanging();
					this._Nominator = value;
					this.SendPropertyChanged("Nominator");
					this.OnNominatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(14) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMail", DbType="VarChar(75) NOT NULL", CanBeNull=false)]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nominee", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nominee
		{
			get
			{
				return this._Nominee;
			}
			set
			{
				if ((this._Nominee != value))
				{
					this.OnNomineeChanging(value);
					this.SendPropertyChanging();
					this._Nominee = value;
					this.SendPropertyChanged("Nominee");
					this.OnNomineeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_HOFNomination", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.HOFNominations.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.HOFNominations.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HOFNominationSetup")]
	public partial class HOFNominationSetup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AccountId;
		
		private bool _EnableNomination;
		
		private string _CriteriaText;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnEnableNominationChanging(bool value);
    partial void OnEnableNominationChanged();
    partial void OnCriteriaTextChanging(string value);
    partial void OnCriteriaTextChanged();
    #endregion
		
		public HOFNominationSetup()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnableNomination", DbType="Bit NOT NULL")]
		public bool EnableNomination
		{
			get
			{
				return this._EnableNomination;
			}
			set
			{
				if ((this._EnableNomination != value))
				{
					this.OnEnableNominationChanging(value);
					this.SendPropertyChanging();
					this._EnableNomination = value;
					this.SendPropertyChanged("EnableNomination");
					this.OnEnableNominationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CriteriaText", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CriteriaText
		{
			get
			{
				return this._CriteriaText;
			}
			set
			{
				if ((this._CriteriaText != value))
				{
					this.OnCriteriaTextChanging(value);
					this.SendPropertyChanging();
					this._CriteriaText = value;
					this.SendPropertyChanged("CriteriaText");
					this.OnCriteriaTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_HOFNominationSetup", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.HOFNominationSetup = null;
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.HOFNominationSetup = this;
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.League")]
	public partial class League : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private string _Name;
		
		private EntitySet<LeagueSeason> _LeagueSeasons;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public League()
		{
			this._LeagueSeasons = new EntitySet<LeagueSeason>(new Action<LeagueSeason>(this.attach_LeagueSeasons), new Action<LeagueSeason>(this.detach_LeagueSeasons));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_LeagueSeason", Storage="_LeagueSeasons", ThisKey="Id", OtherKey="LeagueId")]
		public EntitySet<LeagueSeason> LeagueSeasons
		{
			get
			{
				return this._LeagueSeasons;
			}
			set
			{
				this._LeagueSeasons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_League", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Leagues.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Leagues.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LeagueSeasons(LeagueSeason entity)
		{
			this.SendPropertyChanging();
			entity.League = this;
		}
		
		private void detach_LeagueSeasons(LeagueSeason entity)
		{
			this.SendPropertyChanging();
			entity.League = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeagueEvents")]
	public partial class LeagueEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.DateTime _EventDate;
		
		private string _Description;
		
		private long _LeagueSeasonId;
		
		private EntityRef<LeagueSeason> _LeagueSeason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnEventDateChanging(System.DateTime value);
    partial void OnEventDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLeagueSeasonIdChanging(long value);
    partial void OnLeagueSeasonIdChanged();
    #endregion
		
		public LeagueEvent()
		{
			this._LeagueSeason = default(EntityRef<LeagueSeason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime EventDate
		{
			get
			{
				return this._EventDate;
			}
			set
			{
				if ((this._EventDate != value))
				{
					this.OnEventDateChanging(value);
					this.SendPropertyChanging();
					this._EventDate = value;
					this.SendPropertyChanged("EventDate");
					this.OnEventDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueSeasonId", DbType="BigInt NOT NULL")]
		public long LeagueSeasonId
		{
			get
			{
				return this._LeagueSeasonId;
			}
			set
			{
				if ((this._LeagueSeasonId != value))
				{
					if (this._LeagueSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._LeagueSeasonId = value;
					this.SendPropertyChanged("LeagueSeasonId");
					this.OnLeagueSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSeason_LeagueEvent", Storage="_LeagueSeason", ThisKey="LeagueSeasonId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LeagueSeason LeagueSeason
		{
			get
			{
				return this._LeagueSeason.Entity;
			}
			set
			{
				LeagueSeason previousValue = this._LeagueSeason.Entity;
				if (((previousValue != value) 
							|| (this._LeagueSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueSeason.Entity = null;
						previousValue.LeagueEvents.Remove(this);
					}
					this._LeagueSeason.Entity = value;
					if ((value != null))
					{
						value.LeagueEvents.Add(this);
						this._LeagueSeasonId = value.Id;
					}
					else
					{
						this._LeagueSeasonId = default(long);
					}
					this.SendPropertyChanged("LeagueSeason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeagueFAQ")]
	public partial class LeagueFAQ : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private string _Question;
		
		private string _Answer;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnQuestionChanging(string value);
    partial void OnQuestionChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    #endregion
		
		public LeagueFAQ()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				if ((this._Question != value))
				{
					this.OnQuestionChanging(value);
					this.SendPropertyChanging();
					this._Question = value;
					this.SendPropertyChanged("Question");
					this.OnQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_LeagueFAQ", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.LeagueFAQs.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.LeagueFAQs.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeagueNews")]
	public partial class LeagueNew : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private System.DateTime _Date;
		
		private string _Title;
		
		private string _Text;
		
		private bool _SpecialAnnounce;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnSpecialAnnounceChanging(bool value);
    partial void OnSpecialAnnounceChanged();
    #endregion
		
		public LeagueNew()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialAnnounce", DbType="Bit NOT NULL")]
		public bool SpecialAnnounce
		{
			get
			{
				return this._SpecialAnnounce;
			}
			set
			{
				if ((this._SpecialAnnounce != value))
				{
					this.OnSpecialAnnounceChanging(value);
					this.SendPropertyChanging();
					this._SpecialAnnounce = value;
					this.SendPropertyChanged("SpecialAnnounce");
					this.OnSpecialAnnounceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_LeagueNew", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.LeagueNews.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.LeagueNews.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeagueSchedule")]
	public partial class LeagueSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.DateTime _GameDate;
		
		private long _HTeamId;
		
		private long _VTeamId;
		
		private int _HScore;
		
		private int _VScore;
		
		private string _Comment;
		
		private long _FieldId;
		
		private long _LeagueId;
		
		private int _GameStatus;
		
		private long _GameType;
		
		private long _Umpire1;
		
		private long _Umpire2;
		
		private long _Umpire3;
		
		private long _Umpire4;
		
		private EntitySet<GameRecap> _GameRecaps;
		
		private EntitySet<batstatsum> _batstatsums;
		
		private EntitySet<fieldstatsum> _fieldstatsums;
		
		private EntitySet<GameEjection> _GameEjections;
		
		private EntitySet<pitchstatsum> _pitchstatsums;
		
		private EntitySet<PlayerRecap> _PlayerRecaps;
		
		private EntityRef<LeagueSeason> _LeagueSeason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnGameDateChanging(System.DateTime value);
    partial void OnGameDateChanged();
    partial void OnHTeamIdChanging(long value);
    partial void OnHTeamIdChanged();
    partial void OnVTeamIdChanging(long value);
    partial void OnVTeamIdChanged();
    partial void OnHScoreChanging(int value);
    partial void OnHScoreChanged();
    partial void OnVScoreChanging(int value);
    partial void OnVScoreChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnFieldIdChanging(long value);
    partial void OnFieldIdChanged();
    partial void OnLeagueIdChanging(long value);
    partial void OnLeagueIdChanged();
    partial void OnGameStatusChanging(int value);
    partial void OnGameStatusChanged();
    partial void OnGameTypeChanging(long value);
    partial void OnGameTypeChanged();
    partial void OnUmpire1Changing(long value);
    partial void OnUmpire1Changed();
    partial void OnUmpire2Changing(long value);
    partial void OnUmpire2Changed();
    partial void OnUmpire3Changing(long value);
    partial void OnUmpire3Changed();
    partial void OnUmpire4Changing(long value);
    partial void OnUmpire4Changed();
    #endregion
		
		public LeagueSchedule()
		{
			this._GameRecaps = new EntitySet<GameRecap>(new Action<GameRecap>(this.attach_GameRecaps), new Action<GameRecap>(this.detach_GameRecaps));
			this._batstatsums = new EntitySet<batstatsum>(new Action<batstatsum>(this.attach_batstatsums), new Action<batstatsum>(this.detach_batstatsums));
			this._fieldstatsums = new EntitySet<fieldstatsum>(new Action<fieldstatsum>(this.attach_fieldstatsums), new Action<fieldstatsum>(this.detach_fieldstatsums));
			this._GameEjections = new EntitySet<GameEjection>(new Action<GameEjection>(this.attach_GameEjections), new Action<GameEjection>(this.detach_GameEjections));
			this._pitchstatsums = new EntitySet<pitchstatsum>(new Action<pitchstatsum>(this.attach_pitchstatsums), new Action<pitchstatsum>(this.detach_pitchstatsums));
			this._PlayerRecaps = new EntitySet<PlayerRecap>(new Action<PlayerRecap>(this.attach_PlayerRecaps), new Action<PlayerRecap>(this.detach_PlayerRecaps));
			this._LeagueSeason = default(EntityRef<LeagueSeason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime GameDate
		{
			get
			{
				return this._GameDate;
			}
			set
			{
				if ((this._GameDate != value))
				{
					this.OnGameDateChanging(value);
					this.SendPropertyChanging();
					this._GameDate = value;
					this.SendPropertyChanged("GameDate");
					this.OnGameDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HTeamId", DbType="BigInt NOT NULL")]
		public long HTeamId
		{
			get
			{
				return this._HTeamId;
			}
			set
			{
				if ((this._HTeamId != value))
				{
					this.OnHTeamIdChanging(value);
					this.SendPropertyChanging();
					this._HTeamId = value;
					this.SendPropertyChanged("HTeamId");
					this.OnHTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VTeamId", DbType="BigInt NOT NULL")]
		public long VTeamId
		{
			get
			{
				return this._VTeamId;
			}
			set
			{
				if ((this._VTeamId != value))
				{
					this.OnVTeamIdChanging(value);
					this.SendPropertyChanging();
					this._VTeamId = value;
					this.SendPropertyChanged("VTeamId");
					this.OnVTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HScore", DbType="Int NOT NULL")]
		public int HScore
		{
			get
			{
				return this._HScore;
			}
			set
			{
				if ((this._HScore != value))
				{
					this.OnHScoreChanging(value);
					this.SendPropertyChanging();
					this._HScore = value;
					this.SendPropertyChanged("HScore");
					this.OnHScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VScore", DbType="Int NOT NULL")]
		public int VScore
		{
			get
			{
				return this._VScore;
			}
			set
			{
				if ((this._VScore != value))
				{
					this.OnVScoreChanging(value);
					this.SendPropertyChanging();
					this._VScore = value;
					this.SendPropertyChanged("VScore");
					this.OnVScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldId", DbType="BigInt NOT NULL")]
		public long FieldId
		{
			get
			{
				return this._FieldId;
			}
			set
			{
				if ((this._FieldId != value))
				{
					this.OnFieldIdChanging(value);
					this.SendPropertyChanging();
					this._FieldId = value;
					this.SendPropertyChanged("FieldId");
					this.OnFieldIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueId", DbType="BigInt NOT NULL")]
		public long LeagueId
		{
			get
			{
				return this._LeagueId;
			}
			set
			{
				if ((this._LeagueId != value))
				{
					if (this._LeagueSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueIdChanging(value);
					this.SendPropertyChanging();
					this._LeagueId = value;
					this.SendPropertyChanged("LeagueId");
					this.OnLeagueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameStatus", DbType="Int NOT NULL")]
		public int GameStatus
		{
			get
			{
				return this._GameStatus;
			}
			set
			{
				if ((this._GameStatus != value))
				{
					this.OnGameStatusChanging(value);
					this.SendPropertyChanging();
					this._GameStatus = value;
					this.SendPropertyChanged("GameStatus");
					this.OnGameStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameType", DbType="BigInt NOT NULL")]
		public long GameType
		{
			get
			{
				return this._GameType;
			}
			set
			{
				if ((this._GameType != value))
				{
					this.OnGameTypeChanging(value);
					this.SendPropertyChanging();
					this._GameType = value;
					this.SendPropertyChanged("GameType");
					this.OnGameTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Umpire1", DbType="BigInt NOT NULL")]
		public long Umpire1
		{
			get
			{
				return this._Umpire1;
			}
			set
			{
				if ((this._Umpire1 != value))
				{
					this.OnUmpire1Changing(value);
					this.SendPropertyChanging();
					this._Umpire1 = value;
					this.SendPropertyChanged("Umpire1");
					this.OnUmpire1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Umpire2", DbType="BigInt NOT NULL")]
		public long Umpire2
		{
			get
			{
				return this._Umpire2;
			}
			set
			{
				if ((this._Umpire2 != value))
				{
					this.OnUmpire2Changing(value);
					this.SendPropertyChanging();
					this._Umpire2 = value;
					this.SendPropertyChanged("Umpire2");
					this.OnUmpire2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Umpire3", DbType="BigInt NOT NULL")]
		public long Umpire3
		{
			get
			{
				return this._Umpire3;
			}
			set
			{
				if ((this._Umpire3 != value))
				{
					this.OnUmpire3Changing(value);
					this.SendPropertyChanging();
					this._Umpire3 = value;
					this.SendPropertyChanged("Umpire3");
					this.OnUmpire3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Umpire4", DbType="BigInt NOT NULL")]
		public long Umpire4
		{
			get
			{
				return this._Umpire4;
			}
			set
			{
				if ((this._Umpire4 != value))
				{
					this.OnUmpire4Changing(value);
					this.SendPropertyChanging();
					this._Umpire4 = value;
					this.SendPropertyChanged("Umpire4");
					this.OnUmpire4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSchedule_GameRecap", Storage="_GameRecaps", ThisKey="Id", OtherKey="GameId")]
		public EntitySet<GameRecap> GameRecaps
		{
			get
			{
				return this._GameRecaps;
			}
			set
			{
				this._GameRecaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSchedule_batstatsum", Storage="_batstatsums", ThisKey="Id", OtherKey="GameId")]
		public EntitySet<batstatsum> batstatsums
		{
			get
			{
				return this._batstatsums;
			}
			set
			{
				this._batstatsums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSchedule_fieldstatsum", Storage="_fieldstatsums", ThisKey="Id", OtherKey="GameId")]
		public EntitySet<fieldstatsum> fieldstatsums
		{
			get
			{
				return this._fieldstatsums;
			}
			set
			{
				this._fieldstatsums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSchedule_GameEjection", Storage="_GameEjections", ThisKey="Id", OtherKey="gameId")]
		public EntitySet<GameEjection> GameEjections
		{
			get
			{
				return this._GameEjections;
			}
			set
			{
				this._GameEjections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSchedule_pitchstatsum", Storage="_pitchstatsums", ThisKey="Id", OtherKey="GameId")]
		public EntitySet<pitchstatsum> pitchstatsums
		{
			get
			{
				return this._pitchstatsums;
			}
			set
			{
				this._pitchstatsums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSchedule_PlayerRecap", Storage="_PlayerRecaps", ThisKey="Id", OtherKey="GameId")]
		public EntitySet<PlayerRecap> PlayerRecaps
		{
			get
			{
				return this._PlayerRecaps;
			}
			set
			{
				this._PlayerRecaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSeason_LeagueSchedule", Storage="_LeagueSeason", ThisKey="LeagueId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LeagueSeason LeagueSeason
		{
			get
			{
				return this._LeagueSeason.Entity;
			}
			set
			{
				LeagueSeason previousValue = this._LeagueSeason.Entity;
				if (((previousValue != value) 
							|| (this._LeagueSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueSeason.Entity = null;
						previousValue.LeagueSchedules.Remove(this);
					}
					this._LeagueSeason.Entity = value;
					if ((value != null))
					{
						value.LeagueSchedules.Add(this);
						this._LeagueId = value.Id;
					}
					else
					{
						this._LeagueId = default(long);
					}
					this.SendPropertyChanged("LeagueSeason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GameRecaps(GameRecap entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSchedule = this;
		}
		
		private void detach_GameRecaps(GameRecap entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSchedule = null;
		}
		
		private void attach_batstatsums(batstatsum entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSchedule = this;
		}
		
		private void detach_batstatsums(batstatsum entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSchedule = null;
		}
		
		private void attach_fieldstatsums(fieldstatsum entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSchedule = this;
		}
		
		private void detach_fieldstatsums(fieldstatsum entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSchedule = null;
		}
		
		private void attach_GameEjections(GameEjection entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSchedule = this;
		}
		
		private void detach_GameEjections(GameEjection entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSchedule = null;
		}
		
		private void attach_pitchstatsums(pitchstatsum entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSchedule = this;
		}
		
		private void detach_pitchstatsums(pitchstatsum entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSchedule = null;
		}
		
		private void attach_PlayerRecaps(PlayerRecap entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSchedule = this;
		}
		
		private void detach_PlayerRecaps(PlayerRecap entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSchedule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeagueSeason")]
	public partial class LeagueSeason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _LeagueId;
		
		private long _SeasonId;
		
		private EntitySet<DivisionSeason> _DivisionSeasons;
		
		private EntitySet<GameEjection> _GameEjections;
		
		private EntitySet<GolfMatch> _GolfMatches;
		
		private EntitySet<LeagueEvent> _LeagueEvents;
		
		private EntitySet<LeagueSchedule> _LeagueSchedules;
		
		private EntitySet<PlayoffSetup> _PlayoffSetups;
		
		private EntitySet<TeamsSeason> _TeamsSeasons;
		
		private EntityRef<League> _League;
		
		private EntityRef<Season> _Season;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnLeagueIdChanging(long value);
    partial void OnLeagueIdChanged();
    partial void OnSeasonIdChanging(long value);
    partial void OnSeasonIdChanged();
    #endregion
		
		public LeagueSeason()
		{
			this._DivisionSeasons = new EntitySet<DivisionSeason>(new Action<DivisionSeason>(this.attach_DivisionSeasons), new Action<DivisionSeason>(this.detach_DivisionSeasons));
			this._GameEjections = new EntitySet<GameEjection>(new Action<GameEjection>(this.attach_GameEjections), new Action<GameEjection>(this.detach_GameEjections));
			this._GolfMatches = new EntitySet<GolfMatch>(new Action<GolfMatch>(this.attach_GolfMatches), new Action<GolfMatch>(this.detach_GolfMatches));
			this._LeagueEvents = new EntitySet<LeagueEvent>(new Action<LeagueEvent>(this.attach_LeagueEvents), new Action<LeagueEvent>(this.detach_LeagueEvents));
			this._LeagueSchedules = new EntitySet<LeagueSchedule>(new Action<LeagueSchedule>(this.attach_LeagueSchedules), new Action<LeagueSchedule>(this.detach_LeagueSchedules));
			this._PlayoffSetups = new EntitySet<PlayoffSetup>(new Action<PlayoffSetup>(this.attach_PlayoffSetups), new Action<PlayoffSetup>(this.detach_PlayoffSetups));
			this._TeamsSeasons = new EntitySet<TeamsSeason>(new Action<TeamsSeason>(this.attach_TeamsSeasons), new Action<TeamsSeason>(this.detach_TeamsSeasons));
			this._League = default(EntityRef<League>);
			this._Season = default(EntityRef<Season>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueId", DbType="BigInt NOT NULL")]
		public long LeagueId
		{
			get
			{
				return this._LeagueId;
			}
			set
			{
				if ((this._LeagueId != value))
				{
					if (this._League.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueIdChanging(value);
					this.SendPropertyChanging();
					this._LeagueId = value;
					this.SendPropertyChanged("LeagueId");
					this.OnLeagueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonId", DbType="BigInt NOT NULL")]
		public long SeasonId
		{
			get
			{
				return this._SeasonId;
			}
			set
			{
				if ((this._SeasonId != value))
				{
					if (this._Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._SeasonId = value;
					this.SendPropertyChanged("SeasonId");
					this.OnSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSeason_DivisionSeason", Storage="_DivisionSeasons", ThisKey="Id", OtherKey="LeagueSeasonId")]
		public EntitySet<DivisionSeason> DivisionSeasons
		{
			get
			{
				return this._DivisionSeasons;
			}
			set
			{
				this._DivisionSeasons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSeason_GameEjection", Storage="_GameEjections", ThisKey="Id", OtherKey="leagueSeasonId")]
		public EntitySet<GameEjection> GameEjections
		{
			get
			{
				return this._GameEjections;
			}
			set
			{
				this._GameEjections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSeason_GolfMatch", Storage="_GolfMatches", ThisKey="Id", OtherKey="LeagueId")]
		public EntitySet<GolfMatch> GolfMatches
		{
			get
			{
				return this._GolfMatches;
			}
			set
			{
				this._GolfMatches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSeason_LeagueEvent", Storage="_LeagueEvents", ThisKey="Id", OtherKey="LeagueSeasonId")]
		public EntitySet<LeagueEvent> LeagueEvents
		{
			get
			{
				return this._LeagueEvents;
			}
			set
			{
				this._LeagueEvents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSeason_LeagueSchedule", Storage="_LeagueSchedules", ThisKey="Id", OtherKey="LeagueId")]
		public EntitySet<LeagueSchedule> LeagueSchedules
		{
			get
			{
				return this._LeagueSchedules;
			}
			set
			{
				this._LeagueSchedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSeason_PlayoffSetup", Storage="_PlayoffSetups", ThisKey="Id", OtherKey="LeagueSeasonId")]
		public EntitySet<PlayoffSetup> PlayoffSetups
		{
			get
			{
				return this._PlayoffSetups;
			}
			set
			{
				this._PlayoffSetups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSeason_TeamsSeason", Storage="_TeamsSeasons", ThisKey="Id", OtherKey="LeagueSeasonId")]
		public EntitySet<TeamsSeason> TeamsSeasons
		{
			get
			{
				return this._TeamsSeasons;
			}
			set
			{
				this._TeamsSeasons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_LeagueSeason", Storage="_League", ThisKey="LeagueId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public League League
		{
			get
			{
				return this._League.Entity;
			}
			set
			{
				League previousValue = this._League.Entity;
				if (((previousValue != value) 
							|| (this._League.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._League.Entity = null;
						previousValue.LeagueSeasons.Remove(this);
					}
					this._League.Entity = value;
					if ((value != null))
					{
						value.LeagueSeasons.Add(this);
						this._LeagueId = value.Id;
					}
					else
					{
						this._LeagueId = default(long);
					}
					this.SendPropertyChanged("League");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_LeagueSeason", Storage="_Season", ThisKey="SeasonId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Season Season
		{
			get
			{
				return this._Season.Entity;
			}
			set
			{
				Season previousValue = this._Season.Entity;
				if (((previousValue != value) 
							|| (this._Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Season.Entity = null;
						previousValue.LeagueSeasons.Remove(this);
					}
					this._Season.Entity = value;
					if ((value != null))
					{
						value.LeagueSeasons.Add(this);
						this._SeasonId = value.Id;
					}
					else
					{
						this._SeasonId = default(long);
					}
					this.SendPropertyChanged("Season");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DivisionSeasons(DivisionSeason entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSeason = this;
		}
		
		private void detach_DivisionSeasons(DivisionSeason entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSeason = null;
		}
		
		private void attach_GameEjections(GameEjection entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSeason = this;
		}
		
		private void detach_GameEjections(GameEjection entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSeason = null;
		}
		
		private void attach_GolfMatches(GolfMatch entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSeason = this;
		}
		
		private void detach_GolfMatches(GolfMatch entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSeason = null;
		}
		
		private void attach_LeagueEvents(LeagueEvent entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSeason = this;
		}
		
		private void detach_LeagueEvents(LeagueEvent entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSeason = null;
		}
		
		private void attach_LeagueSchedules(LeagueSchedule entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSeason = this;
		}
		
		private void detach_LeagueSchedules(LeagueSchedule entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSeason = null;
		}
		
		private void attach_PlayoffSetups(PlayoffSetup entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSeason = this;
		}
		
		private void detach_PlayoffSetups(PlayoffSetup entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSeason = null;
		}
		
		private void attach_TeamsSeasons(TeamsSeason entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSeason = this;
		}
		
		private void detach_TeamsSeasons(TeamsSeason entity)
		{
			this.SendPropertyChanging();
			entity.LeagueSeason = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LeagueUmpires")]
	public partial class LeagueUmpire : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private long _ContactId;
		
		private EntitySet<GameEjection> _GameEjections;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnContactIdChanging(long value);
    partial void OnContactIdChanged();
    #endregion
		
		public LeagueUmpire()
		{
			this._GameEjections = new EntitySet<GameEjection>(new Action<GameEjection>(this.attach_GameEjections), new Action<GameEjection>(this.detach_GameEjections));
			this._Account = default(EntityRef<Account>);
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="BigInt NOT NULL")]
		public long ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueUmpire_GameEjection", Storage="_GameEjections", ThisKey="Id", OtherKey="umpireId")]
		public EntitySet<GameEjection> GameEjections
		{
			get
			{
				return this._GameEjections;
			}
			set
			{
				this._GameEjections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_LeagueUmpire", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.LeagueUmpires.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.LeagueUmpires.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_LeagueUmpire", Storage="_Contact", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.LeagueUmpires.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.LeagueUmpires.Add(this);
						this._ContactId = value.Id;
					}
					else
					{
						this._ContactId = default(long);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GameEjections(GameEjection entity)
		{
			this.SendPropertyChanging();
			entity.LeagueUmpire = this;
		}
		
		private void detach_GameEjections(GameEjection entity)
		{
			this.SendPropertyChanging();
			entity.LeagueUmpire = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MemberBusiness")]
	public partial class MemberBusiness : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ContactId;
		
		private string _Name;
		
		private string _StreetAddress;
		
		private string _CityStateZip;
		
		private string _Description;
		
		private string _EMail;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _WebSite;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnContactIdChanging(long value);
    partial void OnContactIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStreetAddressChanging(string value);
    partial void OnStreetAddressChanged();
    partial void OnCityStateZipChanging(string value);
    partial void OnCityStateZipChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnEMailChanging(string value);
    partial void OnEMailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnWebSiteChanging(string value);
    partial void OnWebSiteChanged();
    #endregion
		
		public MemberBusiness()
		{
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="BigInt NOT NULL")]
		public long ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetAddress", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string StreetAddress
		{
			get
			{
				return this._StreetAddress;
			}
			set
			{
				if ((this._StreetAddress != value))
				{
					this.OnStreetAddressChanging(value);
					this.SendPropertyChanging();
					this._StreetAddress = value;
					this.SendPropertyChanged("StreetAddress");
					this.OnStreetAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityStateZip", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string CityStateZip
		{
			get
			{
				return this._CityStateZip;
			}
			set
			{
				if ((this._CityStateZip != value))
				{
					this.OnCityStateZipChanging(value);
					this.SendPropertyChanging();
					this._CityStateZip = value;
					this.SendPropertyChanged("CityStateZip");
					this.OnCityStateZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMail", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(14) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(14) NOT NULL", CanBeNull=false)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebSite", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string WebSite
		{
			get
			{
				return this._WebSite;
			}
			set
			{
				if ((this._WebSite != value))
				{
					this.OnWebSiteChanging(value);
					this.SendPropertyChanging();
					this._WebSite = value;
					this.SendPropertyChanged("WebSite");
					this.OnWebSiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_MemberBusiness", Storage="_Contact", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.MemberBusinesses.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.MemberBusinesses.Add(this);
						this._ContactId = value.Id;
					}
					else
					{
						this._ContactId = default(long);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageCategory")]
	public partial class MessageCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private int _CategoryOrder;
		
		private string _CategoryName;
		
		private string _CategoryDescription;
		
		private bool _AllowAnonymousPost;
		
		private bool _AllowAnonymousTopic;
		
		private bool _isTeam;
		
		private bool _isModerated;
		
		private EntitySet<MessageTopic> _MessageTopics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnCategoryOrderChanging(int value);
    partial void OnCategoryOrderChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnCategoryDescriptionChanging(string value);
    partial void OnCategoryDescriptionChanged();
    partial void OnAllowAnonymousPostChanging(bool value);
    partial void OnAllowAnonymousPostChanged();
    partial void OnAllowAnonymousTopicChanging(bool value);
    partial void OnAllowAnonymousTopicChanged();
    partial void OnisTeamChanging(bool value);
    partial void OnisTeamChanged();
    partial void OnisModeratedChanging(bool value);
    partial void OnisModeratedChanged();
    #endregion
		
		public MessageCategory()
		{
			this._MessageTopics = new EntitySet<MessageTopic>(new Action<MessageTopic>(this.attach_MessageTopics), new Action<MessageTopic>(this.detach_MessageTopics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryOrder", DbType="Int NOT NULL")]
		public int CategoryOrder
		{
			get
			{
				return this._CategoryOrder;
			}
			set
			{
				if ((this._CategoryOrder != value))
				{
					this.OnCategoryOrderChanging(value);
					this.SendPropertyChanging();
					this._CategoryOrder = value;
					this.SendPropertyChanged("CategoryOrder");
					this.OnCategoryOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryDescription", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string CategoryDescription
		{
			get
			{
				return this._CategoryDescription;
			}
			set
			{
				if ((this._CategoryDescription != value))
				{
					this.OnCategoryDescriptionChanging(value);
					this.SendPropertyChanging();
					this._CategoryDescription = value;
					this.SendPropertyChanged("CategoryDescription");
					this.OnCategoryDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowAnonymousPost", DbType="Bit NOT NULL")]
		public bool AllowAnonymousPost
		{
			get
			{
				return this._AllowAnonymousPost;
			}
			set
			{
				if ((this._AllowAnonymousPost != value))
				{
					this.OnAllowAnonymousPostChanging(value);
					this.SendPropertyChanging();
					this._AllowAnonymousPost = value;
					this.SendPropertyChanged("AllowAnonymousPost");
					this.OnAllowAnonymousPostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowAnonymousTopic", DbType="Bit NOT NULL")]
		public bool AllowAnonymousTopic
		{
			get
			{
				return this._AllowAnonymousTopic;
			}
			set
			{
				if ((this._AllowAnonymousTopic != value))
				{
					this.OnAllowAnonymousTopicChanging(value);
					this.SendPropertyChanging();
					this._AllowAnonymousTopic = value;
					this.SendPropertyChanged("AllowAnonymousTopic");
					this.OnAllowAnonymousTopicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isTeam", DbType="Bit NOT NULL")]
		public bool isTeam
		{
			get
			{
				return this._isTeam;
			}
			set
			{
				if ((this._isTeam != value))
				{
					this.OnisTeamChanging(value);
					this.SendPropertyChanging();
					this._isTeam = value;
					this.SendPropertyChanged("isTeam");
					this.OnisTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isModerated", DbType="Bit NOT NULL")]
		public bool isModerated
		{
			get
			{
				return this._isModerated;
			}
			set
			{
				if ((this._isModerated != value))
				{
					this.OnisModeratedChanging(value);
					this.SendPropertyChanging();
					this._isModerated = value;
					this.SendPropertyChanged("isModerated");
					this.OnisModeratedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageCategory_MessageTopic", Storage="_MessageTopics", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<MessageTopic> MessageTopics
		{
			get
			{
				return this._MessageTopics;
			}
			set
			{
				this._MessageTopics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MessageTopics(MessageTopic entity)
		{
			this.SendPropertyChanging();
			entity.MessageCategory = this;
		}
		
		private void detach_MessageTopics(MessageTopic entity)
		{
			this.SendPropertyChanging();
			entity.MessageCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessagePost")]
	public partial class MessagePost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _TopicId;
		
		private int _PostOrder;
		
		private long _ContactCreatorId;
		
		private System.DateTime _PostDate;
		
		private string _PostText;
		
		private System.DateTime _EditDate;
		
		private string _PostSubject;
		
		private long _CategoryId;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<MessageTopic> _MessageTopic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnTopicIdChanging(long value);
    partial void OnTopicIdChanged();
    partial void OnPostOrderChanging(int value);
    partial void OnPostOrderChanged();
    partial void OnContactCreatorIdChanging(long value);
    partial void OnContactCreatorIdChanged();
    partial void OnPostDateChanging(System.DateTime value);
    partial void OnPostDateChanged();
    partial void OnPostTextChanging(string value);
    partial void OnPostTextChanged();
    partial void OnEditDateChanging(System.DateTime value);
    partial void OnEditDateChanged();
    partial void OnPostSubjectChanging(string value);
    partial void OnPostSubjectChanged();
    partial void OnCategoryIdChanging(long value);
    partial void OnCategoryIdChanged();
    #endregion
		
		public MessagePost()
		{
			this._Contact = default(EntityRef<Contact>);
			this._MessageTopic = default(EntityRef<MessageTopic>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicId", DbType="BigInt NOT NULL")]
		public long TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					if (this._MessageTopic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostOrder", DbType="Int NOT NULL")]
		public int PostOrder
		{
			get
			{
				return this._PostOrder;
			}
			set
			{
				if ((this._PostOrder != value))
				{
					this.OnPostOrderChanging(value);
					this.SendPropertyChanging();
					this._PostOrder = value;
					this.SendPropertyChanged("PostOrder");
					this.OnPostOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactCreatorId", DbType="BigInt NOT NULL")]
		public long ContactCreatorId
		{
			get
			{
				return this._ContactCreatorId;
			}
			set
			{
				if ((this._ContactCreatorId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactCreatorIdChanging(value);
					this.SendPropertyChanging();
					this._ContactCreatorId = value;
					this.SendPropertyChanged("ContactCreatorId");
					this.OnContactCreatorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostDate", DbType="DateTime NOT NULL")]
		public System.DateTime PostDate
		{
			get
			{
				return this._PostDate;
			}
			set
			{
				if ((this._PostDate != value))
				{
					this.OnPostDateChanging(value);
					this.SendPropertyChanging();
					this._PostDate = value;
					this.SendPropertyChanged("PostDate");
					this.OnPostDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostText", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PostText
		{
			get
			{
				return this._PostText;
			}
			set
			{
				if ((this._PostText != value))
				{
					this.OnPostTextChanging(value);
					this.SendPropertyChanging();
					this._PostText = value;
					this.SendPropertyChanged("PostText");
					this.OnPostTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditDate", DbType="DateTime NOT NULL")]
		public System.DateTime EditDate
		{
			get
			{
				return this._EditDate;
			}
			set
			{
				if ((this._EditDate != value))
				{
					this.OnEditDateChanging(value);
					this.SendPropertyChanging();
					this._EditDate = value;
					this.SendPropertyChanged("EditDate");
					this.OnEditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostSubject", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string PostSubject
		{
			get
			{
				return this._PostSubject;
			}
			set
			{
				if ((this._PostSubject != value))
				{
					this.OnPostSubjectChanging(value);
					this.SendPropertyChanging();
					this._PostSubject = value;
					this.SendPropertyChanged("PostSubject");
					this.OnPostSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="BigInt NOT NULL")]
		public long CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_MessagePost", Storage="_Contact", ThisKey="ContactCreatorId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.MessagePosts.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.MessagePosts.Add(this);
						this._ContactCreatorId = value.Id;
					}
					else
					{
						this._ContactCreatorId = default(long);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageTopic_MessagePost", Storage="_MessageTopic", ThisKey="TopicId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MessageTopic MessageTopic
		{
			get
			{
				return this._MessageTopic.Entity;
			}
			set
			{
				MessageTopic previousValue = this._MessageTopic.Entity;
				if (((previousValue != value) 
							|| (this._MessageTopic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MessageTopic.Entity = null;
						previousValue.MessagePosts.Remove(this);
					}
					this._MessageTopic.Entity = value;
					if ((value != null))
					{
						value.MessagePosts.Add(this);
						this._TopicId = value.Id;
					}
					else
					{
						this._TopicId = default(long);
					}
					this.SendPropertyChanged("MessageTopic");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageTopic")]
	public partial class MessageTopic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _CategoryId;
		
		private long _ContactCreatorId;
		
		private System.DateTime _TopicCreateDate;
		
		private string _Topic;
		
		private bool _StickyTopic;
		
		private long _NumberOfViews;
		
		private EntitySet<MessagePost> _MessagePosts;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<MessageCategory> _MessageCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnCategoryIdChanging(long value);
    partial void OnCategoryIdChanged();
    partial void OnContactCreatorIdChanging(long value);
    partial void OnContactCreatorIdChanged();
    partial void OnTopicCreateDateChanging(System.DateTime value);
    partial void OnTopicCreateDateChanged();
    partial void OnTopicChanging(string value);
    partial void OnTopicChanged();
    partial void OnStickyTopicChanging(bool value);
    partial void OnStickyTopicChanged();
    partial void OnNumberOfViewsChanging(long value);
    partial void OnNumberOfViewsChanged();
    #endregion
		
		public MessageTopic()
		{
			this._MessagePosts = new EntitySet<MessagePost>(new Action<MessagePost>(this.attach_MessagePosts), new Action<MessagePost>(this.detach_MessagePosts));
			this._Contact = default(EntityRef<Contact>);
			this._MessageCategory = default(EntityRef<MessageCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="BigInt NOT NULL")]
		public long CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._MessageCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactCreatorId", DbType="BigInt NOT NULL")]
		public long ContactCreatorId
		{
			get
			{
				return this._ContactCreatorId;
			}
			set
			{
				if ((this._ContactCreatorId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactCreatorIdChanging(value);
					this.SendPropertyChanging();
					this._ContactCreatorId = value;
					this.SendPropertyChanged("ContactCreatorId");
					this.OnContactCreatorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicCreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime TopicCreateDate
		{
			get
			{
				return this._TopicCreateDate;
			}
			set
			{
				if ((this._TopicCreateDate != value))
				{
					this.OnTopicCreateDateChanging(value);
					this.SendPropertyChanging();
					this._TopicCreateDate = value;
					this.SendPropertyChanged("TopicCreateDate");
					this.OnTopicCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Topic", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Topic
		{
			get
			{
				return this._Topic;
			}
			set
			{
				if ((this._Topic != value))
				{
					this.OnTopicChanging(value);
					this.SendPropertyChanging();
					this._Topic = value;
					this.SendPropertyChanged("Topic");
					this.OnTopicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StickyTopic", DbType="Bit NOT NULL")]
		public bool StickyTopic
		{
			get
			{
				return this._StickyTopic;
			}
			set
			{
				if ((this._StickyTopic != value))
				{
					this.OnStickyTopicChanging(value);
					this.SendPropertyChanging();
					this._StickyTopic = value;
					this.SendPropertyChanged("StickyTopic");
					this.OnStickyTopicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfViews", DbType="BigInt NOT NULL")]
		public long NumberOfViews
		{
			get
			{
				return this._NumberOfViews;
			}
			set
			{
				if ((this._NumberOfViews != value))
				{
					this.OnNumberOfViewsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfViews = value;
					this.SendPropertyChanged("NumberOfViews");
					this.OnNumberOfViewsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageTopic_MessagePost", Storage="_MessagePosts", ThisKey="Id", OtherKey="TopicId")]
		public EntitySet<MessagePost> MessagePosts
		{
			get
			{
				return this._MessagePosts;
			}
			set
			{
				this._MessagePosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_MessageTopic", Storage="_Contact", ThisKey="ContactCreatorId", OtherKey="Id", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.MessageTopics.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.MessageTopics.Add(this);
						this._ContactCreatorId = value.Id;
					}
					else
					{
						this._ContactCreatorId = default(long);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MessageCategory_MessageTopic", Storage="_MessageCategory", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MessageCategory MessageCategory
		{
			get
			{
				return this._MessageCategory.Entity;
			}
			set
			{
				MessageCategory previousValue = this._MessageCategory.Entity;
				if (((previousValue != value) 
							|| (this._MessageCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MessageCategory.Entity = null;
						previousValue.MessageTopics.Remove(this);
					}
					this._MessageCategory.Entity = value;
					if ((value != null))
					{
						value.MessageTopics.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(long);
					}
					this.SendPropertyChanged("MessageCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MessagePosts(MessagePost entity)
		{
			this.SendPropertyChanging();
			entity.MessageTopic = this;
		}
		
		private void detach_MessagePosts(MessagePost entity)
		{
			this.SendPropertyChanging();
			entity.MessageTopic = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhotoGallery")]
	public partial class PhotoGallery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private string _Title;
		
		private string _Caption;
		
		private long _AlbumId;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<PhotoGalleryAlbum> _PhotoGalleryAlbum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCaptionChanging(string value);
    partial void OnCaptionChanged();
    partial void OnAlbumIdChanging(long value);
    partial void OnAlbumIdChanged();
    #endregion
		
		public PhotoGallery()
		{
			this._Account = default(EntityRef<Account>);
			this._PhotoGalleryAlbum = default(EntityRef<PhotoGalleryAlbum>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Caption", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Caption
		{
			get
			{
				return this._Caption;
			}
			set
			{
				if ((this._Caption != value))
				{
					this.OnCaptionChanging(value);
					this.SendPropertyChanging();
					this._Caption = value;
					this.SendPropertyChanged("Caption");
					this.OnCaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlbumId", DbType="BigInt NOT NULL")]
		public long AlbumId
		{
			get
			{
				return this._AlbumId;
			}
			set
			{
				if ((this._AlbumId != value))
				{
					if (this._PhotoGalleryAlbum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlbumIdChanging(value);
					this.SendPropertyChanging();
					this._AlbumId = value;
					this.SendPropertyChanged("AlbumId");
					this.OnAlbumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_PhotoGallery", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.PhotoGalleries.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.PhotoGalleries.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhotoGalleryAlbum_PhotoGallery", Storage="_PhotoGalleryAlbum", ThisKey="AlbumId", OtherKey="Id", IsForeignKey=true)]
		public PhotoGalleryAlbum PhotoGalleryAlbum
		{
			get
			{
				return this._PhotoGalleryAlbum.Entity;
			}
			set
			{
				PhotoGalleryAlbum previousValue = this._PhotoGalleryAlbum.Entity;
				if (((previousValue != value) 
							|| (this._PhotoGalleryAlbum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhotoGalleryAlbum.Entity = null;
						previousValue.PhotoGalleries.Remove(this);
					}
					this._PhotoGalleryAlbum.Entity = value;
					if ((value != null))
					{
						value.PhotoGalleries.Add(this);
						this._AlbumId = value.Id;
					}
					else
					{
						this._AlbumId = default(long);
					}
					this.SendPropertyChanged("PhotoGalleryAlbum");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhotoGalleryAlbum")]
	public partial class PhotoGalleryAlbum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private string _Title;
		
		private long _ParentAlbumId;
		
		private long _TeamId;
		
		private EntitySet<PhotoGallery> _PhotoGalleries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnParentAlbumIdChanging(long value);
    partial void OnParentAlbumIdChanged();
    partial void OnTeamIdChanging(long value);
    partial void OnTeamIdChanged();
    #endregion
		
		public PhotoGalleryAlbum()
		{
			this._PhotoGalleries = new EntitySet<PhotoGallery>(new Action<PhotoGallery>(this.attach_PhotoGalleries), new Action<PhotoGallery>(this.detach_PhotoGalleries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentAlbumId", DbType="BigInt NOT NULL")]
		public long ParentAlbumId
		{
			get
			{
				return this._ParentAlbumId;
			}
			set
			{
				if ((this._ParentAlbumId != value))
				{
					this.OnParentAlbumIdChanging(value);
					this.SendPropertyChanging();
					this._ParentAlbumId = value;
					this.SendPropertyChanged("ParentAlbumId");
					this.OnParentAlbumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="BigInt NOT NULL")]
		public long TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhotoGalleryAlbum_PhotoGallery", Storage="_PhotoGalleries", ThisKey="Id", OtherKey="AlbumId")]
		public EntitySet<PhotoGallery> PhotoGalleries
		{
			get
			{
				return this._PhotoGalleries;
			}
			set
			{
				this._PhotoGalleries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PhotoGalleries(PhotoGallery entity)
		{
			this.SendPropertyChanging();
			entity.PhotoGalleryAlbum = this;
		}
		
		private void detach_PhotoGalleries(PhotoGallery entity)
		{
			this.SendPropertyChanging();
			entity.PhotoGalleryAlbum = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.pitchstatsum")]
	public partial class pitchstatsum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _PlayerId;
		
		private long _GameId;
		
		private long _TeamId;
		
		private int _IP;
		
		private int _IP2;
		
		private int _BF;
		
		private int _W;
		
		private int _L;
		
		private int _S;
		
		private int _H;
		
		private int _R;
		
		private int _ER;
		
		private int @__2B;
		
		private int @__3B;
		
		private int _HR;
		
		private int _SO;
		
		private int _BB;
		
		private int _WP;
		
		private int _HBP;
		
		private int _BK;
		
		private int _SC;
		
		private System.Nullable<int> _TB;
		
		private System.Nullable<int> _AB;
		
		private System.Nullable<int> _WHIPNumerator;
		
		private System.Nullable<int> _IPNumerator;
		
		private EntityRef<LeagueSchedule> _LeagueSchedule;
		
		private EntityRef<RosterSeason> _RosterSeason;
		
		private EntityRef<TeamsSeason> _TeamsSeason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnGameIdChanging(long value);
    partial void OnGameIdChanged();
    partial void OnTeamIdChanging(long value);
    partial void OnTeamIdChanged();
    partial void OnIPChanging(int value);
    partial void OnIPChanged();
    partial void OnIP2Changing(int value);
    partial void OnIP2Changed();
    partial void OnBFChanging(int value);
    partial void OnBFChanged();
    partial void OnWChanging(int value);
    partial void OnWChanged();
    partial void OnLChanging(int value);
    partial void OnLChanged();
    partial void OnSChanging(int value);
    partial void OnSChanged();
    partial void OnHChanging(int value);
    partial void OnHChanged();
    partial void OnRChanging(int value);
    partial void OnRChanged();
    partial void OnERChanging(int value);
    partial void OnERChanged();
    partial void On_2BChanging(int value);
    partial void On_2BChanged();
    partial void On_3BChanging(int value);
    partial void On_3BChanged();
    partial void OnHRChanging(int value);
    partial void OnHRChanged();
    partial void OnSOChanging(int value);
    partial void OnSOChanged();
    partial void OnBBChanging(int value);
    partial void OnBBChanged();
    partial void OnWPChanging(int value);
    partial void OnWPChanged();
    partial void OnHBPChanging(int value);
    partial void OnHBPChanged();
    partial void OnBKChanging(int value);
    partial void OnBKChanged();
    partial void OnSCChanging(int value);
    partial void OnSCChanged();
    partial void OnTBChanging(System.Nullable<int> value);
    partial void OnTBChanged();
    partial void OnABChanging(System.Nullable<int> value);
    partial void OnABChanged();
    partial void OnWHIPNumeratorChanging(System.Nullable<int> value);
    partial void OnWHIPNumeratorChanged();
    partial void OnIPNumeratorChanging(System.Nullable<int> value);
    partial void OnIPNumeratorChanged();
    #endregion
		
		public pitchstatsum()
		{
			this._LeagueSchedule = default(EntityRef<LeagueSchedule>);
			this._RosterSeason = default(EntityRef<RosterSeason>);
			this._TeamsSeason = default(EntityRef<TeamsSeason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._RosterSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="BigInt NOT NULL")]
		public long GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._LeagueSchedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="BigInt NOT NULL")]
		public long TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._TeamsSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP", DbType="Int NOT NULL")]
		public int IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP2", DbType="Int NOT NULL")]
		public int IP2
		{
			get
			{
				return this._IP2;
			}
			set
			{
				if ((this._IP2 != value))
				{
					this.OnIP2Changing(value);
					this.SendPropertyChanging();
					this._IP2 = value;
					this.SendPropertyChanged("IP2");
					this.OnIP2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BF", DbType="Int NOT NULL")]
		public int BF
		{
			get
			{
				return this._BF;
			}
			set
			{
				if ((this._BF != value))
				{
					this.OnBFChanging(value);
					this.SendPropertyChanging();
					this._BF = value;
					this.SendPropertyChanged("BF");
					this.OnBFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_W", DbType="Int NOT NULL")]
		public int W
		{
			get
			{
				return this._W;
			}
			set
			{
				if ((this._W != value))
				{
					this.OnWChanging(value);
					this.SendPropertyChanging();
					this._W = value;
					this.SendPropertyChanged("W");
					this.OnWChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_L", DbType="Int NOT NULL")]
		public int L
		{
			get
			{
				return this._L;
			}
			set
			{
				if ((this._L != value))
				{
					this.OnLChanging(value);
					this.SendPropertyChanging();
					this._L = value;
					this.SendPropertyChanged("L");
					this.OnLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S", DbType="Int NOT NULL")]
		public int S
		{
			get
			{
				return this._S;
			}
			set
			{
				if ((this._S != value))
				{
					this.OnSChanging(value);
					this.SendPropertyChanging();
					this._S = value;
					this.SendPropertyChanged("S");
					this.OnSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_H", DbType="Int NOT NULL")]
		public int H
		{
			get
			{
				return this._H;
			}
			set
			{
				if ((this._H != value))
				{
					this.OnHChanging(value);
					this.SendPropertyChanging();
					this._H = value;
					this.SendPropertyChanged("H");
					this.OnHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_R", DbType="Int NOT NULL")]
		public int R
		{
			get
			{
				return this._R;
			}
			set
			{
				if ((this._R != value))
				{
					this.OnRChanging(value);
					this.SendPropertyChanging();
					this._R = value;
					this.SendPropertyChanged("R");
					this.OnRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ER", DbType="Int NOT NULL")]
		public int ER
		{
			get
			{
				return this._ER;
			}
			set
			{
				if ((this._ER != value))
				{
					this.OnERChanging(value);
					this.SendPropertyChanging();
					this._ER = value;
					this.SendPropertyChanged("ER");
					this.OnERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[2B]", Storage="__2B", DbType="Int NOT NULL")]
		public int _2B
		{
			get
			{
				return this.@__2B;
			}
			set
			{
				if ((this.@__2B != value))
				{
					this.On_2BChanging(value);
					this.SendPropertyChanging();
					this.@__2B = value;
					this.SendPropertyChanged("_2B");
					this.On_2BChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[3B]", Storage="__3B", DbType="Int NOT NULL")]
		public int _3B
		{
			get
			{
				return this.@__3B;
			}
			set
			{
				if ((this.@__3B != value))
				{
					this.On_3BChanging(value);
					this.SendPropertyChanging();
					this.@__3B = value;
					this.SendPropertyChanged("_3B");
					this.On_3BChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HR", DbType="Int NOT NULL")]
		public int HR
		{
			get
			{
				return this._HR;
			}
			set
			{
				if ((this._HR != value))
				{
					this.OnHRChanging(value);
					this.SendPropertyChanging();
					this._HR = value;
					this.SendPropertyChanged("HR");
					this.OnHRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SO", DbType="Int NOT NULL")]
		public int SO
		{
			get
			{
				return this._SO;
			}
			set
			{
				if ((this._SO != value))
				{
					this.OnSOChanging(value);
					this.SendPropertyChanging();
					this._SO = value;
					this.SendPropertyChanged("SO");
					this.OnSOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BB", DbType="Int NOT NULL")]
		public int BB
		{
			get
			{
				return this._BB;
			}
			set
			{
				if ((this._BB != value))
				{
					this.OnBBChanging(value);
					this.SendPropertyChanging();
					this._BB = value;
					this.SendPropertyChanged("BB");
					this.OnBBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WP", DbType="Int NOT NULL")]
		public int WP
		{
			get
			{
				return this._WP;
			}
			set
			{
				if ((this._WP != value))
				{
					this.OnWPChanging(value);
					this.SendPropertyChanging();
					this._WP = value;
					this.SendPropertyChanged("WP");
					this.OnWPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HBP", DbType="Int NOT NULL")]
		public int HBP
		{
			get
			{
				return this._HBP;
			}
			set
			{
				if ((this._HBP != value))
				{
					this.OnHBPChanging(value);
					this.SendPropertyChanging();
					this._HBP = value;
					this.SendPropertyChanged("HBP");
					this.OnHBPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BK", DbType="Int NOT NULL")]
		public int BK
		{
			get
			{
				return this._BK;
			}
			set
			{
				if ((this._BK != value))
				{
					this.OnBKChanging(value);
					this.SendPropertyChanging();
					this._BK = value;
					this.SendPropertyChanged("BK");
					this.OnBKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SC", DbType="Int NOT NULL")]
		public int SC
		{
			get
			{
				return this._SC;
			}
			set
			{
				if ((this._SC != value))
				{
					this.OnSCChanging(value);
					this.SendPropertyChanging();
					this._SC = value;
					this.SendPropertyChanged("SC");
					this.OnSCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TB", AutoSync=AutoSync.Always, DbType="Int", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> TB
		{
			get
			{
				return this._TB;
			}
			set
			{
				if ((this._TB != value))
				{
					this.OnTBChanging(value);
					this.SendPropertyChanging();
					this._TB = value;
					this.SendPropertyChanged("TB");
					this.OnTBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AB", AutoSync=AutoSync.Always, DbType="Int", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> AB
		{
			get
			{
				return this._AB;
			}
			set
			{
				if ((this._AB != value))
				{
					this.OnABChanging(value);
					this.SendPropertyChanging();
					this._AB = value;
					this.SendPropertyChanged("AB");
					this.OnABChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WHIPNumerator", AutoSync=AutoSync.Always, DbType="Int", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> WHIPNumerator
		{
			get
			{
				return this._WHIPNumerator;
			}
			set
			{
				if ((this._WHIPNumerator != value))
				{
					this.OnWHIPNumeratorChanging(value);
					this.SendPropertyChanging();
					this._WHIPNumerator = value;
					this.SendPropertyChanged("WHIPNumerator");
					this.OnWHIPNumeratorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPNumerator", AutoSync=AutoSync.Always, DbType="Int", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> IPNumerator
		{
			get
			{
				return this._IPNumerator;
			}
			set
			{
				if ((this._IPNumerator != value))
				{
					this.OnIPNumeratorChanging(value);
					this.SendPropertyChanging();
					this._IPNumerator = value;
					this.SendPropertyChanged("IPNumerator");
					this.OnIPNumeratorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSchedule_pitchstatsum", Storage="_LeagueSchedule", ThisKey="GameId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LeagueSchedule LeagueSchedule
		{
			get
			{
				return this._LeagueSchedule.Entity;
			}
			set
			{
				LeagueSchedule previousValue = this._LeagueSchedule.Entity;
				if (((previousValue != value) 
							|| (this._LeagueSchedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueSchedule.Entity = null;
						previousValue.pitchstatsums.Remove(this);
					}
					this._LeagueSchedule.Entity = value;
					if ((value != null))
					{
						value.pitchstatsums.Add(this);
						this._GameId = value.Id;
					}
					else
					{
						this._GameId = default(long);
					}
					this.SendPropertyChanged("LeagueSchedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RosterSeason_pitchstatsum", Storage="_RosterSeason", ThisKey="PlayerId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RosterSeason RosterSeason
		{
			get
			{
				return this._RosterSeason.Entity;
			}
			set
			{
				RosterSeason previousValue = this._RosterSeason.Entity;
				if (((previousValue != value) 
							|| (this._RosterSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RosterSeason.Entity = null;
						previousValue.pitchstatsums.Remove(this);
					}
					this._RosterSeason.Entity = value;
					if ((value != null))
					{
						value.pitchstatsums.Add(this);
						this._PlayerId = value.Id;
					}
					else
					{
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("RosterSeason");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsSeason_pitchstatsum", Storage="_TeamsSeason", ThisKey="TeamId", OtherKey="Id", IsForeignKey=true)]
		public TeamsSeason TeamsSeason
		{
			get
			{
				return this._TeamsSeason.Entity;
			}
			set
			{
				TeamsSeason previousValue = this._TeamsSeason.Entity;
				if (((previousValue != value) 
							|| (this._TeamsSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamsSeason.Entity = null;
						previousValue.pitchstatsums.Remove(this);
					}
					this._TeamsSeason.Entity = value;
					if ((value != null))
					{
						value.pitchstatsums.Add(this);
						this._TeamId = value.Id;
					}
					else
					{
						this._TeamId = default(long);
					}
					this.SendPropertyChanged("TeamsSeason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayerProfile")]
	public partial class PlayerProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _PlayerId;
		
		private long _QuestionId;
		
		private string _Answer;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnQuestionIdChanging(long value);
    partial void OnQuestionIdChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    #endregion
		
		public PlayerProfile()
		{
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", DbType="BigInt NOT NULL")]
		public long QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_PlayerProfile", Storage="_Contact", ThisKey="PlayerId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.PlayerProfiles.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.PlayerProfiles.Add(this);
						this._PlayerId = value.Id;
					}
					else
					{
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayerRecap")]
	public partial class PlayerRecap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _PlayerId;
		
		private long _TeamId;
		
		private long _GameId;
		
		private EntityRef<LeagueSchedule> _LeagueSchedule;
		
		private EntityRef<RosterSeason> _RosterSeason;
		
		private EntityRef<TeamsSeason> _TeamsSeason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnTeamIdChanging(long value);
    partial void OnTeamIdChanged();
    partial void OnGameIdChanging(long value);
    partial void OnGameIdChanged();
    #endregion
		
		public PlayerRecap()
		{
			this._LeagueSchedule = default(EntityRef<LeagueSchedule>);
			this._RosterSeason = default(EntityRef<RosterSeason>);
			this._TeamsSeason = default(EntityRef<TeamsSeason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._RosterSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._TeamsSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._LeagueSchedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSchedule_PlayerRecap", Storage="_LeagueSchedule", ThisKey="GameId", OtherKey="Id", IsForeignKey=true)]
		public LeagueSchedule LeagueSchedule
		{
			get
			{
				return this._LeagueSchedule.Entity;
			}
			set
			{
				LeagueSchedule previousValue = this._LeagueSchedule.Entity;
				if (((previousValue != value) 
							|| (this._LeagueSchedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueSchedule.Entity = null;
						previousValue.PlayerRecaps.Remove(this);
					}
					this._LeagueSchedule.Entity = value;
					if ((value != null))
					{
						value.PlayerRecaps.Add(this);
						this._GameId = value.Id;
					}
					else
					{
						this._GameId = default(long);
					}
					this.SendPropertyChanged("LeagueSchedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RosterSeason_PlayerRecap", Storage="_RosterSeason", ThisKey="PlayerId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RosterSeason RosterSeason
		{
			get
			{
				return this._RosterSeason.Entity;
			}
			set
			{
				RosterSeason previousValue = this._RosterSeason.Entity;
				if (((previousValue != value) 
							|| (this._RosterSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RosterSeason.Entity = null;
						previousValue.PlayerRecaps.Remove(this);
					}
					this._RosterSeason.Entity = value;
					if ((value != null))
					{
						value.PlayerRecaps.Add(this);
						this._PlayerId = value.Id;
					}
					else
					{
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("RosterSeason");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsSeason_PlayerRecap", Storage="_TeamsSeason", ThisKey="TeamId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TeamsSeason TeamsSeason
		{
			get
			{
				return this._TeamsSeason.Entity;
			}
			set
			{
				TeamsSeason previousValue = this._TeamsSeason.Entity;
				if (((previousValue != value) 
							|| (this._TeamsSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamsSeason.Entity = null;
						previousValue.PlayerRecaps.Remove(this);
					}
					this._TeamsSeason.Entity = value;
					if ((value != null))
					{
						value.PlayerRecaps.Add(this);
						this._TeamId = value.Id;
					}
					else
					{
						this._TeamId = default(long);
					}
					this.SendPropertyChanged("TeamsSeason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayerSeasonAffiliationDues")]
	public partial class PlayerSeasonAffiliationDue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _PlayerId;
		
		private long _SeasonId;
		
		private string _AffiliationDuesPaid;
		
		private EntityRef<Roster> _Roster;
		
		private EntityRef<Season> _Season;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnSeasonIdChanging(long value);
    partial void OnSeasonIdChanged();
    partial void OnAffiliationDuesPaidChanging(string value);
    partial void OnAffiliationDuesPaidChanged();
    #endregion
		
		public PlayerSeasonAffiliationDue()
		{
			this._Roster = default(EntityRef<Roster>);
			this._Season = default(EntityRef<Season>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._Roster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long SeasonId
		{
			get
			{
				return this._SeasonId;
			}
			set
			{
				if ((this._SeasonId != value))
				{
					if (this._Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._SeasonId = value;
					this.SendPropertyChanged("SeasonId");
					this.OnSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AffiliationDuesPaid", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AffiliationDuesPaid
		{
			get
			{
				return this._AffiliationDuesPaid;
			}
			set
			{
				if ((this._AffiliationDuesPaid != value))
				{
					this.OnAffiliationDuesPaidChanging(value);
					this.SendPropertyChanging();
					this._AffiliationDuesPaid = value;
					this.SendPropertyChanged("AffiliationDuesPaid");
					this.OnAffiliationDuesPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roster_PlayerSeasonAffiliationDue", Storage="_Roster", ThisKey="PlayerId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Roster Roster
		{
			get
			{
				return this._Roster.Entity;
			}
			set
			{
				Roster previousValue = this._Roster.Entity;
				if (((previousValue != value) 
							|| (this._Roster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Roster.Entity = null;
						previousValue.PlayerSeasonAffiliationDues.Remove(this);
					}
					this._Roster.Entity = value;
					if ((value != null))
					{
						value.PlayerSeasonAffiliationDues.Add(this);
						this._PlayerId = value.Id;
					}
					else
					{
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("Roster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_PlayerSeasonAffiliationDue", Storage="_Season", ThisKey="SeasonId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Season Season
		{
			get
			{
				return this._Season.Entity;
			}
			set
			{
				Season previousValue = this._Season.Entity;
				if (((previousValue != value) 
							|| (this._Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Season.Entity = null;
						previousValue.PlayerSeasonAffiliationDues.Remove(this);
					}
					this._Season.Entity = value;
					if ((value != null))
					{
						value.PlayerSeasonAffiliationDues.Add(this);
						this._SeasonId = value.Id;
					}
					else
					{
						this._SeasonId = default(long);
					}
					this.SendPropertyChanged("Season");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayoffBracket")]
	public partial class PlayoffBracket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _PlayoffId;
		
		private long _Team1Id;
		
		private string _Team1IdType;
		
		private long _Team2Id;
		
		private string _Team2IdType;
		
		private int _GameNo;
		
		private int _RoundNo;
		
		private int _NumGamesInSeries;
		
		private EntitySet<PlayoffGame> _PlayoffGames;
		
		private EntityRef<PlayoffSetup> _PlayoffSetup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnPlayoffIdChanging(long value);
    partial void OnPlayoffIdChanged();
    partial void OnTeam1IdChanging(long value);
    partial void OnTeam1IdChanged();
    partial void OnTeam1IdTypeChanging(string value);
    partial void OnTeam1IdTypeChanged();
    partial void OnTeam2IdChanging(long value);
    partial void OnTeam2IdChanged();
    partial void OnTeam2IdTypeChanging(string value);
    partial void OnTeam2IdTypeChanged();
    partial void OnGameNoChanging(int value);
    partial void OnGameNoChanged();
    partial void OnRoundNoChanging(int value);
    partial void OnRoundNoChanged();
    partial void OnNumGamesInSeriesChanging(int value);
    partial void OnNumGamesInSeriesChanged();
    #endregion
		
		public PlayoffBracket()
		{
			this._PlayoffGames = new EntitySet<PlayoffGame>(new Action<PlayoffGame>(this.attach_PlayoffGames), new Action<PlayoffGame>(this.detach_PlayoffGames));
			this._PlayoffSetup = default(EntityRef<PlayoffSetup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayoffId", DbType="BigInt NOT NULL")]
		public long PlayoffId
		{
			get
			{
				return this._PlayoffId;
			}
			set
			{
				if ((this._PlayoffId != value))
				{
					if (this._PlayoffSetup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayoffIdChanging(value);
					this.SendPropertyChanging();
					this._PlayoffId = value;
					this.SendPropertyChanged("PlayoffId");
					this.OnPlayoffIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team1Id", DbType="BigInt NOT NULL")]
		public long Team1Id
		{
			get
			{
				return this._Team1Id;
			}
			set
			{
				if ((this._Team1Id != value))
				{
					this.OnTeam1IdChanging(value);
					this.SendPropertyChanging();
					this._Team1Id = value;
					this.SendPropertyChanged("Team1Id");
					this.OnTeam1IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team1IdType", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string Team1IdType
		{
			get
			{
				return this._Team1IdType;
			}
			set
			{
				if ((this._Team1IdType != value))
				{
					this.OnTeam1IdTypeChanging(value);
					this.SendPropertyChanging();
					this._Team1IdType = value;
					this.SendPropertyChanged("Team1IdType");
					this.OnTeam1IdTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team2Id", DbType="BigInt NOT NULL")]
		public long Team2Id
		{
			get
			{
				return this._Team2Id;
			}
			set
			{
				if ((this._Team2Id != value))
				{
					this.OnTeam2IdChanging(value);
					this.SendPropertyChanging();
					this._Team2Id = value;
					this.SendPropertyChanged("Team2Id");
					this.OnTeam2IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team2IdType", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string Team2IdType
		{
			get
			{
				return this._Team2IdType;
			}
			set
			{
				if ((this._Team2IdType != value))
				{
					this.OnTeam2IdTypeChanging(value);
					this.SendPropertyChanging();
					this._Team2IdType = value;
					this.SendPropertyChanged("Team2IdType");
					this.OnTeam2IdTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameNo", DbType="Int NOT NULL")]
		public int GameNo
		{
			get
			{
				return this._GameNo;
			}
			set
			{
				if ((this._GameNo != value))
				{
					this.OnGameNoChanging(value);
					this.SendPropertyChanging();
					this._GameNo = value;
					this.SendPropertyChanged("GameNo");
					this.OnGameNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundNo", DbType="Int NOT NULL")]
		public int RoundNo
		{
			get
			{
				return this._RoundNo;
			}
			set
			{
				if ((this._RoundNo != value))
				{
					this.OnRoundNoChanging(value);
					this.SendPropertyChanging();
					this._RoundNo = value;
					this.SendPropertyChanged("RoundNo");
					this.OnRoundNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumGamesInSeries", DbType="Int NOT NULL")]
		public int NumGamesInSeries
		{
			get
			{
				return this._NumGamesInSeries;
			}
			set
			{
				if ((this._NumGamesInSeries != value))
				{
					this.OnNumGamesInSeriesChanging(value);
					this.SendPropertyChanging();
					this._NumGamesInSeries = value;
					this.SendPropertyChanged("NumGamesInSeries");
					this.OnNumGamesInSeriesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayoffBracket_PlayoffGame", Storage="_PlayoffGames", ThisKey="Id", OtherKey="BracketId")]
		public EntitySet<PlayoffGame> PlayoffGames
		{
			get
			{
				return this._PlayoffGames;
			}
			set
			{
				this._PlayoffGames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayoffSetup_PlayoffBracket", Storage="_PlayoffSetup", ThisKey="PlayoffId", OtherKey="Id", IsForeignKey=true)]
		public PlayoffSetup PlayoffSetup
		{
			get
			{
				return this._PlayoffSetup.Entity;
			}
			set
			{
				PlayoffSetup previousValue = this._PlayoffSetup.Entity;
				if (((previousValue != value) 
							|| (this._PlayoffSetup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayoffSetup.Entity = null;
						previousValue.PlayoffBrackets.Remove(this);
					}
					this._PlayoffSetup.Entity = value;
					if ((value != null))
					{
						value.PlayoffBrackets.Add(this);
						this._PlayoffId = value.Id;
					}
					else
					{
						this._PlayoffId = default(long);
					}
					this.SendPropertyChanged("PlayoffSetup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayoffGames(PlayoffGame entity)
		{
			this.SendPropertyChanging();
			entity.PlayoffBracket = this;
		}
		
		private void detach_PlayoffGames(PlayoffGame entity)
		{
			this.SendPropertyChanging();
			entity.PlayoffBracket = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayoffGame")]
	public partial class PlayoffGame : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _BracketId;
		
		private long _FieldId;
		
		private System.DateTime _gameDate;
		
		private System.DateTime _gameTime;
		
		private long _GameId;
		
		private long _PlayoffId;
		
		private int _SeriesGameNo;
		
		private bool _Team1HomeTeam;
		
		private EntityRef<PlayoffBracket> _PlayoffBracket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnBracketIdChanging(long value);
    partial void OnBracketIdChanged();
    partial void OnFieldIdChanging(long value);
    partial void OnFieldIdChanged();
    partial void OngameDateChanging(System.DateTime value);
    partial void OngameDateChanged();
    partial void OngameTimeChanging(System.DateTime value);
    partial void OngameTimeChanged();
    partial void OnGameIdChanging(long value);
    partial void OnGameIdChanged();
    partial void OnPlayoffIdChanging(long value);
    partial void OnPlayoffIdChanged();
    partial void OnSeriesGameNoChanging(int value);
    partial void OnSeriesGameNoChanged();
    partial void OnTeam1HomeTeamChanging(bool value);
    partial void OnTeam1HomeTeamChanged();
    #endregion
		
		public PlayoffGame()
		{
			this._PlayoffBracket = default(EntityRef<PlayoffBracket>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BracketId", DbType="BigInt NOT NULL")]
		public long BracketId
		{
			get
			{
				return this._BracketId;
			}
			set
			{
				if ((this._BracketId != value))
				{
					if (this._PlayoffBracket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBracketIdChanging(value);
					this.SendPropertyChanging();
					this._BracketId = value;
					this.SendPropertyChanged("BracketId");
					this.OnBracketIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldId", DbType="BigInt NOT NULL")]
		public long FieldId
		{
			get
			{
				return this._FieldId;
			}
			set
			{
				if ((this._FieldId != value))
				{
					this.OnFieldIdChanging(value);
					this.SendPropertyChanging();
					this._FieldId = value;
					this.SendPropertyChanged("FieldId");
					this.OnFieldIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gameDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime gameDate
		{
			get
			{
				return this._gameDate;
			}
			set
			{
				if ((this._gameDate != value))
				{
					this.OngameDateChanging(value);
					this.SendPropertyChanging();
					this._gameDate = value;
					this.SendPropertyChanged("gameDate");
					this.OngameDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gameTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime gameTime
		{
			get
			{
				return this._gameTime;
			}
			set
			{
				if ((this._gameTime != value))
				{
					this.OngameTimeChanging(value);
					this.SendPropertyChanging();
					this._gameTime = value;
					this.SendPropertyChanged("gameTime");
					this.OngameTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="BigInt NOT NULL")]
		public long GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayoffId", DbType="BigInt NOT NULL")]
		public long PlayoffId
		{
			get
			{
				return this._PlayoffId;
			}
			set
			{
				if ((this._PlayoffId != value))
				{
					this.OnPlayoffIdChanging(value);
					this.SendPropertyChanging();
					this._PlayoffId = value;
					this.SendPropertyChanged("PlayoffId");
					this.OnPlayoffIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeriesGameNo", DbType="Int NOT NULL")]
		public int SeriesGameNo
		{
			get
			{
				return this._SeriesGameNo;
			}
			set
			{
				if ((this._SeriesGameNo != value))
				{
					this.OnSeriesGameNoChanging(value);
					this.SendPropertyChanging();
					this._SeriesGameNo = value;
					this.SendPropertyChanged("SeriesGameNo");
					this.OnSeriesGameNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team1HomeTeam", DbType="Bit NOT NULL")]
		public bool Team1HomeTeam
		{
			get
			{
				return this._Team1HomeTeam;
			}
			set
			{
				if ((this._Team1HomeTeam != value))
				{
					this.OnTeam1HomeTeamChanging(value);
					this.SendPropertyChanging();
					this._Team1HomeTeam = value;
					this.SendPropertyChanged("Team1HomeTeam");
					this.OnTeam1HomeTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayoffBracket_PlayoffGame", Storage="_PlayoffBracket", ThisKey="BracketId", OtherKey="Id", IsForeignKey=true)]
		public PlayoffBracket PlayoffBracket
		{
			get
			{
				return this._PlayoffBracket.Entity;
			}
			set
			{
				PlayoffBracket previousValue = this._PlayoffBracket.Entity;
				if (((previousValue != value) 
							|| (this._PlayoffBracket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayoffBracket.Entity = null;
						previousValue.PlayoffGames.Remove(this);
					}
					this._PlayoffBracket.Entity = value;
					if ((value != null))
					{
						value.PlayoffGames.Add(this);
						this._BracketId = value.Id;
					}
					else
					{
						this._BracketId = default(long);
					}
					this.SendPropertyChanged("PlayoffBracket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayoffSeeds")]
	public partial class PlayoffSeed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _PlayoffId;
		
		private long _TeamId;
		
		private int _SeedNo;
		
		private EntityRef<PlayoffSetup> _PlayoffSetup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnPlayoffIdChanging(long value);
    partial void OnPlayoffIdChanged();
    partial void OnTeamIdChanging(long value);
    partial void OnTeamIdChanged();
    partial void OnSeedNoChanging(int value);
    partial void OnSeedNoChanged();
    #endregion
		
		public PlayoffSeed()
		{
			this._PlayoffSetup = default(EntityRef<PlayoffSetup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayoffId", DbType="BigInt NOT NULL")]
		public long PlayoffId
		{
			get
			{
				return this._PlayoffId;
			}
			set
			{
				if ((this._PlayoffId != value))
				{
					if (this._PlayoffSetup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayoffIdChanging(value);
					this.SendPropertyChanging();
					this._PlayoffId = value;
					this.SendPropertyChanged("PlayoffId");
					this.OnPlayoffIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="BigInt NOT NULL")]
		public long TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeedNo", DbType="Int NOT NULL")]
		public int SeedNo
		{
			get
			{
				return this._SeedNo;
			}
			set
			{
				if ((this._SeedNo != value))
				{
					this.OnSeedNoChanging(value);
					this.SendPropertyChanging();
					this._SeedNo = value;
					this.SendPropertyChanged("SeedNo");
					this.OnSeedNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayoffSetup_PlayoffSeed", Storage="_PlayoffSetup", ThisKey="PlayoffId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PlayoffSetup PlayoffSetup
		{
			get
			{
				return this._PlayoffSetup.Entity;
			}
			set
			{
				PlayoffSetup previousValue = this._PlayoffSetup.Entity;
				if (((previousValue != value) 
							|| (this._PlayoffSetup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayoffSetup.Entity = null;
						previousValue.PlayoffSeeds.Remove(this);
					}
					this._PlayoffSetup.Entity = value;
					if ((value != null))
					{
						value.PlayoffSeeds.Add(this);
						this._PlayoffId = value.Id;
					}
					else
					{
						this._PlayoffId = default(long);
					}
					this.SendPropertyChanged("PlayoffSetup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayoffSetup")]
	public partial class PlayoffSetup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _LeagueSeasonId;
		
		private int _NumTeams;
		
		private string _Description;
		
		private bool _Active;
		
		private EntitySet<PlayoffBracket> _PlayoffBrackets;
		
		private EntitySet<PlayoffSeed> _PlayoffSeeds;
		
		private EntityRef<LeagueSeason> _LeagueSeason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnLeagueSeasonIdChanging(long value);
    partial void OnLeagueSeasonIdChanged();
    partial void OnNumTeamsChanging(int value);
    partial void OnNumTeamsChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public PlayoffSetup()
		{
			this._PlayoffBrackets = new EntitySet<PlayoffBracket>(new Action<PlayoffBracket>(this.attach_PlayoffBrackets), new Action<PlayoffBracket>(this.detach_PlayoffBrackets));
			this._PlayoffSeeds = new EntitySet<PlayoffSeed>(new Action<PlayoffSeed>(this.attach_PlayoffSeeds), new Action<PlayoffSeed>(this.detach_PlayoffSeeds));
			this._LeagueSeason = default(EntityRef<LeagueSeason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueSeasonId", DbType="BigInt NOT NULL")]
		public long LeagueSeasonId
		{
			get
			{
				return this._LeagueSeasonId;
			}
			set
			{
				if ((this._LeagueSeasonId != value))
				{
					if (this._LeagueSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._LeagueSeasonId = value;
					this.SendPropertyChanged("LeagueSeasonId");
					this.OnLeagueSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumTeams", DbType="Int NOT NULL")]
		public int NumTeams
		{
			get
			{
				return this._NumTeams;
			}
			set
			{
				if ((this._NumTeams != value))
				{
					this.OnNumTeamsChanging(value);
					this.SendPropertyChanging();
					this._NumTeams = value;
					this.SendPropertyChanged("NumTeams");
					this.OnNumTeamsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayoffSetup_PlayoffBracket", Storage="_PlayoffBrackets", ThisKey="Id", OtherKey="PlayoffId")]
		public EntitySet<PlayoffBracket> PlayoffBrackets
		{
			get
			{
				return this._PlayoffBrackets;
			}
			set
			{
				this._PlayoffBrackets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayoffSetup_PlayoffSeed", Storage="_PlayoffSeeds", ThisKey="Id", OtherKey="PlayoffId")]
		public EntitySet<PlayoffSeed> PlayoffSeeds
		{
			get
			{
				return this._PlayoffSeeds;
			}
			set
			{
				this._PlayoffSeeds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSeason_PlayoffSetup", Storage="_LeagueSeason", ThisKey="LeagueSeasonId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LeagueSeason LeagueSeason
		{
			get
			{
				return this._LeagueSeason.Entity;
			}
			set
			{
				LeagueSeason previousValue = this._LeagueSeason.Entity;
				if (((previousValue != value) 
							|| (this._LeagueSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueSeason.Entity = null;
						previousValue.PlayoffSetups.Remove(this);
					}
					this._LeagueSeason.Entity = value;
					if ((value != null))
					{
						value.PlayoffSetups.Add(this);
						this._LeagueSeasonId = value.Id;
					}
					else
					{
						this._LeagueSeasonId = default(long);
					}
					this.SendPropertyChanged("LeagueSeason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayoffBrackets(PlayoffBracket entity)
		{
			this.SendPropertyChanging();
			entity.PlayoffSetup = this;
		}
		
		private void detach_PlayoffBrackets(PlayoffBracket entity)
		{
			this.SendPropertyChanging();
			entity.PlayoffSetup = null;
		}
		
		private void attach_PlayoffSeeds(PlayoffSeed entity)
		{
			this.SendPropertyChanging();
			entity.PlayoffSetup = this;
		}
		
		private void detach_PlayoffSeeds(PlayoffSeed entity)
		{
			this.SendPropertyChanging();
			entity.PlayoffSetup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProfileCategory")]
	public partial class ProfileCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private string _CategoryName;
		
		private int _Priority;
		
		private EntitySet<ProfileQuestion> _ProfileQuestions;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    #endregion
		
		public ProfileCategory()
		{
			this._ProfileQuestions = new EntitySet<ProfileQuestion>(new Action<ProfileQuestion>(this.attach_ProfileQuestions), new Action<ProfileQuestion>(this.detach_ProfileQuestions));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProfileCategory_ProfileQuestion", Storage="_ProfileQuestions", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<ProfileQuestion> ProfileQuestions
		{
			get
			{
				return this._ProfileQuestions;
			}
			set
			{
				this._ProfileQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_ProfileCategory", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.ProfileCategories.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.ProfileCategories.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProfileQuestions(ProfileQuestion entity)
		{
			this.SendPropertyChanging();
			entity.ProfileCategory = this;
		}
		
		private void detach_ProfileQuestions(ProfileQuestion entity)
		{
			this.SendPropertyChanging();
			entity.ProfileCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProfileQuestion")]
	public partial class ProfileQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _CategoryId;
		
		private string _Question;
		
		private int _QuestionNum;
		
		private EntityRef<ProfileCategory> _ProfileCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnCategoryIdChanging(long value);
    partial void OnCategoryIdChanged();
    partial void OnQuestionChanging(string value);
    partial void OnQuestionChanged();
    partial void OnQuestionNumChanging(int value);
    partial void OnQuestionNumChanged();
    #endregion
		
		public ProfileQuestion()
		{
			this._ProfileCategory = default(EntityRef<ProfileCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="BigInt NOT NULL")]
		public long CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._ProfileCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				if ((this._Question != value))
				{
					this.OnQuestionChanging(value);
					this.SendPropertyChanging();
					this._Question = value;
					this.SendPropertyChanged("Question");
					this.OnQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionNum", DbType="Int NOT NULL")]
		public int QuestionNum
		{
			get
			{
				return this._QuestionNum;
			}
			set
			{
				if ((this._QuestionNum != value))
				{
					this.OnQuestionNumChanging(value);
					this.SendPropertyChanging();
					this._QuestionNum = value;
					this.SendPropertyChanged("QuestionNum");
					this.OnQuestionNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProfileCategory_ProfileQuestion", Storage="_ProfileCategory", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ProfileCategory ProfileCategory
		{
			get
			{
				return this._ProfileCategory.Entity;
			}
			set
			{
				ProfileCategory previousValue = this._ProfileCategory.Entity;
				if (((previousValue != value) 
							|| (this._ProfileCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProfileCategory.Entity = null;
						previousValue.ProfileQuestions.Remove(this);
					}
					this._ProfileCategory.Entity = value;
					if ((value != null))
					{
						value.ProfileQuestions.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(long);
					}
					this.SendPropertyChanged("ProfileCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roster")]
	public partial class Roster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private long _ContactId;
		
		private bool _SubmittedDriversLicense;
		
		private EntitySet<PlayerSeasonAffiliationDue> _PlayerSeasonAffiliationDues;
		
		private EntitySet<RosterSeason> _RosterSeasons;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnContactIdChanging(long value);
    partial void OnContactIdChanged();
    partial void OnSubmittedDriversLicenseChanging(bool value);
    partial void OnSubmittedDriversLicenseChanged();
    #endregion
		
		public Roster()
		{
			this._PlayerSeasonAffiliationDues = new EntitySet<PlayerSeasonAffiliationDue>(new Action<PlayerSeasonAffiliationDue>(this.attach_PlayerSeasonAffiliationDues), new Action<PlayerSeasonAffiliationDue>(this.detach_PlayerSeasonAffiliationDues));
			this._RosterSeasons = new EntitySet<RosterSeason>(new Action<RosterSeason>(this.attach_RosterSeasons), new Action<RosterSeason>(this.detach_RosterSeasons));
			this._Account = default(EntityRef<Account>);
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="BigInt NOT NULL")]
		public long ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmittedDriversLicense", DbType="Bit NOT NULL")]
		public bool SubmittedDriversLicense
		{
			get
			{
				return this._SubmittedDriversLicense;
			}
			set
			{
				if ((this._SubmittedDriversLicense != value))
				{
					this.OnSubmittedDriversLicenseChanging(value);
					this.SendPropertyChanging();
					this._SubmittedDriversLicense = value;
					this.SendPropertyChanged("SubmittedDriversLicense");
					this.OnSubmittedDriversLicenseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roster_PlayerSeasonAffiliationDue", Storage="_PlayerSeasonAffiliationDues", ThisKey="Id", OtherKey="PlayerId")]
		public EntitySet<PlayerSeasonAffiliationDue> PlayerSeasonAffiliationDues
		{
			get
			{
				return this._PlayerSeasonAffiliationDues;
			}
			set
			{
				this._PlayerSeasonAffiliationDues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roster_RosterSeason", Storage="_RosterSeasons", ThisKey="Id", OtherKey="PlayerId")]
		public EntitySet<RosterSeason> RosterSeasons
		{
			get
			{
				return this._RosterSeasons;
			}
			set
			{
				this._RosterSeasons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Roster", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Rosters.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Rosters.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Roster", Storage="_Contact", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Rosters.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Rosters.Add(this);
						this._ContactId = value.Id;
					}
					else
					{
						this._ContactId = default(long);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayerSeasonAffiliationDues(PlayerSeasonAffiliationDue entity)
		{
			this.SendPropertyChanging();
			entity.Roster = this;
		}
		
		private void detach_PlayerSeasonAffiliationDues(PlayerSeasonAffiliationDue entity)
		{
			this.SendPropertyChanging();
			entity.Roster = null;
		}
		
		private void attach_RosterSeasons(RosterSeason entity)
		{
			this.SendPropertyChanging();
			entity.Roster = this;
		}
		
		private void detach_RosterSeasons(RosterSeason entity)
		{
			this.SendPropertyChanging();
			entity.Roster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RosterSeason")]
	public partial class RosterSeason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _PlayerId;
		
		private long _TeamSeasonId;
		
		private int _PlayerNumber;
		
		private bool _Inactive;
		
		private bool _SubmittedWaiver;
		
		private System.Nullable<System.DateTime> _DateAdded;
		
		private EntitySet<batstatsum> _batstatsums;
		
		private EntitySet<fieldstatsum> _fieldstatsums;
		
		private EntitySet<GameEjection> _GameEjections;
		
		private EntitySet<pitchstatsum> _pitchstatsums;
		
		private EntitySet<PlayerRecap> _PlayerRecaps;
		
		private EntityRef<Roster> _Roster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnTeamSeasonIdChanging(long value);
    partial void OnTeamSeasonIdChanged();
    partial void OnPlayerNumberChanging(int value);
    partial void OnPlayerNumberChanged();
    partial void OnInactiveChanging(bool value);
    partial void OnInactiveChanged();
    partial void OnSubmittedWaiverChanging(bool value);
    partial void OnSubmittedWaiverChanged();
    partial void OnDateAddedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateAddedChanged();
    #endregion
		
		public RosterSeason()
		{
			this._batstatsums = new EntitySet<batstatsum>(new Action<batstatsum>(this.attach_batstatsums), new Action<batstatsum>(this.detach_batstatsums));
			this._fieldstatsums = new EntitySet<fieldstatsum>(new Action<fieldstatsum>(this.attach_fieldstatsums), new Action<fieldstatsum>(this.detach_fieldstatsums));
			this._GameEjections = new EntitySet<GameEjection>(new Action<GameEjection>(this.attach_GameEjections), new Action<GameEjection>(this.detach_GameEjections));
			this._pitchstatsums = new EntitySet<pitchstatsum>(new Action<pitchstatsum>(this.attach_pitchstatsums), new Action<pitchstatsum>(this.detach_pitchstatsums));
			this._PlayerRecaps = new EntitySet<PlayerRecap>(new Action<PlayerRecap>(this.attach_PlayerRecaps), new Action<PlayerRecap>(this.detach_PlayerRecaps));
			this._Roster = default(EntityRef<Roster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._Roster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamSeasonId", DbType="BigInt NOT NULL")]
		public long TeamSeasonId
		{
			get
			{
				return this._TeamSeasonId;
			}
			set
			{
				if ((this._TeamSeasonId != value))
				{
					this.OnTeamSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._TeamSeasonId = value;
					this.SendPropertyChanged("TeamSeasonId");
					this.OnTeamSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerNumber", DbType="Int NOT NULL")]
		public int PlayerNumber
		{
			get
			{
				return this._PlayerNumber;
			}
			set
			{
				if ((this._PlayerNumber != value))
				{
					this.OnPlayerNumberChanging(value);
					this.SendPropertyChanging();
					this._PlayerNumber = value;
					this.SendPropertyChanged("PlayerNumber");
					this.OnPlayerNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Inactive", DbType="Bit NOT NULL")]
		public bool Inactive
		{
			get
			{
				return this._Inactive;
			}
			set
			{
				if ((this._Inactive != value))
				{
					this.OnInactiveChanging(value);
					this.SendPropertyChanging();
					this._Inactive = value;
					this.SendPropertyChanged("Inactive");
					this.OnInactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmittedWaiver", DbType="Bit NOT NULL")]
		public bool SubmittedWaiver
		{
			get
			{
				return this._SubmittedWaiver;
			}
			set
			{
				if ((this._SubmittedWaiver != value))
				{
					this.OnSubmittedWaiverChanging(value);
					this.SendPropertyChanging();
					this._SubmittedWaiver = value;
					this.SendPropertyChanged("SubmittedWaiver");
					this.OnSubmittedWaiverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RosterSeason_batstatsum", Storage="_batstatsums", ThisKey="Id", OtherKey="PlayerId")]
		public EntitySet<batstatsum> batstatsums
		{
			get
			{
				return this._batstatsums;
			}
			set
			{
				this._batstatsums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RosterSeason_fieldstatsum", Storage="_fieldstatsums", ThisKey="Id", OtherKey="PlayerId")]
		public EntitySet<fieldstatsum> fieldstatsums
		{
			get
			{
				return this._fieldstatsums;
			}
			set
			{
				this._fieldstatsums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RosterSeason_GameEjection", Storage="_GameEjections", ThisKey="Id", OtherKey="playerSeasonId")]
		public EntitySet<GameEjection> GameEjections
		{
			get
			{
				return this._GameEjections;
			}
			set
			{
				this._GameEjections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RosterSeason_pitchstatsum", Storage="_pitchstatsums", ThisKey="Id", OtherKey="PlayerId")]
		public EntitySet<pitchstatsum> pitchstatsums
		{
			get
			{
				return this._pitchstatsums;
			}
			set
			{
				this._pitchstatsums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RosterSeason_PlayerRecap", Storage="_PlayerRecaps", ThisKey="Id", OtherKey="PlayerId")]
		public EntitySet<PlayerRecap> PlayerRecaps
		{
			get
			{
				return this._PlayerRecaps;
			}
			set
			{
				this._PlayerRecaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roster_RosterSeason", Storage="_Roster", ThisKey="PlayerId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Roster Roster
		{
			get
			{
				return this._Roster.Entity;
			}
			set
			{
				Roster previousValue = this._Roster.Entity;
				if (((previousValue != value) 
							|| (this._Roster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Roster.Entity = null;
						previousValue.RosterSeasons.Remove(this);
					}
					this._Roster.Entity = value;
					if ((value != null))
					{
						value.RosterSeasons.Add(this);
						this._PlayerId = value.Id;
					}
					else
					{
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("Roster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_batstatsums(batstatsum entity)
		{
			this.SendPropertyChanging();
			entity.RosterSeason = this;
		}
		
		private void detach_batstatsums(batstatsum entity)
		{
			this.SendPropertyChanging();
			entity.RosterSeason = null;
		}
		
		private void attach_fieldstatsums(fieldstatsum entity)
		{
			this.SendPropertyChanging();
			entity.RosterSeason = this;
		}
		
		private void detach_fieldstatsums(fieldstatsum entity)
		{
			this.SendPropertyChanging();
			entity.RosterSeason = null;
		}
		
		private void attach_GameEjections(GameEjection entity)
		{
			this.SendPropertyChanging();
			entity.RosterSeason = this;
		}
		
		private void detach_GameEjections(GameEjection entity)
		{
			this.SendPropertyChanging();
			entity.RosterSeason = null;
		}
		
		private void attach_pitchstatsums(pitchstatsum entity)
		{
			this.SendPropertyChanging();
			entity.RosterSeason = this;
		}
		
		private void detach_pitchstatsums(pitchstatsum entity)
		{
			this.SendPropertyChanging();
			entity.RosterSeason = null;
		}
		
		private void attach_PlayerRecaps(PlayerRecap entity)
		{
			this.SendPropertyChanging();
			entity.RosterSeason = this;
		}
		
		private void detach_PlayerRecaps(PlayerRecap entity)
		{
			this.SendPropertyChanging();
			entity.RosterSeason = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Season")]
	public partial class Season : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private string _Name;
		
		private EntitySet<LeagueSeason> _LeagueSeasons;
		
		private EntitySet<PlayerSeasonAffiliationDue> _PlayerSeasonAffiliationDues;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Season()
		{
			this._LeagueSeasons = new EntitySet<LeagueSeason>(new Action<LeagueSeason>(this.attach_LeagueSeasons), new Action<LeagueSeason>(this.detach_LeagueSeasons));
			this._PlayerSeasonAffiliationDues = new EntitySet<PlayerSeasonAffiliationDue>(new Action<PlayerSeasonAffiliationDue>(this.attach_PlayerSeasonAffiliationDues), new Action<PlayerSeasonAffiliationDue>(this.detach_PlayerSeasonAffiliationDues));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_LeagueSeason", Storage="_LeagueSeasons", ThisKey="Id", OtherKey="SeasonId")]
		public EntitySet<LeagueSeason> LeagueSeasons
		{
			get
			{
				return this._LeagueSeasons;
			}
			set
			{
				this._LeagueSeasons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_PlayerSeasonAffiliationDue", Storage="_PlayerSeasonAffiliationDues", ThisKey="Id", OtherKey="SeasonId")]
		public EntitySet<PlayerSeasonAffiliationDue> PlayerSeasonAffiliationDues
		{
			get
			{
				return this._PlayerSeasonAffiliationDues;
			}
			set
			{
				this._PlayerSeasonAffiliationDues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Season", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Seasons.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Seasons.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LeagueSeasons(LeagueSeason entity)
		{
			this.SendPropertyChanging();
			entity.Season = this;
		}
		
		private void detach_LeagueSeasons(LeagueSeason entity)
		{
			this.SendPropertyChanging();
			entity.Season = null;
		}
		
		private void attach_PlayerSeasonAffiliationDues(PlayerSeasonAffiliationDue entity)
		{
			this.SendPropertyChanging();
			entity.Season = this;
		}
		
		private void detach_PlayerSeasonAffiliationDues(PlayerSeasonAffiliationDue entity)
		{
			this.SendPropertyChanging();
			entity.Season = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sponsors")]
	public partial class Sponsor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private string _Name;
		
		private string _StreetAddress;
		
		private string _CityStateZip;
		
		private string _Description;
		
		private string _EMail;
		
		private string _Phone;
		
		private string _Fax;
		
		private string _WebSite;
		
		private long _TeamId;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStreetAddressChanging(string value);
    partial void OnStreetAddressChanged();
    partial void OnCityStateZipChanging(string value);
    partial void OnCityStateZipChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnEMailChanging(string value);
    partial void OnEMailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnWebSiteChanging(string value);
    partial void OnWebSiteChanged();
    partial void OnTeamIdChanging(long value);
    partial void OnTeamIdChanged();
    #endregion
		
		public Sponsor()
		{
			this._Account = default(EntityRef<Account>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetAddress", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string StreetAddress
		{
			get
			{
				return this._StreetAddress;
			}
			set
			{
				if ((this._StreetAddress != value))
				{
					this.OnStreetAddressChanging(value);
					this.SendPropertyChanging();
					this._StreetAddress = value;
					this.SendPropertyChanged("StreetAddress");
					this.OnStreetAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityStateZip", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string CityStateZip
		{
			get
			{
				return this._CityStateZip;
			}
			set
			{
				if ((this._CityStateZip != value))
				{
					this.OnCityStateZipChanging(value);
					this.SendPropertyChanging();
					this._CityStateZip = value;
					this.SendPropertyChanged("CityStateZip");
					this.OnCityStateZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMail", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this.OnEMailChanging(value);
					this.SendPropertyChanging();
					this._EMail = value;
					this.SendPropertyChanged("EMail");
					this.OnEMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(14) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(14) NOT NULL", CanBeNull=false)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebSite", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string WebSite
		{
			get
			{
				return this._WebSite;
			}
			set
			{
				if ((this._WebSite != value))
				{
					this.OnWebSiteChanging(value);
					this.SendPropertyChanging();
					this._WebSite = value;
					this.SendPropertyChanged("WebSite");
					this.OnWebSiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="BigInt NOT NULL")]
		public long TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Sponsor", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Sponsors.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Sponsors.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Sponsor", Storage="_Team", ThisKey="TeamId", OtherKey="Id", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Sponsors.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Sponsors.Add(this);
						this._TeamId = value.Id;
					}
					else
					{
						this._TeamId = default(long);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamHandouts")]
	public partial class TeamHandout : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Description;
		
		private string _FileName;
		
		private long _TeamId;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnTeamIdChanging(long value);
    partial void OnTeamIdChanged();
    #endregion
		
		public TeamHandout()
		{
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="BigInt NOT NULL")]
		public long TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamHandout", Storage="_Team", ThisKey="TeamId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.TeamHandouts.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.TeamHandouts.Add(this);
						this._TeamId = value.Id;
					}
					else
					{
						this._TeamId = default(long);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamNews")]
	public partial class TeamNew : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _TeamId;
		
		private System.DateTime _Date;
		
		private string _Text;
		
		private string _Title;
		
		private bool _SpecialAnnounce;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnTeamIdChanging(long value);
    partial void OnTeamIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSpecialAnnounceChanging(bool value);
    partial void OnSpecialAnnounceChanged();
    #endregion
		
		public TeamNew()
		{
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="BigInt NOT NULL")]
		public long TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialAnnounce", DbType="Bit NOT NULL")]
		public bool SpecialAnnounce
		{
			get
			{
				return this._SpecialAnnounce;
			}
			set
			{
				if ((this._SpecialAnnounce != value))
				{
					this.OnSpecialAnnounceChanging(value);
					this.SendPropertyChanging();
					this._SpecialAnnounce = value;
					this.SendPropertyChanged("SpecialAnnounce");
					this.OnSpecialAnnounceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamNew", Storage="_Team", ThisKey="TeamId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.TeamNews.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.TeamNews.Add(this);
						this._TeamId = value.Id;
					}
					else
					{
						this._TeamId = default(long);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teams")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private string _WebAddress;
		
		private EntitySet<AccountWelcome> _AccountWelcomes;
		
		private EntitySet<Sponsor> _Sponsors;
		
		private EntitySet<TeamHandout> _TeamHandouts;
		
		private EntitySet<TeamNew> _TeamNews;
		
		private EntitySet<TeamsSeason> _TeamsSeasons;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnWebAddressChanging(string value);
    partial void OnWebAddressChanged();
    #endregion
		
		public Team()
		{
			this._AccountWelcomes = new EntitySet<AccountWelcome>(new Action<AccountWelcome>(this.attach_AccountWelcomes), new Action<AccountWelcome>(this.detach_AccountWelcomes));
			this._Sponsors = new EntitySet<Sponsor>(new Action<Sponsor>(this.attach_Sponsors), new Action<Sponsor>(this.detach_Sponsors));
			this._TeamHandouts = new EntitySet<TeamHandout>(new Action<TeamHandout>(this.attach_TeamHandouts), new Action<TeamHandout>(this.detach_TeamHandouts));
			this._TeamNews = new EntitySet<TeamNew>(new Action<TeamNew>(this.attach_TeamNews), new Action<TeamNew>(this.detach_TeamNews));
			this._TeamsSeasons = new EntitySet<TeamsSeason>(new Action<TeamsSeason>(this.attach_TeamsSeasons), new Action<TeamsSeason>(this.detach_TeamsSeasons));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebAddress", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string WebAddress
		{
			get
			{
				return this._WebAddress;
			}
			set
			{
				if ((this._WebAddress != value))
				{
					this.OnWebAddressChanging(value);
					this.SendPropertyChanging();
					this._WebAddress = value;
					this.SendPropertyChanged("WebAddress");
					this.OnWebAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_AccountWelcome", Storage="_AccountWelcomes", ThisKey="Id", OtherKey="TeamId")]
		public EntitySet<AccountWelcome> AccountWelcomes
		{
			get
			{
				return this._AccountWelcomes;
			}
			set
			{
				this._AccountWelcomes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Sponsor", Storage="_Sponsors", ThisKey="Id", OtherKey="TeamId")]
		public EntitySet<Sponsor> Sponsors
		{
			get
			{
				return this._Sponsors;
			}
			set
			{
				this._Sponsors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamHandout", Storage="_TeamHandouts", ThisKey="Id", OtherKey="TeamId")]
		public EntitySet<TeamHandout> TeamHandouts
		{
			get
			{
				return this._TeamHandouts;
			}
			set
			{
				this._TeamHandouts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamNew", Storage="_TeamNews", ThisKey="Id", OtherKey="TeamId")]
		public EntitySet<TeamNew> TeamNews
		{
			get
			{
				return this._TeamNews;
			}
			set
			{
				this._TeamNews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamsSeason", Storage="_TeamsSeasons", ThisKey="Id", OtherKey="TeamId")]
		public EntitySet<TeamsSeason> TeamsSeasons
		{
			get
			{
				return this._TeamsSeasons;
			}
			set
			{
				this._TeamsSeasons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Team", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountWelcomes(AccountWelcome entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_AccountWelcomes(AccountWelcome entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_Sponsors(Sponsor entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Sponsors(Sponsor entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_TeamHandouts(TeamHandout entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_TeamHandouts(TeamHandout entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_TeamNews(TeamNew entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_TeamNews(TeamNew entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_TeamsSeasons(TeamsSeason entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_TeamsSeasons(TeamsSeason entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamSeasonManager")]
	public partial class TeamSeasonManager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _TeamSeasonId;
		
		private long _ContactId;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<TeamsSeason> _TeamsSeason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnTeamSeasonIdChanging(long value);
    partial void OnTeamSeasonIdChanged();
    partial void OnContactIdChanging(long value);
    partial void OnContactIdChanged();
    #endregion
		
		public TeamSeasonManager()
		{
			this._Contact = default(EntityRef<Contact>);
			this._TeamsSeason = default(EntityRef<TeamsSeason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamSeasonId", DbType="BigInt NOT NULL")]
		public long TeamSeasonId
		{
			get
			{
				return this._TeamSeasonId;
			}
			set
			{
				if ((this._TeamSeasonId != value))
				{
					if (this._TeamsSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._TeamSeasonId = value;
					this.SendPropertyChanged("TeamSeasonId");
					this.OnTeamSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="BigInt NOT NULL")]
		public long ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_TeamSeasonManager", Storage="_Contact", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.TeamSeasonManagers.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.TeamSeasonManagers.Add(this);
						this._ContactId = value.Id;
					}
					else
					{
						this._ContactId = default(long);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsSeason_TeamSeasonManager", Storage="_TeamsSeason", ThisKey="TeamSeasonId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TeamsSeason TeamsSeason
		{
			get
			{
				return this._TeamsSeason.Entity;
			}
			set
			{
				TeamsSeason previousValue = this._TeamsSeason.Entity;
				if (((previousValue != value) 
							|| (this._TeamsSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamsSeason.Entity = null;
						previousValue.TeamSeasonManagers.Remove(this);
					}
					this._TeamsSeason.Entity = value;
					if ((value != null))
					{
						value.TeamSeasonManagers.Add(this);
						this._TeamSeasonId = value.Id;
					}
					else
					{
						this._TeamSeasonId = default(long);
					}
					this.SendPropertyChanged("TeamsSeason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamsSeason")]
	public partial class TeamsSeason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _LeagueSeasonId;
		
		private long _TeamId;
		
		private string _Name;
		
		private long _DivisionSeasonId;
		
		private EntitySet<GameRecap> _GameRecaps;
		
		private EntitySet<batstatsum> _batstatsums;
		
		private EntitySet<fieldstatsum> _fieldstatsums;
		
		private EntitySet<GolfMatch> _GolfMatches;
		
		private EntitySet<GolfMatch> _GolfMatches1;
		
		private EntitySet<GolfMatchScore> _GolfMatchScores;
		
		private EntitySet<GolfRoster> _GolfRosters;
		
		private EntitySet<pitchstatsum> _pitchstatsums;
		
		private EntitySet<PlayerRecap> _PlayerRecaps;
		
		private EntitySet<TeamSeasonManager> _TeamSeasonManagers;
		
		private EntityRef<LeagueSeason> _LeagueSeason;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnLeagueSeasonIdChanging(long value);
    partial void OnLeagueSeasonIdChanged();
    partial void OnTeamIdChanging(long value);
    partial void OnTeamIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDivisionSeasonIdChanging(long value);
    partial void OnDivisionSeasonIdChanged();
    #endregion
		
		public TeamsSeason()
		{
			this._GameRecaps = new EntitySet<GameRecap>(new Action<GameRecap>(this.attach_GameRecaps), new Action<GameRecap>(this.detach_GameRecaps));
			this._batstatsums = new EntitySet<batstatsum>(new Action<batstatsum>(this.attach_batstatsums), new Action<batstatsum>(this.detach_batstatsums));
			this._fieldstatsums = new EntitySet<fieldstatsum>(new Action<fieldstatsum>(this.attach_fieldstatsums), new Action<fieldstatsum>(this.detach_fieldstatsums));
			this._GolfMatches = new EntitySet<GolfMatch>(new Action<GolfMatch>(this.attach_GolfMatches), new Action<GolfMatch>(this.detach_GolfMatches));
			this._GolfMatches1 = new EntitySet<GolfMatch>(new Action<GolfMatch>(this.attach_GolfMatches1), new Action<GolfMatch>(this.detach_GolfMatches1));
			this._GolfMatchScores = new EntitySet<GolfMatchScore>(new Action<GolfMatchScore>(this.attach_GolfMatchScores), new Action<GolfMatchScore>(this.detach_GolfMatchScores));
			this._GolfRosters = new EntitySet<GolfRoster>(new Action<GolfRoster>(this.attach_GolfRosters), new Action<GolfRoster>(this.detach_GolfRosters));
			this._pitchstatsums = new EntitySet<pitchstatsum>(new Action<pitchstatsum>(this.attach_pitchstatsums), new Action<pitchstatsum>(this.detach_pitchstatsums));
			this._PlayerRecaps = new EntitySet<PlayerRecap>(new Action<PlayerRecap>(this.attach_PlayerRecaps), new Action<PlayerRecap>(this.detach_PlayerRecaps));
			this._TeamSeasonManagers = new EntitySet<TeamSeasonManager>(new Action<TeamSeasonManager>(this.attach_TeamSeasonManagers), new Action<TeamSeasonManager>(this.detach_TeamSeasonManagers));
			this._LeagueSeason = default(EntityRef<LeagueSeason>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueSeasonId", DbType="BigInt NOT NULL")]
		public long LeagueSeasonId
		{
			get
			{
				return this._LeagueSeasonId;
			}
			set
			{
				if ((this._LeagueSeasonId != value))
				{
					if (this._LeagueSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._LeagueSeasonId = value;
					this.SendPropertyChanged("LeagueSeasonId");
					this.OnLeagueSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="BigInt NOT NULL")]
		public long TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionSeasonId", DbType="BigInt NOT NULL")]
		public long DivisionSeasonId
		{
			get
			{
				return this._DivisionSeasonId;
			}
			set
			{
				if ((this._DivisionSeasonId != value))
				{
					this.OnDivisionSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._DivisionSeasonId = value;
					this.SendPropertyChanged("DivisionSeasonId");
					this.OnDivisionSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsSeason_GameRecap", Storage="_GameRecaps", ThisKey="Id", OtherKey="TeamId")]
		public EntitySet<GameRecap> GameRecaps
		{
			get
			{
				return this._GameRecaps;
			}
			set
			{
				this._GameRecaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsSeason_batstatsum", Storage="_batstatsums", ThisKey="Id", OtherKey="TeamId")]
		public EntitySet<batstatsum> batstatsums
		{
			get
			{
				return this._batstatsums;
			}
			set
			{
				this._batstatsums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsSeason_fieldstatsum", Storage="_fieldstatsums", ThisKey="Id", OtherKey="TeamId")]
		public EntitySet<fieldstatsum> fieldstatsums
		{
			get
			{
				return this._fieldstatsums;
			}
			set
			{
				this._fieldstatsums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsSeason_GolfMatch", Storage="_GolfMatches", ThisKey="Id", OtherKey="Team2")]
		public EntitySet<GolfMatch> GolfMatches
		{
			get
			{
				return this._GolfMatches;
			}
			set
			{
				this._GolfMatches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsSeason_GolfMatch1", Storage="_GolfMatches1", ThisKey="Id", OtherKey="Team1")]
		public EntitySet<GolfMatch> GolfMatches1
		{
			get
			{
				return this._GolfMatches1;
			}
			set
			{
				this._GolfMatches1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsSeason_GolfMatchScore", Storage="_GolfMatchScores", ThisKey="Id", OtherKey="TeamId")]
		public EntitySet<GolfMatchScore> GolfMatchScores
		{
			get
			{
				return this._GolfMatchScores;
			}
			set
			{
				this._GolfMatchScores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsSeason_GolfRoster", Storage="_GolfRosters", ThisKey="Id", OtherKey="TeamSeasonId")]
		public EntitySet<GolfRoster> GolfRosters
		{
			get
			{
				return this._GolfRosters;
			}
			set
			{
				this._GolfRosters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsSeason_pitchstatsum", Storage="_pitchstatsums", ThisKey="Id", OtherKey="TeamId")]
		public EntitySet<pitchstatsum> pitchstatsums
		{
			get
			{
				return this._pitchstatsums;
			}
			set
			{
				this._pitchstatsums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsSeason_PlayerRecap", Storage="_PlayerRecaps", ThisKey="Id", OtherKey="TeamId")]
		public EntitySet<PlayerRecap> PlayerRecaps
		{
			get
			{
				return this._PlayerRecaps;
			}
			set
			{
				this._PlayerRecaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsSeason_TeamSeasonManager", Storage="_TeamSeasonManagers", ThisKey="Id", OtherKey="TeamSeasonId")]
		public EntitySet<TeamSeasonManager> TeamSeasonManagers
		{
			get
			{
				return this._TeamSeasonManagers;
			}
			set
			{
				this._TeamSeasonManagers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LeagueSeason_TeamsSeason", Storage="_LeagueSeason", ThisKey="LeagueSeasonId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LeagueSeason LeagueSeason
		{
			get
			{
				return this._LeagueSeason.Entity;
			}
			set
			{
				LeagueSeason previousValue = this._LeagueSeason.Entity;
				if (((previousValue != value) 
							|| (this._LeagueSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LeagueSeason.Entity = null;
						previousValue.TeamsSeasons.Remove(this);
					}
					this._LeagueSeason.Entity = value;
					if ((value != null))
					{
						value.TeamsSeasons.Add(this);
						this._LeagueSeasonId = value.Id;
					}
					else
					{
						this._LeagueSeasonId = default(long);
					}
					this.SendPropertyChanged("LeagueSeason");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamsSeason", Storage="_Team", ThisKey="TeamId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.TeamsSeasons.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.TeamsSeasons.Add(this);
						this._TeamId = value.Id;
					}
					else
					{
						this._TeamId = default(long);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GameRecaps(GameRecap entity)
		{
			this.SendPropertyChanging();
			entity.TeamsSeason = this;
		}
		
		private void detach_GameRecaps(GameRecap entity)
		{
			this.SendPropertyChanging();
			entity.TeamsSeason = null;
		}
		
		private void attach_batstatsums(batstatsum entity)
		{
			this.SendPropertyChanging();
			entity.TeamsSeason = this;
		}
		
		private void detach_batstatsums(batstatsum entity)
		{
			this.SendPropertyChanging();
			entity.TeamsSeason = null;
		}
		
		private void attach_fieldstatsums(fieldstatsum entity)
		{
			this.SendPropertyChanging();
			entity.TeamsSeason = this;
		}
		
		private void detach_fieldstatsums(fieldstatsum entity)
		{
			this.SendPropertyChanging();
			entity.TeamsSeason = null;
		}
		
		private void attach_GolfMatches(GolfMatch entity)
		{
			this.SendPropertyChanging();
			entity.TeamsSeason = this;
		}
		
		private void detach_GolfMatches(GolfMatch entity)
		{
			this.SendPropertyChanging();
			entity.TeamsSeason = null;
		}
		
		private void attach_GolfMatches1(GolfMatch entity)
		{
			this.SendPropertyChanging();
			entity.TeamsSeason1 = this;
		}
		
		private void detach_GolfMatches1(GolfMatch entity)
		{
			this.SendPropertyChanging();
			entity.TeamsSeason1 = null;
		}
		
		private void attach_GolfMatchScores(GolfMatchScore entity)
		{
			this.SendPropertyChanging();
			entity.TeamsSeason = this;
		}
		
		private void detach_GolfMatchScores(GolfMatchScore entity)
		{
			this.SendPropertyChanging();
			entity.TeamsSeason = null;
		}
		
		private void attach_GolfRosters(GolfRoster entity)
		{
			this.SendPropertyChanging();
			entity.TeamsSeason = this;
		}
		
		private void detach_GolfRosters(GolfRoster entity)
		{
			this.SendPropertyChanging();
			entity.TeamsSeason = null;
		}
		
		private void attach_pitchstatsums(pitchstatsum entity)
		{
			this.SendPropertyChanging();
			entity.TeamsSeason = this;
		}
		
		private void detach_pitchstatsums(pitchstatsum entity)
		{
			this.SendPropertyChanging();
			entity.TeamsSeason = null;
		}
		
		private void attach_PlayerRecaps(PlayerRecap entity)
		{
			this.SendPropertyChanging();
			entity.TeamsSeason = this;
		}
		
		private void detach_PlayerRecaps(PlayerRecap entity)
		{
			this.SendPropertyChanging();
			entity.TeamsSeason = null;
		}
		
		private void attach_TeamSeasonManagers(TeamSeasonManager entity)
		{
			this.SendPropertyChanging();
			entity.TeamsSeason = this;
		}
		
		private void detach_TeamSeasonManagers(TeamSeasonManager entity)
		{
			this.SendPropertyChanging();
			entity.TeamsSeason = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VoteAnswers")]
	public partial class VoteAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _QuestionId;
		
		private long _OptionId;
		
		private long _ContactId;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<VoteOption> _VoteOption;
		
		private EntityRef<VoteQuestion> _VoteQuestion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnQuestionIdChanging(long value);
    partial void OnQuestionIdChanged();
    partial void OnOptionIdChanging(long value);
    partial void OnOptionIdChanged();
    partial void OnContactIdChanging(long value);
    partial void OnContactIdChanged();
    #endregion
		
		public VoteAnswer()
		{
			this._Contact = default(EntityRef<Contact>);
			this._VoteOption = default(EntityRef<VoteOption>);
			this._VoteQuestion = default(EntityRef<VoteQuestion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", DbType="BigInt NOT NULL")]
		public long QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._VoteQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptionId", DbType="BigInt NOT NULL")]
		public long OptionId
		{
			get
			{
				return this._OptionId;
			}
			set
			{
				if ((this._OptionId != value))
				{
					if (this._VoteOption.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOptionIdChanging(value);
					this.SendPropertyChanging();
					this._OptionId = value;
					this.SendPropertyChanged("OptionId");
					this.OnOptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="BigInt NOT NULL")]
		public long ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_VoteAnswer", Storage="_Contact", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.VoteAnswers.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.VoteAnswers.Add(this);
						this._ContactId = value.Id;
					}
					else
					{
						this._ContactId = default(long);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoteOption_VoteAnswer", Storage="_VoteOption", ThisKey="OptionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public VoteOption VoteOption
		{
			get
			{
				return this._VoteOption.Entity;
			}
			set
			{
				VoteOption previousValue = this._VoteOption.Entity;
				if (((previousValue != value) 
							|| (this._VoteOption.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VoteOption.Entity = null;
						previousValue.VoteAnswers.Remove(this);
					}
					this._VoteOption.Entity = value;
					if ((value != null))
					{
						value.VoteAnswers.Add(this);
						this._OptionId = value.Id;
					}
					else
					{
						this._OptionId = default(long);
					}
					this.SendPropertyChanged("VoteOption");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoteQuestion_VoteAnswer", Storage="_VoteQuestion", ThisKey="QuestionId", OtherKey="Id", IsForeignKey=true)]
		public VoteQuestion VoteQuestion
		{
			get
			{
				return this._VoteQuestion.Entity;
			}
			set
			{
				VoteQuestion previousValue = this._VoteQuestion.Entity;
				if (((previousValue != value) 
							|| (this._VoteQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VoteQuestion.Entity = null;
						previousValue.VoteAnswers.Remove(this);
					}
					this._VoteQuestion.Entity = value;
					if ((value != null))
					{
						value.VoteAnswers.Add(this);
						this._QuestionId = value.Id;
					}
					else
					{
						this._QuestionId = default(long);
					}
					this.SendPropertyChanged("VoteQuestion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VoteOptions")]
	public partial class VoteOption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _QuestionId;
		
		private string _OptionText;
		
		private int _Priority;
		
		private EntitySet<VoteAnswer> _VoteAnswers;
		
		private EntityRef<VoteQuestion> _VoteQuestion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnQuestionIdChanging(long value);
    partial void OnQuestionIdChanged();
    partial void OnOptionTextChanging(string value);
    partial void OnOptionTextChanged();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    #endregion
		
		public VoteOption()
		{
			this._VoteAnswers = new EntitySet<VoteAnswer>(new Action<VoteAnswer>(this.attach_VoteAnswers), new Action<VoteAnswer>(this.detach_VoteAnswers));
			this._VoteQuestion = default(EntityRef<VoteQuestion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", DbType="BigInt NOT NULL")]
		public long QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._VoteQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptionText", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string OptionText
		{
			get
			{
				return this._OptionText;
			}
			set
			{
				if ((this._OptionText != value))
				{
					this.OnOptionTextChanging(value);
					this.SendPropertyChanging();
					this._OptionText = value;
					this.SendPropertyChanged("OptionText");
					this.OnOptionTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoteOption_VoteAnswer", Storage="_VoteAnswers", ThisKey="Id", OtherKey="OptionId")]
		public EntitySet<VoteAnswer> VoteAnswers
		{
			get
			{
				return this._VoteAnswers;
			}
			set
			{
				this._VoteAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoteQuestion_VoteOption", Storage="_VoteQuestion", ThisKey="QuestionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public VoteQuestion VoteQuestion
		{
			get
			{
				return this._VoteQuestion.Entity;
			}
			set
			{
				VoteQuestion previousValue = this._VoteQuestion.Entity;
				if (((previousValue != value) 
							|| (this._VoteQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VoteQuestion.Entity = null;
						previousValue.VoteOptions.Remove(this);
					}
					this._VoteQuestion.Entity = value;
					if ((value != null))
					{
						value.VoteOptions.Add(this);
						this._QuestionId = value.Id;
					}
					else
					{
						this._QuestionId = default(long);
					}
					this.SendPropertyChanged("VoteQuestion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VoteAnswers(VoteAnswer entity)
		{
			this.SendPropertyChanging();
			entity.VoteOption = this;
		}
		
		private void detach_VoteAnswers(VoteAnswer entity)
		{
			this.SendPropertyChanging();
			entity.VoteOption = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VoteQuestion")]
	public partial class VoteQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private string _Question;
		
		private bool _Active;
		
		private EntitySet<VoteAnswer> _VoteAnswers;
		
		private EntitySet<VoteOption> _VoteOptions;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnQuestionChanging(string value);
    partial void OnQuestionChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public VoteQuestion()
		{
			this._VoteAnswers = new EntitySet<VoteAnswer>(new Action<VoteAnswer>(this.attach_VoteAnswers), new Action<VoteAnswer>(this.detach_VoteAnswers));
			this._VoteOptions = new EntitySet<VoteOption>(new Action<VoteOption>(this.attach_VoteOptions), new Action<VoteOption>(this.detach_VoteOptions));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				if ((this._Question != value))
				{
					this.OnQuestionChanging(value);
					this.SendPropertyChanging();
					this._Question = value;
					this.SendPropertyChanged("Question");
					this.OnQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoteQuestion_VoteAnswer", Storage="_VoteAnswers", ThisKey="Id", OtherKey="QuestionId")]
		public EntitySet<VoteAnswer> VoteAnswers
		{
			get
			{
				return this._VoteAnswers;
			}
			set
			{
				this._VoteAnswers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VoteQuestion_VoteOption", Storage="_VoteOptions", ThisKey="Id", OtherKey="QuestionId")]
		public EntitySet<VoteOption> VoteOptions
		{
			get
			{
				return this._VoteOptions;
			}
			set
			{
				this._VoteOptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_VoteQuestion", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.VoteQuestions.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.VoteQuestions.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VoteAnswers(VoteAnswer entity)
		{
			this.SendPropertyChanging();
			entity.VoteQuestion = this;
		}
		
		private void detach_VoteAnswers(VoteAnswer entity)
		{
			this.SendPropertyChanging();
			entity.VoteQuestion = null;
		}
		
		private void attach_VoteOptions(VoteOption entity)
		{
			this.SendPropertyChanging();
			entity.VoteQuestion = this;
		}
		
		private void detach_VoteOptions(VoteOption entity)
		{
			this.SendPropertyChanging();
			entity.VoteQuestion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUsers")]
	public partial class AspNetUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Email;
		
		private bool _EmailConfirmed;
		
		private string _PasswordHash;
		
		private string _SecurityStamp;
		
		private string _PhoneNumber;
		
		private bool _PhoneNumberConfirmed;
		
		private bool _TwoFactorEnabled;
		
		private System.Nullable<System.DateTime> _LockoutEndDateUtc;
		
		private bool _LockoutEnabled;
		
		private int _AccessFailedCount;
		
		private string _UserName;
		
		private EntitySet<AspNetUserClaim> _AspNetUserClaims;
		
		private EntitySet<AspNetUserLogin> _AspNetUserLogins;
		
		private EntitySet<AspNetUserRole> _AspNetUserRoles;
		
		private EntitySet<Contact> _Contacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmailConfirmedChanging(bool value);
    partial void OnEmailConfirmedChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnSecurityStampChanging(string value);
    partial void OnSecurityStampChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhoneNumberConfirmedChanging(bool value);
    partial void OnPhoneNumberConfirmedChanged();
    partial void OnTwoFactorEnabledChanging(bool value);
    partial void OnTwoFactorEnabledChanged();
    partial void OnLockoutEndDateUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnLockoutEndDateUtcChanged();
    partial void OnLockoutEnabledChanging(bool value);
    partial void OnLockoutEnabledChanged();
    partial void OnAccessFailedCountChanging(int value);
    partial void OnAccessFailedCountChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public AspNetUser()
		{
			this._AspNetUserClaims = new EntitySet<AspNetUserClaim>(new Action<AspNetUserClaim>(this.attach_AspNetUserClaims), new Action<AspNetUserClaim>(this.detach_AspNetUserClaims));
			this._AspNetUserLogins = new EntitySet<AspNetUserLogin>(new Action<AspNetUserLogin>(this.attach_AspNetUserLogins), new Action<AspNetUserLogin>(this.detach_AspNetUserLogins));
			this._AspNetUserRoles = new EntitySet<AspNetUserRole>(new Action<AspNetUserRole>(this.attach_AspNetUserRoles), new Action<AspNetUserRole>(this.detach_AspNetUserRoles));
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailConfirmed", DbType="Bit NOT NULL")]
		public bool EmailConfirmed
		{
			get
			{
				return this._EmailConfirmed;
			}
			set
			{
				if ((this._EmailConfirmed != value))
				{
					this.OnEmailConfirmedChanging(value);
					this.SendPropertyChanging();
					this._EmailConfirmed = value;
					this.SendPropertyChanged("EmailConfirmed");
					this.OnEmailConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(MAX)")]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="NVarChar(MAX)")]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this.OnSecurityStampChanging(value);
					this.SendPropertyChanging();
					this._SecurityStamp = value;
					this.SendPropertyChanged("SecurityStamp");
					this.OnSecurityStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(MAX)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumberConfirmed", DbType="Bit NOT NULL")]
		public bool PhoneNumberConfirmed
		{
			get
			{
				return this._PhoneNumberConfirmed;
			}
			set
			{
				if ((this._PhoneNumberConfirmed != value))
				{
					this.OnPhoneNumberConfirmedChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberConfirmed = value;
					this.SendPropertyChanged("PhoneNumberConfirmed");
					this.OnPhoneNumberConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoFactorEnabled", DbType="Bit NOT NULL")]
		public bool TwoFactorEnabled
		{
			get
			{
				return this._TwoFactorEnabled;
			}
			set
			{
				if ((this._TwoFactorEnabled != value))
				{
					this.OnTwoFactorEnabledChanging(value);
					this.SendPropertyChanging();
					this._TwoFactorEnabled = value;
					this.SendPropertyChanged("TwoFactorEnabled");
					this.OnTwoFactorEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEndDateUtc", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockoutEndDateUtc
		{
			get
			{
				return this._LockoutEndDateUtc;
			}
			set
			{
				if ((this._LockoutEndDateUtc != value))
				{
					this.OnLockoutEndDateUtcChanging(value);
					this.SendPropertyChanging();
					this._LockoutEndDateUtc = value;
					this.SendPropertyChanged("LockoutEndDateUtc");
					this.OnLockoutEndDateUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEnabled", DbType="Bit NOT NULL")]
		public bool LockoutEnabled
		{
			get
			{
				return this._LockoutEnabled;
			}
			set
			{
				if ((this._LockoutEnabled != value))
				{
					this.OnLockoutEnabledChanging(value);
					this.SendPropertyChanging();
					this._LockoutEnabled = value;
					this.SendPropertyChanged("LockoutEnabled");
					this.OnLockoutEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessFailedCount", DbType="Int NOT NULL")]
		public int AccessFailedCount
		{
			get
			{
				return this._AccessFailedCount;
			}
			set
			{
				if ((this._AccessFailedCount != value))
				{
					this.OnAccessFailedCountChanging(value);
					this.SendPropertyChanging();
					this._AccessFailedCount = value;
					this.SendPropertyChanged("AccessFailedCount");
					this.OnAccessFailedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserClaim", Storage="_AspNetUserClaims", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserClaim> AspNetUserClaims
		{
			get
			{
				return this._AspNetUserClaims;
			}
			set
			{
				this._AspNetUserClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserLogin", Storage="_AspNetUserLogins", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserLogin> AspNetUserLogins
		{
			get
			{
				return this._AspNetUserLogins;
			}
			set
			{
				this._AspNetUserLogins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserRole", Storage="_AspNetUserRoles", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this._AspNetUserRoles;
			}
			set
			{
				this._AspNetUserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_Contact", Storage="_Contacts", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetUserClaims(AspNetUserClaim entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserClaims(AspNetUserClaim entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetUserLogins(AspNetUserLogin entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserLogins(AspNetUserLogin entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkoutAnnouncement")]
	public partial class WorkoutAnnouncement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private string _WorkoutDesc;
		
		private System.DateTime _WorkoutDate;
		
		private System.DateTime _WorkoutTime;
		
		private long _FieldId;
		
		private string _Comments;
		
		private EntitySet<WorkoutRegistration> _WorkoutRegistrations;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<AvailableField> _AvailableField;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnWorkoutDescChanging(string value);
    partial void OnWorkoutDescChanged();
    partial void OnWorkoutDateChanging(System.DateTime value);
    partial void OnWorkoutDateChanged();
    partial void OnWorkoutTimeChanging(System.DateTime value);
    partial void OnWorkoutTimeChanged();
    partial void OnFieldIdChanging(long value);
    partial void OnFieldIdChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public WorkoutAnnouncement()
		{
			this._WorkoutRegistrations = new EntitySet<WorkoutRegistration>(new Action<WorkoutRegistration>(this.attach_WorkoutRegistrations), new Action<WorkoutRegistration>(this.detach_WorkoutRegistrations));
			this._Account = default(EntityRef<Account>);
			this._AvailableField = default(EntityRef<AvailableField>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkoutDesc", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string WorkoutDesc
		{
			get
			{
				return this._WorkoutDesc;
			}
			set
			{
				if ((this._WorkoutDesc != value))
				{
					this.OnWorkoutDescChanging(value);
					this.SendPropertyChanging();
					this._WorkoutDesc = value;
					this.SendPropertyChanged("WorkoutDesc");
					this.OnWorkoutDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkoutDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime WorkoutDate
		{
			get
			{
				return this._WorkoutDate;
			}
			set
			{
				if ((this._WorkoutDate != value))
				{
					this.OnWorkoutDateChanging(value);
					this.SendPropertyChanging();
					this._WorkoutDate = value;
					this.SendPropertyChanged("WorkoutDate");
					this.OnWorkoutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkoutTime", DbType="SmallDateTime NOT NULL")]
		public System.DateTime WorkoutTime
		{
			get
			{
				return this._WorkoutTime;
			}
			set
			{
				if ((this._WorkoutTime != value))
				{
					this.OnWorkoutTimeChanging(value);
					this.SendPropertyChanging();
					this._WorkoutTime = value;
					this.SendPropertyChanged("WorkoutTime");
					this.OnWorkoutTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldId", DbType="BigInt NOT NULL")]
		public long FieldId
		{
			get
			{
				return this._FieldId;
			}
			set
			{
				if ((this._FieldId != value))
				{
					if (this._AvailableField.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldIdChanging(value);
					this.SendPropertyChanging();
					this._FieldId = value;
					this.SendPropertyChanged("FieldId");
					this.OnFieldIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkoutAnnouncement_WorkoutRegistration", Storage="_WorkoutRegistrations", ThisKey="Id", OtherKey="WorkoutId")]
		public EntitySet<WorkoutRegistration> WorkoutRegistrations
		{
			get
			{
				return this._WorkoutRegistrations;
			}
			set
			{
				this._WorkoutRegistrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_WorkoutAnnouncement", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.WorkoutAnnouncements.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.WorkoutAnnouncements.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AvailableField_WorkoutAnnouncement", Storage="_AvailableField", ThisKey="FieldId", OtherKey="Id", IsForeignKey=true)]
		public AvailableField AvailableField
		{
			get
			{
				return this._AvailableField.Entity;
			}
			set
			{
				AvailableField previousValue = this._AvailableField.Entity;
				if (((previousValue != value) 
							|| (this._AvailableField.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AvailableField.Entity = null;
						previousValue.WorkoutAnnouncements.Remove(this);
					}
					this._AvailableField.Entity = value;
					if ((value != null))
					{
						value.WorkoutAnnouncements.Add(this);
						this._FieldId = value.Id;
					}
					else
					{
						this._FieldId = default(long);
					}
					this.SendPropertyChanged("AvailableField");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkoutRegistrations(WorkoutRegistration entity)
		{
			this.SendPropertyChanging();
			entity.WorkoutAnnouncement = this;
		}
		
		private void detach_WorkoutRegistrations(WorkoutRegistration entity)
		{
			this.SendPropertyChanging();
			entity.WorkoutAnnouncement = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DisplayLeagueLeaders")]
	public partial class DisplayLeagueLeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FieldName;
		
		private long _AccountId;
		
		private long _TeamId;
		
		private bool _IsBatLeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnTeamIdChanging(long value);
    partial void OnTeamIdChanged();
    partial void OnIsBatLeaderChanging(bool value);
    partial void OnIsBatLeaderChanged();
    #endregion
		
		public DisplayLeagueLeader()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldName", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBatLeader", DbType="Bit NOT NULL", IsPrimaryKey=true)]
		public bool IsBatLeader
		{
			get
			{
				return this._IsBatLeader;
			}
			set
			{
				if ((this._IsBatLeader != value))
				{
					this.OnIsBatLeaderChanging(value);
					this.SendPropertyChanging();
					this._IsBatLeader = value;
					this.SendPropertyChanged("IsBatLeader");
					this.OnIsBatLeaderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
