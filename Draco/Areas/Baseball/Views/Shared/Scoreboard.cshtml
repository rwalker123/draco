@model dynamic


<div class="ScoreboardFont">
<table class="control" style="width: 100%" cellspacing="0" cellpadding="0" border="0">
    <tr>
        <td align="left" class="" nowrap="noWrap">
            <b>Today</b></td>
    </tr>
    <tr>
        <td align="center">
        <table>
        <% 
            System.Collections.Generic.List<ModelObjects.Game> todayGames = DataAccess.Schedule.GetScoreboard(DataAccess.Accounts.GetCurrentAccount(), DateTime.Today);
            if (todayGames.Count > 0)
            {
                @Html.Partial("DisplayScoreboard",(todayGames, true);
            }
            else
            {
            %>
    			<tr><td nowrap="noWrap"><i>No Games Scheduled</i><br /><br /></td></tr>
            <%
            }
        %>
        </table>
        </td>
    </tr>
    <tr>
        <td align="left" class="" nowrap="noWrap">
            <b>Yesterday</b></td>
    </tr>
    <tr>
        <td align="center">
        <table>
        <% 
            DateTime yesterday = DateTime.Today.AddDays(-1.0);
            System.Collections.Generic.List<ModelObjects.Game> yesterdayGames = DataAccess.Schedule.GetScoreboard(DataAccess.Accounts.GetCurrentAccount(), yesterday);
            if (yesterdayGames.Count > 0)
            {
                DisplayScoreboard(yesterdayGames, true);
            }
            else
            {
            %>
    			<tr><td nowrap="noWrap"><i>No Games Scheduled</i><br /><br /></td></tr>
            <%
            }
        %>
        </table>
        </td>
    </tr>
    </table>
    <br />
    <table class="control" style="width: 100%" cellspacing="0" cellpadding="0" border="0">
    <%
        // go back three days for game summaries
        DateTime curDay = yesterday.AddDays(-1.0);
        System.Collections.Generic.List<ModelObjects.Game>[] prevGames = new System.Collections.Generic.List<ModelObjects.Game>[3];
        for (int i = 0; i < 3; i++)
        {
            System.Collections.Generic.List<ModelObjects.Game> games = new System.Collections.Generic.List<ModelObjects.Game>();
            
            games.AddRange(DataAccess.Schedule.GetScoreboard(DataAccess.Accounts.GetCurrentAccount(), curDay));
            prevGames[i] = games;
            
            curDay = curDay.AddDays(-1.0);
        }

        // parse out ones without game summaries
        foreach (System.Collections.Generic.List<ModelObjects.Game> games in prevGames)
        {
            System.Collections.Generic.List<ModelObjects.Game> gameSummaries = new System.Collections.Generic.List<ModelObjects.Game>();
            foreach (ModelObjects.Game g in games)
            {
                if (DataAccess.GameStats.HasGameRecap(g.Id))
                {
                    gameSummaries.Add(g);
                }
            }

            games.Clear();
            games.AddRange(gameSummaries);
        }
    %>
    <tr>
        <th align="left" nowrap="noWrap">
            <b>Game Summaries</b></th>
    </tr>
    <tr>
        <td align="left">
        <table>
        <%
            bool hasSummaries = false;
            foreach (System.Collections.Generic.List<ModelObjects.Game> games in prevGames)
            {
                if (games.Count > 0)
                {
                    hasSummaries = true;
                    break;
                }
            }
            
            if (hasSummaries)
            {
                curDay = yesterday.AddDays(-1.0);

                foreach (System.Collections.Generic.List<ModelObjects.Game> games in prevGames)
                {
                    if (games.Count > 0)
                    {
                        %><tr><td><small><b><%= curDay.ToString("MMM d") %></b></small></td></tr><%
                        DisplayScoreboard(games, false);
                    }
                    
                    curDay = curDay.AddDays(-1.0);
                }
            }
            else
            {
                %><tr><td align="left" nowrap="noWrap"><i>No Summaries Found</i><br /><br /></td></tr><%
            }
        %>
        </table>
        </td>
    </tr>
</table>
</div>