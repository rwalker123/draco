@using System.Web.Optimization
@model SportsManager.Baseball.ViewModels.LeagueHomeViewModel

@{
    ViewBag.Title = @Model.AccountName + " Home";
}


@section facebooklike
{
    @*<!-- facebook like control -->
<div id="fb-root"></div>
<script>
(function (d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = '//connect.facebook.net/en_US/all.js#xfbml=1&appId=@System.Configuration.ConfigurationManager.AppSettings["FacebookAppId"]';
    fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>
<!-- end facebook like control -->*@
}

@section head {
    <meta name="application-name" content="@Model.AccountName" />
    <meta name="msapplication-TileColor" content="#58595B" />
    @if (!String.IsNullOrEmpty(@Model.AccountLogoUrl))
    {
        <meta name="msapplication-TileImage" content="@Url.Content(@Model.AccountLogoUrl)" />
    }

    <link rel="stylesheet" href='@Url.Content("~/Areas/Baseball/Content/LeagueHome.css")' />
}

<div class="jumbotron">
    <div id="accountName">
        @if (Model.IsAdmin)
        {
            <button type="button" class="btn btn-default" style="float:right" data-bind="click: editAccountName, visible: viewMode"><span class="glyphicon glyphicon-edit"></span></button>

            <form class="form-horizontal" style="display:none" role="form" data-bind="visible: !viewMode()">
                <div class="form-group">
                    <label for="_accountName" class="col-sm-2 control-label">Account name</label>
                    <div class="col-sm-10">
                        <input id="_accountName" type="text" class="form-control" style="width:200px" data-bind="value: name" />
                    </div>
                </div>
                <div class="form-group">
                    <label for="_yearEst" class="col-sm-2 control-label">Year established</label>
                    <div class="col-sm-10">
                        <select id="_yearEst" class="selectpicker" data-bind="value: firstYear, options: availableYears"></select>
                    </div>
                </div>
                <div class="form-group">
                    <label for="_twitterAcct" class="col-sm-2 control-label">Twitter account</label>
                    <div class="col-sm-10">
                        <input class="form-control" style="width: 200px" id='twitterId' type="text" placeholder="enter twitter account" data-bind="value: twitterAccount" />
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-2">
                    </div>
                    <div class="col-sm-10">
                        <button type="button" class="btn btn-primary" data-bind="click: saveAccountName"><span class="glyphicon glyphicon-ok"></span></button>
                        <button type="button" class="btn btn-danger" data-bind="click: cancelEdit"><span class="glyphicon glyphicon-remove"></span></button>
                    </div>
                </div>
            </form>
        }

        <div data-bind="visible: viewMode">
            @if (String.IsNullOrEmpty(@Model.AccountLogoUrl))
            {
                <h1 style="margin-bottom:0px;">@Model.AccountName</h1>
            }
            else
            {
                <img class="img-rounded img-responsive" src="@Model.AccountLogoUrl" />
            }

            <h2>
            @if (Model.CurrentSeasonId != 0)
            {
                <text>@Model.SeasonName Season</text>
            }
            else
            {
                <text>Home</text>
            } 
            <small style="color: white" data-bind="visible: hasYear">est. <span data-bind="text: firstYear"></span></small>
            </h2>

            @if (Model.CurrentSeasonId == 0 && Model.IsAdmin)
            {
                <p class="help-block">You currently do not have any seasons setup. Click <b>@Html.ActionLink("here", "Index", "Season", new { area = "", accountId = Model.AccountId }, new { @class = "btn btn-primary" })</b> to set or create a new season.</p>
            }

            


        </div>

        @*@if (ViewData["TwitterAccountName"] != null)
        {
            <div style="display:inline-block"  id="twitterDisplay">
                <a href='https://twitter.com/@ViewData["TwitterAccountName"]' class="twitter-follow-button" data-size="large" data-show-count="true" data-lang="en">Follow @@@ViewData["TwitterAccountName"]</a>
                <script>!function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0]; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = "//platform.twitter.com/widgets.js"; fjs.parentNode.insertBefore(js, fjs); } }(document, "script", "twitter-wjs");</script>
            </div>
        }

        @if (ViewData["AccountUrl"] != null)
        {
            <div class="fb-like" data-href='@ViewData["AccountUrl"]' data-send="false" data-layout="button_count" data-width="100" data-show-faces="true" data-font="segoe ui"></div>
        }*@

    </div>
</div>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-8"> <!-- column 1-->
            @if (Model.ShowWorkouts)
            {
                <div class="row">
                    <div class="col-md-12">
                        @{Html.RenderPartial("WorkoutsView", new SportsManager.Baseball.ViewModels.WorkoutsViewModel(Model.Controller, Model.AccountId));}
                    </div>
                </div>
            }

            @if (Model.ContactId == 0 && Model.ShowWelcomeMessages)
            {
                <div class="row">
                    <div class="col-md-12">
                        @{Html.RenderPartial("WelcomeMessageView", new SportsManager.ViewModels.WelcomeMessageViewModel(Model.Controller, Model.AccountId));}
                    </div>
                </div>
            }

        @if (Model.ShowAnnouncements)
        { 
            <div class="row">
                <div class="col-md-12">
                    @{Html.RenderPartial("AnnouncementView", new SportsManager.ViewModels.AnnouncementsViewModel(Model.Controller, Model.AccountId));}
                </div>
            </div>
        }
        
        @if (Model.ShowPhotoGallery)
        {
            <div class="row">
                <div class="col-md-12">
                    @{Html.RenderPartial("PhotoGallery", new SportsManager.ViewModels.PhotoGalleryViewModel(Model.Controller, Model.AccountId));}
                </div>
            </div>
        }
        
        @if (Model.ContactId > 0 && Model.ShowWelcomeMessages)
        { 
            <div class="row">
                <div class="col-md-12">
                    @{Html.RenderPartial("WelcomeMessageView", new SportsManager.ViewModels.WelcomeMessageViewModel(Model.Controller, Model.AccountId));}
                </div>
            </div>
        }
        
        @if (Model.ShowHandouts)
        { 
            <div class="row">
                <div class="col-md-12">
                    @{Html.RenderPartial("HandoutsView", new SportsManager.ViewModels.HandoutsViewModel(Model.Controller, Model.AccountId));}
                </div>
            </div>
        }
        
    @if (Model.VideosEnabled && Model.ShowVideos)
    {
        <div class="row">
            <div id="videos" data-bind="visible: videosVisible">
                <div class="col-md-12">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h3 class="panel-title" style="float: left;">Videos</h3>
                            @if (Model.IsAdmin)
                            {
                                <h3 class="panel-title" style="float: right;"><a href="">[add]</a></h3>
                            }

                            <div style="clear:both"></div>
                        </div>

                        <div class="panel-body">
                            @if (Model.IsAdmin)
                            {
                                <div data-bind="visible: viewMode">
                                    <span style="font-size: larger">YouTube User Id: <span style="font-size: larger;font-weight: bold" data-bind="text: viewUserId"></span></span>
                                    <button type="button" class="btn btn-link" style="padding:0px" data-bind="click: editYouTube">edit</button>
                                </div>
                                <div data-bind="visible: !viewMode()">
                                    YouTube User Id: <input type="text" data-bind="value: userId" />
                                    <button type="button" class="btn btn-primary" style="padding:0px" data-bind="click: saveUserId">save</button> <button type="button" class="btn btn-warning" style="padding:0px" data-bind="click: resetUserId">cancel</button>
                                </div>
                            }
                            <div style="float:left" id="player"></div>
                            <div style="float:left" id="videos2"></div>
                            <div style="clear:both"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }


    </div>

    <div class="col-md-4"> <!-- second column -->

    @if (Model.UserTeams != null && Model.UserTeams.Any())
    {
        <div class="col-md-12">
            @{Html.RenderPartial("CurrentUserTeamsView", Model.UserTeams);}
        </div>
    }

    @if (Model.ShowScoreboard)
    { 
        <div class="col-md-12">
            @{Html.RenderPartial("ScoreboardView", new SportsManager.Baseball.ViewModels.ScoreboardViewModel(Model.Controller, Model.AccountId));}
        </div>
    }

        @if (Model.ShowLeagueLeaders)
        {
            <div class="col-md-12">
                @{Html.RenderPartial("Leaders", new SportsManager.Baseball.ViewModels.LeadersViewModel(Model.Controller, Model.AccountId));}
            </div>
        }

    @if (Model.ShowBirthdays)
    {     
        <div class="col-md-12">
            @{Html.RenderPartial("Birthdays", new SportsManager.ViewModels.BirthdayViewModel(Model.Controller, Model.AccountId));}
        </div>
    }

    @if (Model.ShowSponsors)
    {
        <div class="col-md-12">
            @{Html.RenderPartial("Sponsors", new SportsManager.ViewModels.SponsorsViewModel(Model.Controller, Model.AccountId));}
        </div>
    }
    </div> <!-- end second column -->

    </div> <!-- end main single row -->

    @if (Model.TwitterEnabled)
    {
        <div class="col-md-6">
            <div id="twitterFeed" data-bind="visible: displayTwitterFeed" style="margin-top:20px;margin-left:20px;width:400px;float:left">
                <h3 class="grad" style="margin-top:0px">Twitter</h3>
                @if (Model.IsAdmin)
                {
                    <div style="border: 1px solid lightGray;margin-top:5px;padding:3px">
                        <span>Twitter Widget: <input type="text" data-bind="value: twitterScript" placeholder="paste twitter widget code here" /></span><button type="button" class="btn btn-primary" style="padding:0px" data-bind="click: saveTwitterScript">save</button><br />
                        <span>Click <a href='https://twitter.com/settings/widgets' target="twitter">here</a> to visit Twitter to create a widget.</span><br /><br />
                    </div>
                }

                <div data-bind="html: htmlTwitterScript"></div>

            </div>
        </div>
    }

    @if (Model.FacebookEnabled)
    {
        <div class="col-md-6">
            <div id="facebookFeed" data-bind="visible: isVisible" style="margin-top:20px;margin-left:20px;width:500px;float:left">
                <h3 class="grad" style="margin-top:0px">Facebook</h3>
                @if (Model.IsAdmin)
                {
                    <div style="border: 1px solid lightGray;margin-top:5px;padding:3px">
                        <span>Facebook Fan Page: <input type="text" data-bind="value: editFanPage" placeholder="enter Facebook Fan Page" /></span>
                        <button type="button" class="btn btn-primary" style="padding:0px" data-bind="click: saveFanPage">save</button>
                        <button type="button" class="btn btn-danger" style="padding:0px" data-bind="click: cancelSaveFanPage">reset</button><br />
                    </div>
                }
                <div class="fb-like-box" data-bind="attr: { 'data-href': fanPageUrl }" data-width="500" data-show-faces="true" data-stream="true" data-header="true"></div>
            </div>
        </div>
    }

</div>

@section scripts {

    @Scripts.Render("~/bundles/knockout")

@* tinymce doesn't work with bundles because of the plug directory.*@
@if (BundleTable.EnableOptimizations)
{
    <script type="text/javascript" src="~/scripts/tinymce/tinymce.min.js"></script>
}
else
{
    <script type="text/javascript" src="~/scripts/tinymce/tinymce.js"></script>
}
    @Scripts.Render("~/bundles/bootstrap-wysiwyg")

@if (Model.ShowWelcomeMessages)
{ 
    <script type="text/javascript" src="~/Scripts/welcome.js"></script>
}

@if (Model.ShowAnnouncements)
{ 
    <script type="text/javascript" src="~/Scripts/announcement.js"></script>
}

@if (Model.ShowScoreboard)
{
    <script type="text/javascript" src="~/Scripts/knockout.validation.js"></script>
    <script type="text/javascript" src="~/Areas/Baseball/Scripts/entergameresults.js"></script>
    <script type="text/javascript" src="~/Areas/Baseball/Scripts/scoreboard.js"></script>
}

<script type="text/javascript" src="~/Scripts/jquery.maskedinput-1.3.1.min.js"></script>

@if (Model.ShowHandouts)
{
    <script type="text/javascript" src="~/Scripts/handouts.js"></script>
}

@if (Model.ShowWorkouts)
{ 
    <script type="text/javascript" src="~/Areas/Baseball/Scripts/workouts.js"></script>
}

@if (Model.ShowPhotoGallery)
{
    <script type="text/javascript" src="~/Scripts/photogallery.js"></script>
}
    
@if (Model.ShowLeagueLeaders)
{
    <script type="text/javascript" src="~/Areas/Baseball/Scripts/leaders.js"></script>
}

@if (Model.ShowSponsors)
{
    <script type="text/javascript" src="~/Scripts/sponsors.js"></script>
}

<!-- main javascript -->
<script type="text/javascript">

    $(document).ready(function () {
        // Ajax state is not remembered when clicking "back" button. Whenever a change is made with Ajax
        // on this page, hash is set to update. If back is pressed in that case, then reload the page.
        if (window.location.hash == '#update') {
            window.location.hash = '';
            window.location.reload();
        }

        initKOHelpers();

        InitViewModels(@Model.AccountId, '@Model.AccountName', @Model.FirstYear, '@ViewData["TwitterAccountName"]', '@ViewData["FacebookFanPage"]', @Model.IsAdmin.ToString().ToLower() );

        @if (Model.ShowPhotoGallery)
        {
            <text>
            InitPhotoGalleryViewModel(@Model.AccountId, @Model.IsAdmin.ToString().ToLower());
            </text>
        }

        @if (Model.ShowWelcomeMessages)
        {             
            <text>
            welcomeData = new WelcomeClass(@Model.AccountId, @Model.IsAdmin.ToString().ToLower());
            </text>
        }

        @if (Model.ShowAnnouncements)
        { 
            <text>
            announcementData = new AnnouncementClass(@Model.AccountId, @Model.IsAdmin.ToString().ToLower());
            </text>
        }
    
        @if (Model.ShowScoreboard)
        { 
            <text>
            initScoreboardViewModel(@Model.AccountId, @Model.IsAdmin.ToString().ToLower());
            </text>
        }
                
        @if (Model.ShowLeagueLeaders)
        { 
            <text>
            initLeadersViewModel(@Model.AccountId, @Model.IsAdmin.ToString().ToLower());
            </text>
        }
        
        @if (Model.ShowSponsors)
        {
            <text>
            initSponsorsViewModel(@Model.AccountId, @Model.IsAdmin.ToString().ToLower());
            </text>            
        }

                
        @if (Model.ShowHandouts)
        { 
            <text>
            var handoutData = new HandoutViewModel(@Model.AccountId, @Model.IsAdmin.ToString().ToLower());
            ko.applyBindings(handoutData, document.getElementById("handouts"));
            </text>
        }

        @if (Model.ShowWorkouts)
        {         
            <text>
            var workoutsData = new WorkoutsViewModel(@Model.AccountId, @Model.IsAdmin.ToString().ToLower());
            ko.applyBindings(workoutsData, document.getElementById("workouts"));
            </text>
        }

        @if (Model.ShowWelcomeMessages)
        { 
            <text>
            // from welcome message. If no welcome message, ShowFirstMenu doesn't exist.
            welcomeData.ShowFirstMenu();
            </text>
        }
        
        @if (Model.ShowAnnouncements)
        { 
            <text>
            announcementData.AdjustNewsMenuHeaders();
            </text>
        }
        

        $("#_yearEst").selectpicker();
    });
</script>


    @if (Model.VideosEnabled && Model.ShowVideos)
    {
        <!-- video playing -->
        <script type="text/javascript">

            $(function() {
                // 2. This code loads the IFrame Player API code asynchronously.
                var tag = document.createElement('script');

                // This is a protocol-relative URL as described here:
                //     http://paulirish.com/2010/the-protocol-relative-url/
                // If you're testing a local page accessed via a file:/// URL, please set tag.src to
                //     "https://www.youtube.com/iframe_api" instead.
                tag.src = "//www.youtube.com/iframe_api";
                var firstScriptTag = document.getElementsByTagName('script')[0];
                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
            });


            // 3. This function creates an <iframe> (and YouTube player)
            //    after the API code downloads.
            var player;
            function loadVideo(playerUrl, autoPlay) {
                player.cueVideoByUrl(playerUrl);
                if (autoPlay)
                    player.playVideo();
            }

            function onYouTubeIframeAPIReady() {

                @if (Model.IsAdmin) {
            <text>
                $(function () {
                    var ytViewModel = new youTubeViewModel(@Model.AccountId, '@Model.YouTubeUserId');
                    ko.applyBindings(ytViewModel, document.getElementById("videos"));
                });
                </text>
        }


                player = new YT.Player('player', {
                    width: '425',
                    @if(Model.IsAdmin)
            {
                <text>
                    height: '250',
                    </text>
            }
            else
            {
                <text>
                    height: '300',
                    </text>
            }
                    events: {
                        'onReady': onPlayerReady,
                        'onStateChange': onPlayerStateChange
                    }
                });

                loadVideos('@Model.YouTubeUserId');
            }

            function loadVideos(youTubeId) {

                $.ajax({
                    dataType: "json",
                    url: 'http://gdata.youtube.com/feeds/users/' + youTubeId + '/uploads?alt=json-in-script&max-results=50&callback=?',
                    success: function (data) {

                        var feed = data.feed;
                        var entries = feed.entry || [];

                        @if (!Model.IsAdmin) {
                    <text>
                        if (entries.length == 0) {
                            $('#videos').hide();
                            return;
                        }
                        </text>
                }

                        var videoHeight = '';
                        @if (Model.IsAdmin) {
                    // set the height of the video list if admin.
                    <text>
                        videoHeight = " style='height: 240px'";
                        </text>
                }

                        $('#videos2').html('');
                        var html = ['<ul class="videos"' + videoHeight + '>'];
                        for (var i = 0; i < entries.length; i++) {
                            var entry = entries[i];
                            var title = entry.title.$t.substr(0, 20);
                            var thumbnailUrl = entries[i].media$group.media$thumbnail[0].url;
                            var playerUrl = entries[i].media$group.media$content[0].url; // entries[i].id.$t.match('[^/]*$');
                            html.push('<li onclick="loadVideo(\'', playerUrl, '\', true)">',
                                      '<span class="titlec">', title, '...</span><br /><img src="',
                                      thumbnailUrl, '" style="width:130px;height:97px;cursor:pointer" />', '</span></li>');
                        }
                        html.push('</ul><br style="clear: left;"/>');
                        $('#videos2').html(html.join(''));
                    }
                });
            }

            // 4. The API will call this function when the video player is ready.
            function onPlayerReady(event) {
            }

            // 5. The API calls this function when the player's state changes.
            //    The function indicates that when playing a video (state=1),
            //    the player should play for six seconds and then stop.
            function onPlayerStateChange(event) {
            }

            function stopVideo() {
            }

        </script>
    }


    <!-- disqus

    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        -->
    <!-- drag/drop support for logo -->
    @Scripts.Render("~/bundles/jquery-file-upload")
    <script type="text/javascript" src="~/Areas/Baseball/Scripts/leagueHome.js"></script>

    @if (Model.IsAdmin)
    {
        <script type="text/javascript">
            $(document).ready(function () {
                $(document).bind('drop dragover', function (e) {
                    e.preventDefault();
                });

                var elem = $('#accountLogo');
                var busyElem = $('#accountLogoBusy');
                elem.bind('dragenter', function (e) {
                    $(this).addClass('over');
                });

                elem.bind('dragleave drop', function (e) {
                    $(this).removeClass('over');
                });

                setupLogoDrop(elem, busyElem);
            });

            function setupLogoDrop(elem, busyElem) {
                elem.fileupload({
                    dataType: 'json',
                    dropZone: elem,
                    url: window.config.rootUri + '/api/FileUploaderAPI/@Model.AccountId/AccountLargeLogo',
                    add: function (e, data) {

                        // set opacity of current image and show busy cusor.
                        elem.fadeTo('fast', 0.4);
                        busyElem.show('fast');

                        data.submit();
                    },
                    done: function (e, data) {
                        var seconds = new Date().getTime() / 1000;
                        elem.attr("src", data.result + "?" + seconds);
                    },
                    always: function (e, data) {
                        //remove opacity, hide progress
                        elem.fadeTo('fast', 1.0);
                        busyElem.hide('fast');
                    }
                });
            }

        </script>

    } @* Model.IsAdmin *@

}

