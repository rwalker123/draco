@model SportsManager.Baseball.ViewModels.SettingsViewModel
@using System.Web.Optimization;

@if (!Model.IsAdmin) {
    return;
}

@{
	ViewBag.Title = @Model.AccountName + " Settings";
}

@section head 
{
<style type="text/css">
    label {
        margin: 5px;
    }

    input[type="checkbox"] {
        margin-right:5px;
        margin-left:-20px;
    }

    .panel-body {
        margin-left: 10px;
    }
</style>
}
<div class="jumbotron">
    @Header.DisplayHeader("Settings", Model.AccountName, Model.AccountLogoUrl)
</div> <!-- content-wrapper -->

<div class="container-fluid">
    <div class="row" style="margin-top:20px">
        <div class="col-md-3">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <h3 class="panel-title">Contact Information</h3>
                </div>
                <div class="panel-body">
                    <div><label><input type="checkbox" data-bind="checked: myInformation" />Show contact information on "My Information" screen </label></div>
                    <div><label><input type="checkbox" data-bind="checked: userEditContact" />Allow users to edit contact information</label></div>
                    <div><label><input type="checkbox" data-bind="checked: showMemberBusiness" />Show Member Business Directory</label></div>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <h3 class="panel-title">Player Data</h3>
                </div>
                <div class="panel-body">
                    <div><label><input type="checkbox" data-bind="checked: playerWaiver" />Track player waiver </label></div>
                    <div><label><input type="checkbox" data-bind="checked: waiverStatus" />Show waiver status on Roster page</label></div>

                    <div><label><input type="checkbox" data-bind="checked: playerIdentification" />Track player identification submitted</label></div>
                    <div><label><input type="checkbox" data-bind="checked: showIdentification" />Show Identification status on Roster page</label></div>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <h3 class="panel-title">Team Pages</h3>
                </div>
                <div class="panel-body">
                    <div><label><input type="checkbox" data-bind="checked: printableRoster" />Show printable Roster Card</label></div>
                    <div><label><input type="checkbox" data-bind="checked: showUserDataOnRoster" />Show user data on Roster</label></div>
                </div>
            </div>
        </div>

        <div class="col-md-3">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <h3 class="panel-title">Message Board</h3>
                </div>
                <div class="panel-body">
                    <div><label><input type="checkbox" data-bind="checked: msgBoardPhoto" />Show photo of poster</label></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {

@Scripts.Render("~/bundles/knockout")

    <script type="text/javascript">
        var editAccountNameViewModel = function (accountId) {
            var self = this;
            self.accountId = accountId;

            self.myInformation = ko.observable();
            self.myInformation.subscribe(function (newValue) {
                self.settingChanged('ShowContactInfo', newValue);
            });
            self.userEditContact = ko.observable();
            self.userEditContact.subscribe(function (newValue) {
                self.settingChanged('EditContactInfo', newValue);
            });
            self.showMemberBusiness = ko.observable();
            self.showMemberBusiness.subscribe(function (newValue) {
                self.settingChanged('ShowBusinessDirectory', newValue);
            });
            self.playerWaiver = ko.observable();
            self.playerWaiver.subscribe(function (newValue) {
                self.settingChanged('TrackWaiver', newValue);
            });
            self.waiverStatus = ko.observable();
            self.waiverStatus.subscribe(function (newValue) {
                self.settingChanged('ShowWaiver', newValue);
            });
            self.playerIdentification = ko.observable();
            self.playerIdentification.subscribe(function (newValue) {
                self.settingChanged('TrackIdentification', newValue);
            });
            self.showIdentification = ko.observable();
            self.showIdentification.subscribe(function (newValue) {
                self.settingChanged('ShowIdentification', newValue);
            });
            self.printableRoster = ko.observable();
            self.printableRoster.subscribe(function (newValue) {
                self.settingChanged('ShowRosterCard', newValue);
            });
            self.showUserDataOnRoster = ko.observable();
            self.showUserDataOnRoster.subscribe(function (newValue) {
                self.settingChanged('ShowUserInfoOnRosterPage', newValue);
            });
            self.msgBoardPhoto = ko.observable();
            self.msgBoardPhoto.subscribe(function (newValue) {
                self.settingChanged('MsgBoardShowPhoto', newValue);
            });

            self.settingChanged = function (settingKey, value) {
                $.ajax({
                    type: "POST",
                    url: window.config.rootUri + '/api/AccountAPI/' + self.accountId + '/Settings',
                    datatype: "json",
                    data: {
                        Id: settingKey,
                        Value: value
                    },
                    success: function (data) {
                    }
                });
            }

            self.setSetting = function (settingKey, value) {
                if (settingKey == "ShowContactInfo") {
                    self.myInformation(value);
                }
                else if (settingKey == "EditContactInfo") {
                    self.userEditContact(value);
                }
                else if (settingKey == "ShowBusinessDirectory") {
                    self.showMemberBusiness(value);
                }
                else if (settingKey == "TrackWaiver") {
                    self.playerWaiver(value);
                }
                else if (settingKey == "ShowWaiver") {
                    self.waiverStatus(value);
                }
                else if (settingKey == "TrackIdentification") {
                    self.playerIdentification(value);
                }
                else if (settingKey == "ShowIdentification") {
                    self.showIdentification(value);
                }
                else if (settingKey == "ShowRosterCard") {
                    self.printableRoster(value);
                }
                else if (settingKey == "MsgBoardShowPhoto") {
                    self.msgBoardPhoto(value);
                }
                else if (settingKey == "ShowUserInfoOnRosterPage") {
                    self.showUserDataOnRoster(value);
                }
            }

            $.ajax({
                url: window.config.rootUri + '/api/AccountAPI/' + self.accountId + '/Settings',
                dataType: "json",
                success: function (data) {
                    $.each(data.KeyValues, function (index, value) {
                        self.setSetting(index, value == 'true');
                    });
                }
            });
        }

    </script>
    <script type="text/javascript">
        function initViewModel(accountId) {
            initKOHelpers();

            var vm = new editAccountNameViewModel(accountId);
            ko.applyBindings(vm);
        }

        $(document).ready(function () {
            initViewModel(@Model.AccountId);
        });
    </script>
}
